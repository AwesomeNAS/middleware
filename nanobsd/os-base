#!/bin/sh
#-
# Copyright (c) 2010-2011 iXsystems, Inc., All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED.  IN NO EVENT SHALL iXsystems, Inc. OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
# OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
# OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
#
# This file is heavily derived from both Sam Leffler's Avilia config,
# as well as the BSDRP project's config file.  Neither of these have
# an explicit copyright/license statement, but are implicitly BSDL.
#

#
# FreeNAS specific bits of the common stuff.
#

# Override the defaults in nanobsd.sh from a common script.
. "$AVATAR_ROOT/build/nano_env"
# Helpful functions.
. "$AVATAR_ROOT/build/functions.sh"

if is_truenas ; then
	. ${TRUENAS_COMPONENTS_ROOT}/nanobsd/os-base.truenas
fi

customize_cmd_truenas()
{
	if is_truenas ; then
		customize_cmd $*
	else
		echo "Skipping TrueNAS specific command $*"
	fi
}

FlashDevice generic 2g

# Pull in common definitions.
. ${NANO_CFG_BASE}/common

customize_cmd build_debug_kernel
customize_cmd install_debug_kernel

if [ -z "$USE_POUDRIERE" ]; then
	customize_cmd build_nas_source2
fi

if [ -z "$USE_POUDRIERE" ]; then
	. ${AVATAR_ROOT}/nanobsd/os-ports
else
	customize_cmd install_ports
fi

if [ "${NANO_PACKAGE_ONLY}" -eq 1 ]; then
 	CONF_INSTALL="${CONF_INSTALL}
${PKG_ONLY_MAKE_CONF}
"
	echo "Automatically building a thin image with packages"
else
	echo "Automatically building a * * F A T * * image so we can build ports"
fi

VARS="MASTER_SITE_BACKUP MASTER_SITE_OVERRIDE PACKAGEROOT PACKAGESITE"

for var in $VARS; do
	val=$(eval echo "\$$var")
	if [ -n "$val" ]; then
		CONF_INSTALL="${CONF_INSTALL}
$var=$val"
	fi
done

if [ "$PACKAGE_PREP_BUILD" = 1 ]; then
	echo "Skipping post-package customize steps"
	do_image=false
else
hack_nsswitch_conf ( )
{
	# Remove all references to NIS in the nsswitch.conf file
	# Not sure this is still needed, but FreeNAS has it...
	sed -i.bak -es/nis/files/g ${NANO_WORLDDIR}/etc/nsswitch.conf
	rm -f ${NANO_WORLDDIR}/etc/nsswitch.conf.bak
}
customize_cmd hack_nsswitch_conf

save_build ( )
{
	VERSION_FILE=${NANO_WORLDDIR}/etc/version
	if [ "${SVNREVISION}" = "${REVISION}" ]; then
		echo "${NANO_NAME}" > "${VERSION_FILE}"
	else
		echo "${NANO_NAME} (${SVNREVISION})" > "${VERSION_FILE}"
	fi
}
customize_cmd save_build

add_pbi_manager()
{
	local pm dst
	pm=${AVATAR_ROOT}/src/pcbsd/pbi-manager
	dst=${NANO_WORLDDIR}/usr/local
	df="${dst}/share/pcbsd/distfiles/"

	pprint 2 "Adding pbi-manager"

	mkdir -p ${dst}/sbin >/dev/null 2>/dev/null
	cp ${pm}/pbi-manager ${dst}/sbin/pbi_create
	ln -f ${dst}/sbin/pbi_create ${dst}/sbin/pbi_add
	ln -f ${dst}/sbin/pbi_create ${dst}/sbin/pbi_addrepo
	ln -f ${dst}/sbin/pbi_create ${dst}/sbin/pbi_browser
	ln -f ${dst}/sbin/pbi_create ${dst}/sbin/pbi_autobuild
	ln -f ${dst}/sbin/pbi_create ${dst}/sbin/pbi_delete
	ln -f ${dst}/sbin/pbi_create ${dst}/sbin/pbi_deleterepo
	ln -f ${dst}/sbin/pbi_create ${dst}/sbin/pbi_icon
	ln -f ${dst}/sbin/pbi_create ${dst}/sbin/pbi_info
	ln -f ${dst}/sbin/pbi_create ${dst}/sbin/pbi_indextool
	ln -f ${dst}/sbin/pbi_create ${dst}/sbin/pbi_listrepo
	ln -f ${dst}/sbin/pbi_create ${dst}/sbin/pbi_makepatch
	ln -f ${dst}/sbin/pbi_create ${dst}/sbin/pbi_makeport
	ln -f ${dst}/sbin/pbi_create ${dst}/sbin/pbi_makerepo
	ln -f ${dst}/sbin/pbi_create ${dst}/sbin/pbi_metatool
	ln -f ${dst}/sbin/pbi_create ${dst}/sbin/pbi_patch
	ln -f ${dst}/sbin/pbi_create ${dst}/sbin/pbi_update
	ln -f ${dst}/sbin/pbi_create ${dst}/sbin/pbi_update_hashdir
	ln -f ${dst}/sbin/pbi_create ${dst}/sbin/pbid
	ln -f ${dst}/sbin/pbi_create ${dst}/sbin/pbi-crashhandler
	rm -f ${dst}/pbi-manager

	mkdir -p ${df} >/dev/null 2>/dev/null
	cp ${pm}/repo/pcbsd.rpo ${df}/pcbsd.rpo
}
customize_cmd add_pbi_manager

add_gui()
{
	local gui dst dstCR
	gui=${AVATAR_ROOT}/gui
	dstCR=/usr/local/www/freenasUI
	dst=${NANO_WORLDDIR}${dstCR}
	if [ -d ${gui} ]; then
	pprint 2 "Adding freenas web gui"
	mkdir -p ${dst}
	( cd ${gui}
	  find . | egrep -v "${NANO_IGNORE_FILES_EXPR}" | cpio -R root:wheel -dumpv ${dst} )
	if is_truenas ; then
		( cd ${TRUENAS_COMPONENTS_ROOT}/gui
		  find . | egrep -v "${NANO_IGNORE_FILES_EXPR}" | cpio -R root:wheel -dumpv ${dst} )
	fi
	pprint 2 "Making freenas initial database"
	mkdir -p ${NANO_WORLDDIR}/data
	CR "(cd ${dstCR}; python manage.py syncdb --noinput --migrate --traceback)"
	CR "(cd ${dstCR}; python manage.py collectstatic --noinput)"
	CR "(cd ${dstCR}; python tools/compilemsgs.py)"
	CR "(cd /data; cp freenas-v1.db factory-v1.db)"
	CR "ln -sf /etc/local_settings.py ${dstCR}/local_settings.py"
	CR "chown -R www:www ${dstCR} data"
	if is_truenas ; then
		add_gui_encrypted "$gui" "$dst" "$dstCR"
	fi
	else
		pprint 2 "GUI OMITTED from image"
	fi
}
customize_cmd add_gui

add_autotune()
{
	local autotune autotune_src

	# See ix-loader for more details.
	autotune_src=$AVATAR_ROOT/src/autotune/files/autotune.py
	autotune=$NANO_WORLDDIR/usr/local/bin/autotune
	install -m 0755 $autotune_src $autotune
}
customize_cmd add_autotune

customize_cmd_truenas add_licensor

arch_specific_ko()
{
	cp ${AVATAR_ROOT}/src/kernel_modules/arcsas_${FREENAS_ARCH}.ko ${NANO_WORLDDIR}/boot/modules/arcsas.ko
}
if ! is_truenas ; then
	customize_cmd arch_specific_ko
fi

add_pc_extractoverlay()
{
	local pce src dst pcbsd bin

	pce="pc-extractoverlay"
	src="${AVATAR_ROOT}/src/pcbsd/${pce}"
	dst="${NANO_WORLDDIR}/usr/local"
	pcbsd="${dst}/share/pcbsd"
	bin="${dst}/bin"

	pprint 2 "Adding pc-extractoverlay"

	cp ${src}/${pce} ${bin}/${pce}
	chmod 755 ${bin}/${pce}

	mkdir -p ${dst}/etc
	mkdir -p ${pcbsd}/conf
	mkdir -p ${pcbsd}/distfiles

	cp ${src}/server-excludes ${pcbsd}/conf
	cp ${src}/server-overlay/usr/local/etc/pkg-pubkey.cert ${dst}/etc

	tar -cvJf ${pcbsd}/distfiles/server-overlay.txz -C ${src}/server-overlay .
}
customize_cmd add_pc_extractoverlay

add_warden()
{
	local wt src dst share hooks

	wt="${AVATAR_ROOT}/nanobsd/Files/etc/ix/templates/warden"
	src="${AVATAR_ROOT}/src/pcbsd/warden"
	dst="${NANO_WORLDDIR}/usr/local"
	share="${dst}/share/warden"
	hooks="${share}/scripts/hooks"

	pprint 2 "Adding warden"

	mkdir -p ${dst}/etc >/dev/null 2>/dev/null
	mkdir -p ${dst}/bin >/dev/null 2>/dev/null
	mkdir -p ${share} >/dev/null 2>/dev/null
	mkdir -p ${share}/tmp >/dev/null 2>/dev/null
	mkdir -p ${share}/export >/dev/null 2>/dev/null

	cp ${src}/bin/warden ${dst}/bin/warden
	chmod 755 ${dst}/bin/warden

	cp ${src}/pluginjail-packages ${share}/pluginjail-packages
	chmod 644 ${share}/pluginjail-packages

	cp ${src}/pcbsd-utils-packages ${share}/pcbsd-utils-packages
	chmod 644 ${share}/pcbsd-utils-packages

	cp ${src}/conf/warden.conf ${dst}/etc/warden.conf
	chmod 644 ${dst}/etc/warden.conf

	cp -r ${src}/linux-installs ${share}
	cp -r ${src}/scripts ${share}
	chmod 755 ${share}/scripts/backend/*

	cp ${src}/scripts/rc.d/wardenrc ${dst}/etc/rc.d/wardenrc
	chmod 755 ${dst}/etc/rc.d/wardenrc

	cp ${src}/agent.png ${share}/
	cp ${src}/agent.png ${share}/warden.png

	mkdir -p ${share}/bin >/dev/null 2>/dev/null
	mkdir -p ${hooks} >/dev/null 2>/dev/null

	cp ${wt}/jail-* ${hooks}/
	chmod 755 ${hooks}/jail-*
}
customize_cmd add_warden

add_pcbsd_libsh()
{
	local src dst
	src="${AVATAR_ROOT}/src/pcbsd/libsh"
	dst="${NANO_WORLDDIR}/usr/local/share/pcbsd/scripts"

	pprint 2 "Adding pcbsd libsh"

	mkdir -p ${dst} >/dev/null 2>/dev/null

	cp ${src}/functions.sh ${dst}/functions.sh
	chmod 755 ${dst}/functions.sh
}
customize_cmd add_pcbsd_libsh

add_pcbsd_xtrafiles()
{
	local src dst
	src="${AVATAR_ROOT}/src/pcbsd/xtrafiles/local/share/pcbsd/conf"
	dst="${NANO_WORLDDIR}/usr/local/share/pcbsd/conf"

	pprint 2 "Adding pcbsd mirrors"

	mkdir -p ${dst} >/dev/null 2>/dev/null

	for xf in $(ls ${src})
	do
		cp ${src}/${xf} ${dst}/${xf}
		chmod 644 ${dst}/${xf}
	done
}
customize_cmd add_pcbsd_xtrafiles

add_pbi_wrapper()
{
	local _pm 
	local _ad
	local _bd

	_pm="${NANO_WORLDDIR}/usr/pbi/.pbiwrapper-${NANO_ARCH}"
	_ad="${AVATAR_ROOT}/pbi"
	_bd="${_ad}/${NANO_ARCH}"

	pprint 2 "Adding PBI wrapper"

	mkdir -p "${_bd}"
	if [ ! -s "${_bd}/.pbiwrapper" ]
	then
		cp "${_pm}" "${_ad}/.pbiwrapper-${NANO_ARCH}"
	fi
}
customize_cmd add_pbi_wrapper

# Move the $world/data to the /data partion
move_data()
{
	db=${NANO_WORLDDIR}/data
	rm -rf ${NANO_DATADIR}
	mkdir -p ${NANO_DATADIR}
	( cd ${db} ; find . | cpio -R root:wheel -dumpv ${NANO_DATADIR} )
	rm -rf ${db}
}
customize_cmd move_data

add_data_to_fstab ( )
{
	(
	cd ${NANO_WORLDDIR}
	echo "/dev/${NANO_DRIVE}s4 /data ufs rw,noatime 2 2" >> etc/fstab
	mkdir -p data
	)
	
}
customize_cmd add_data_to_fstab

customize_cmd_truenas afpd_conf_symlink

select_httpd ( )
{
	echo 'nginx_enable="YES"' >> ${NANO_WORLDDIR}/etc/rc.conf
}
customize_cmd select_httpd

remove_patch_divots ( )
{
	find ${NANO_WORLDDIR} -name \*.orig -or -name \*.rej -delete
}
customize_cmd remove_patch_divots

configure_mnt_md ( )
{
	mkdir -m 755 -p ${NANO_WORLDDIR}/conf/base/mnt
	echo 2048 > ${NANO_WORLDDIR}/conf/base/mnt/md_size
}
customize_cmd configure_mnt_md

shrink_md_fbsize()
{
	# We have a lot of little files on our memory disks. Let's decrease
	# the block and frag size to fit more little files on them (this
	# halves our space requirement by ~50% on /etc and /var on 8.x --
	# and gives us more back on 9.x as the default block and frag size
	# are 4 times larger).
	sed -i '' -e 's,-S -i 4096,-S -i 4096 -b 4096 -f 512,' \
		${NANO_WORLDDIR}/etc/rc.initdiskless
}
customize_cmd shrink_md_fbsize

if [ "${DEBUG}" = 1 ]; then

unmute_console_logging()
{
	# /var is small. Don't fill it up with messages from console.log
	# because it's a chatty log.
	sed -i '' -e 's/#console.info/console.info/' \
			"${NANO_WORLDDIR}/etc/syslog.conf"
}
customize_cmd unmute_console_logging

fi

remove_var_db_pkg()
{
	# Workaround to remove packages from a fat image
	CR "pkg_delete -f gcc47\* || true"
	CR "pkg_delete -f gcc-ecj\* || true"
	CR "pkg_delete -f kBuild\* || true"
	CR "pkg_delete -f cmake\* || true"
	CR "pkg_delete -f docbook\* || true"
	CR "pkg_delete -f automake\* || true"
	CR "pkg_delete -f autoconf\* || true"
	# Eats up ~7 MB on the install image.
	rm -Rf ${NANO_WORLDDIR}/var/db/pkg
	# bsnmpd complains about no such directory found
	mkdir ${NANO_WORLDDIR}/var/db/pkg
}
customize_cmd remove_var_db_pkg

fix_easy_install_pth()
{
	local site_packages

	site_packages="$NANO_WORLDDIR/usr/local/lib/$PYTHON_DEFAULT_VERSION/site-packages"

	env PYTHONPATH=$site_packages \
		python ${AVATAR_ROOT}/tools/sanitize_pth.py -f \
		$site_packages
}
customize_cmd fix_easy_install_pth

create_var_home_symlink()
{
	# Create a link to a non-persistent location that ix-activedirectory
	# and ix-ldap can use as a pointer to a home directory on persistent
	# storage (/mnt/tank/homes, etc).
	rm -f $NANO_WORLDDIR/home || :
	rm -Rf $NANO_WORLDDIR/home
	ln -sfh /var/home $NANO_WORLDDIR/home
}
customize_cmd create_var_home_symlink

add_netcli_shell()
{
	echo "/etc/netcli.sh" >> ${NANO_WORLDDIR}/etc/shells
}
customize_cmd add_netcli_shell

freenas_custom()
{
	compress_ko()
	{
# XXX: If we want to Dtrace the kernel it cannot be compressed
#		if [ -f ${NANO_WORLDDIR}/boot/kernel/$1 ]; then
#			gzip -v9 ${NANO_WORLDDIR}/boot/kernel/$1
#		fi
	}

	# Compress the kernel and preloaded modules
	compress_ko kernel
	compress_ko fuse.ko
	compress_ko geom_mirror.ko
	compress_ko geom_stripe.ko
	compress_ko geom_raid3.ko
	compress_ko geom_gate.ko

	# nuke .pyo files
	find ${NANO_WORLDDIR}/usr/local -name '*.pyo' | xargs rm -f

	# kill includes (saves 14MB)
	find ${NANO_WORLDDIR}/usr/local/include \! -name 'pyconfig.h' -type f | xargs rm -f

	# kill docs (saves 22MB)
	rm -rf ${NANO_WORLDDIR}/usr/local/share/doc
	rm -rf ${NANO_WORLDDIR}/usr/local/share/gtk-doc

	# kill gobject introspection xml
	rm -rf ${NANO_WORLDDIR}/usr/local/share/gir-1.0

	# and info (2MB)
	rm -rf ${NANO_WORLDDIR}/usr/local/info

	# and man pages (4.4MB)
	rm -rf ${NANO_WORLDDIR}/usr/local/man

	# and examples (1.7M)
	rm -rf ${NANO_WORLDDIR}/usr/local/share/examples

	# and groff_fonts junk (3MB)
	rm -rf ${NANO_WORLDDIR}/usr/share/groff_font
	rm -rf ${NANO_WORLDDIR}/usr/share/tmac
	rm -rf ${NANO_WORLDDIR}/usr/share/me

	# Kill all .a's and .la's that are installed (20MB+)
	find ${NANO_WORLDDIR} -name \*.a -or -name \*.la -delete

	# magic.mgc is just a speed optimization.  Kill it for 1.7MB
	rm -f ${NANO_WORLDDIR}/usr/share/misc/magic.mgc

	# strip binaries (saves spaces on non-debug images).
	if [ "${DEBUG}" != 1 ]; then
		pprint 4 "Stripping binaries and libraries"
		for dir in $(find ${NANO_WORLDDIR}/usr/local -name '*bin' -or -name 'libexec' -maxdepth 3); do
			for f in $(find $dir -type f); do
				if ! dontstrip "$f"
				then
					strip 2>/dev/null $f || :
				fi
			done
		done
		# .so's are the only thing that need to be stripped. The rest
		# should remain untouched.
		for f in $(find ${NANO_WORLDDIR}/usr/local/lib -name '*.so' -or -name '*.so.*' -maxdepth 3); do
				strip 2>/dev/null $f || :
		done
	fi

	# We dont need proftpd blacklist.dat.sample, takes up too much space in /etc
	rm -f ${NANO_WORLDDIR}/conf/base/etc/local/proftpd/blacklist.dat.sample

	# Last second tweaks
	chown -R root:wheel ${NANO_WORLDDIR}/root
	chmod 0755 ${NANO_WORLDDIR}/root/*
	chmod 0755 ${NANO_WORLDDIR}/*
	chmod 0440 ${NANO_WORLDDIR}/usr/local/etc/sudoers
	chown -R root:wheel ${NANO_WORLDDIR}/etc
	chown -R root:wheel ${NANO_WORLDDIR}/boot
	chown root:wheel ${NANO_WORLDDIR}/
	chown root:wheel ${NANO_WORLDDIR}/usr
	find ${NANO_WORLDDIR} -type f -name "*~" -delete
	find ${NANO_WORLDDIR}/usr/local -type f -name "*.po" -delete
	find ${NANO_WORLDDIR} -type f -name "*.service" -delete
	mkdir ${NANO_WORLDDIR}/data/zfs
	ln -s -f /usr/local/bin/bash ${NANO_WORLDDIR}/bin/bash
	ln -s -f /data/zfs/zpool.cache ${NANO_WORLDDIR}/boot/zfs/zpool.cache

	# This is wrong.  Needs a way to tell kernel how to find the mount utility
	# instead.
	mv ${NANO_WORLDDIR}/sbin/mount_ntfs ${NANO_WORLDDIR}/sbin/mount_ntfs-kern
	ln -s -f /usr/local/bin/ntfs-3g ${NANO_WORLDDIR}/sbin/mount_ntfs

}
late_customize_cmd freenas_custom

fi # [ $PACKAGE_PREP_BUILD = 1 ]

if $do_image; then
last_orders() {
	local cd_image_log
	local full_image full_image_log
	local firmware_img gui_upgrade_bname gui_upgrade_image_log
	local vmdk_image vmdk_image_compressed vmdk_image_log

	cd_image_log="${MAKEOBJDIRPREFIX}/_.cd_iso"
	full_image_log="${MAKEOBJDIRPREFIX}/_.full_image"
	gui_image_log="${MAKEOBJDIRPREFIX}/_.gui_image"
	vmdk_image_log="${MAKEOBJDIRPREFIX}/_.vmdk_image"

	firmware_img="$NANO_DISKIMGDIR/firmware.img"
	full_image="$NANO_DISKIMGDIR/$NANO_IMGNAME.img"
	gui_upgrade_bname="$NANO_DISKIMGDIR/$NANO_IMGNAME.GUI_Upgrade"
	vmdk_image="$NANO_DISKIMGDIR/$NANO_IMGNAME.vmdk"
	vmdk_image_compressed="$NANO_DISKIMGDIR/$NANO_IMGNAME.vmdk.xz"

	if $do_copyout_partition; then

		pprint 2 "Compressing GUI upgrade image"
		log_file "${gui_image_log}"

		(
		set -x

		# NOTE: keep in synch with create_*_diskimage.
		mv "$NANO_DISKIMGDIR/_.disk.image" "$firmware_img"

		# the -s arguments map root's "update*" files into the
		# gui image's bin directory.

		if is_truenas ; then
			tar -cpvf - \
				-s '@^update$@bin/update@' \
				-s '@^updatep1$@bin/updatep1@' \
				-s '@^updatep2$@bin/updatep2@' \
				-C "$AVATAR_ROOT/nanobsd/Files/root" \
					update updatep1 updatep2 \
				-C "$NANO_WORLDDIR" \
					etc/avatar.conf \
				-C "$AVATAR_ROOT/nanobsd/Installer" \
					. \
				-C "${TRUENAS_COMPONENTS_ROOT}/nanobsd/Installer" \
					. \
				-C "$AVATAR_ROOT/nanobsd/GUI_Upgrade" \
					. \
				-C "$NANO_DISKIMGDIR" \
					${firmware_img##*/} \
				| ${NANO_XZ} ${PXZ_ACCEL} -9 -cz > "$gui_upgrade_bname.txz"
		else
			tar -cpvf - \
				-s '@^update$@bin/update@' \
				-s '@^updatep1$@bin/updatep1@' \
				-s '@^updatep2$@bin/updatep2@' \
				-C "$AVATAR_ROOT/nanobsd/Files/root" \
					update updatep1 updatep2 \
				-C "$NANO_WORLDDIR" \
					etc/avatar.conf \
				-C "$AVATAR_ROOT/nanobsd/Installer" \
					. \
				-C "$AVATAR_ROOT/nanobsd/GUI_Upgrade" \
					. \
				-C "$NANO_DISKIMGDIR" \
					${firmware_img##*/} \
				| ${NANO_XZ} ${PXZ_ACCEL} -9 -cz > "$gui_upgrade_bname.txz"
		fi
		) > "${gui_image_log}" 2>&1
		(
		cd $NANO_DISKIMGDIR
		sha256_signature=`sha256 ${NANO_IMGNAME}.GUI_Upgrade.txz`
		echo "${sha256_signature}" > ${NANO_IMGNAME}.GUI_Upgrade.txz.sha256.txt
		)
	fi

	pprint 2 "Creating VMDK"
	log_file "${vmdk_image_log}"

	(
	set -x
	if [ -f /usr/local/bin/VBoxManage ]; then
		VBoxManage convertfromraw "$NANO_DISKIMGDIR/$NANO_IMGNAME" "${vmdk_image}" --format VMDK
		chmod 644 "${vmdk_image}"
		time ${NANO_XZ} ${PXZ_ACCEL} --verbose -9 -f "${vmdk_image}"
		sha256_signature=`sha256 ${vmdk_image_compressed}`
		echo "${sha256_signature}" > ${vmdk_image_compressed}.sha256.txt
	else
		echo "VBoxManage not found"
	fi
	) > "$vmdk_image_log}" 2>&1

	pprint 2 "Compressing full disk image"
	log_file "${full_image_log}"

	(
	set -x

	# NOTE: keep in synch with create_iso.sh.
	# NOTE: this is still needed after the .txz payload has been
	# added because pc-sysinstall doesn't support raw images
	# (-.-).
	mv "$NANO_DISKIMGDIR/$NANO_IMGNAME" "$full_image"
	time ${NANO_XZ} ${PXZ_ACCEL} --verbose -9 -f "$full_image"

	) > "${full_image_log}" 2>&1
	(
	cd $NANO_DISKIMGDIR
	sha256_signature=`sha256 ${NANO_IMGNAME}.img.xz`
	echo "${sha256_signature}" > ${NANO_IMGNAME}.img.xz.sha256.txt
	)

	pprint 2 "Creating ISO image"
	log_file "${cd_image_log}"

	(
	set -x

	sh "$AVATAR_ROOT/build/create_iso.sh"

	) > "${cd_image_log}" 2>&1

}
fi # $do_image


build_kernel2 ( ) (
	local _kernel=$1
	if [ -z "$1" ] ; then
		_kernel=${NANO_KERNEL}
	fi
	local _logfile="${MAKEOBJDIRPREFIX}/_.bk_$(basename ${_kernel})"

	pprint 2 "build kernel ($_kernel)"
	log_file "${_logfile}"

	(
	if [ -f ${_kernel} ] ; then
		kernconfdir=$(realpath $(dirname ${_kernel}))
		kernconf=$(basename ${_kernel})
	else
		kernconf=${_kernel}
	fi

	cd ${NANO_SRC};
	# unset these just in case to avoid compiler complaints
	# when cross-building
	unset TARGET_CPUTYPE
	unset TARGET_BIG_ENDIAN
	# Note: We intentionally build all modules, not only the ones in
	# NANO_MODULES so the built world can be reused by multiple images.
	env \
		TARGET=${NANO_ARCH%:*} \
		TARGET_ARCH=${NANO_ARCH##*:} \
		${NANO_PMAKE} \
		buildkernel NO_KERNELCLEAN=1 \
		${kernconfdir:+"KERNCONFDIR="}${kernconfdir} \
		KERNCONF=${kernconf} \
		MODULES_OVERRIDE="${NANO_MODULES}" \
		SRCCONF=${SRCCONF} \
		__MAKE_CONF=${NANO_MAKE_CONF_BUILD} \
	) > ${_logfile} 2>&1
)

install_kernel2 ( ) (
	local _kernel=$1
	local _kodir=$2

	if [ -z "$1" ] ; then
		_kernel=${NANO_KERNEL}
	fi
	if [ -z "$2" ] ; then
		_kodir=/boot/kernel
	fi

	local _logfile="${NANO_OBJ}/_.ik_$(basename ${_kernel})"
	pprint 2 "install kernel ($_kernel)"
	log_file "${_logfile}"

	(
	if [ -f ${_kernel} ] ; then
		kernconfdir=$(realpath $(dirname ${_kernel}))
		kernconf=$(basename ${_kernel})
	else
		kernconf=${_kernel}
	fi

	cd ${NANO_SRC}
	env \
		TARGET=${NANO_ARCH%:*} \
		TARGET_ARCH=${NANO_ARCH##*:} \
		${NANO_PMAKE} \
		installkernel \
		INSTALL_NODEBUG= \
		DESTDIR=${NANO_WORLDDIR} \
		${kernconfdir:+"KERNCONFDIR="}${kernconfdir} \
		KERNCONF=${kernconf} \
		KODIR=${_kodir} \
		MODULES_OVERRIDE="${NANO_MODULES}"
		SRCCONF=${SRCCONF} \
		__MAKE_CONF=${NANO_MAKE_CONF_INSTALL} \
	) > ${_logfile} 2>&1
)

build_debug_kernel ( ) 
{
	local _kernconfdir=$(dirname ${NANO_KERNEL})
	local _kernconf=$(basename ${NANO_KERNEL})

	(
	cd ${_kernconfdir}
	cat $_kernconf $NANO_CFG_BASE/DEBUG > ${NANO_OBJ}/${_kernconf}-DEBUG
	)

	build_kernel2 ${NANO_OBJ}/${_kernconf}-DEBUG /boot/kernel-debug
}

install_debug_kernel ( )
{
	local _kernconf=$(basename ${NANO_KERNEL})

	install_kernel2  ${NANO_OBJ}/${_kernconf}-DEBUG  /boot/kernel-debug
}

[ -z "$USE_POUDRIERE" ] && build_nas_source2 ( )
{
	mkdir -p ${NANO_WORLDDIR}/usr/src
	mkdir -p ${NANO_WORLDDIR}/usr/nas_source2

	mount -t nullfs -o noatime ${NANO_SRC} ${NANO_WORLDDIR}/usr/src
	mount -t nullfs -o noatime ${AVATAR_ROOT}/src ${NANO_WORLDDIR}/usr/nas_source2

        (
	    # Build PBI wrapper
            local _target
            for _target in obj all install; do
	        CR "unset MAKEOBJDIRPREFIX; \
	            env \
	            TARGET=${NANO_ARCH} \
	            TARGET_ARCH=${NANO_ARCH} \
	            ${NANO_PMAKE} \
	            -C /usr/nas_source2/pcbsd/pbi-wrapper \
	            ${_target}"
            done

	    # Build extract-tarball
            for _target in obj all install; do
	        CR "unset MAKEOBJDIRPREFIX;
	            env \
	            TARGET=${NANO_ARCH} \
	            TARGET_ARCH=${NANO_ARCH} \
	            ${NANO_PMAKE} \
	            BINDIR=/usr/local/bin \
	             -C /usr/nas_source2/extract-tarball \
	            ${_target}"
            done

	    # Build winacl
            for _target in obj all install; do
	        CR "unset MAKEOBJDIRPREFIX;
	            env \
	            TARGET=${NANO_ARCH} \
	            TARGET_ARCH=${NANO_ARCH} \
	            ${NANO_PMAKE} \
	            BINDIR=/usr/local/bin \
	             -C /usr/nas_source2/winacl \
	            ${_target}"
            done
        )
	umount -f ${NANO_WORLDDIR}/usr/nas_source2
	umount -f ${NANO_WORLDDIR}/usr/src
}

install_ports()
{
	local install_info_hack=0
	if [ ! -e ${NANO_WORLDDIR}/usr/bin/install-info ]; then
		touch ${NANO_WORLDDIR}/usr/bin/install-info
		chmod +x ${NANO_WORLDDIR}/usr/bin/install-info
		install_info_hack=1
	fi

	${AVATAR_ROOT}/build/ports/install-ports.sh

	if [ $install_info_hack -eq 1 ]; then
		rm -f ${NANO_WORLDDIR}/usr/bin/install-info
	fi
}
