#!/bin/sh
#
# $FreeBSD$
#

# PROVIDE: ix-proftpd
# REQUIRE: FILESYSTEMS
# BEFORE: proftpd

. /etc/rc.subr

# Defaults
proftpd_enable=${proftpd_enable:-"NO"}
proftpd_flags=${proftpd_flags:-""}
proftpd_config=${proftpd_config:-"/etc/${name}.conf"}
proftpd_delaytable=${proftpd_delaytable:-"/var/run/${name}/${name}.delay"}
proftpd_displaylogin=${proftpd_displaylogin:-"/var/run/${name}/${name}.motd"}
proftpd_tlsrsacertfile=${proftpd_tlsrsacertfile:-"/etc/ssl/private/${name}.cert"}
proftpd_tlsrsakeyfile=${proftpd_tlsrsakeyfile:-"/etc/ssl/private/${name}.key"}
proftpd_tcpaccessfilesallow=${proftpd_tcpaccessfilesallow:-"/etc/hosts.allow"}
proftpd_tcpaccessfilesdeny=${proftpd_tcpaccessfilesdeny:-"/etc/hosts.allow"}
proftpd_umaskfile=${proftpd_umaskfile:-"077"}
proftpd_umaskdirectory=${proftpd_umaskdirectory:-"022"}
proftpd_maxinstances=${proftpd_maxinstances:-"none"}
proftpd_defaulttransfermode=${proftpd_defaulttransfermode:-"ascii"}
proftpd_deferwelcome=${proftpd_deferwelcome:-"off"}
proftpd_anonymousrootdir=${proftpd_anonymousrootdir:-"/mnt"}
proftpd_multilinerfc2228=${proftpd_multilinerfc2228:-"off"}
proftpd_timeoutlogin=${proftpd_timeoutlogin:-"300"}
proftpd_timeoutnotransfer=${proftpd_timeoutnotransfer:-"300"}
proftpd_timeoutstalled=${proftpd_timeoutstalled:-"3600"}
proftpd_defaultrootdir=${proftpd_defaultrootdir:-"~"}
proftpd_defaultrootgroupexpr=${proftpd_defaultrootgroupexpr:-"!wheel"}
proftpd_requirevalidshell=${proftpd_requirevalidshell:-"off"}
proftpd_deleteabortedstores=${proftpd_deleteabortedstores:-"off"}
proftpd_tlsverifyclient=${proftpd_tlsverifyclient:-"off"}
proftpd_tlsoptions=${proftpd_tlsoptions:-"NoCertRequest"}
proftpd_tlsprotocol=${proftpd_tlsprotocol:-"SSLv23"}
proftpd_tlsrequired=${proftpd_tlsrequired:-"on"}
proftpd_tcpaccesssysloglevels=${proftpd_tcpaccesssysloglevels:-"info warn"}
proftpd_tcpservicename=${proftpd_tcpservicename:-"ftpd"}
proftpd_timesgmt=${proftpd_timesgmt:-"off"}
proftpd_moddelay_enable=${proftpd_moddelay_enable:-"YES"}
proftpd_modwrap_enable=${proftpd_modwrap_enable:-"YES"}
proftpd_modctrls_controlsengine=${proftpd_modctrls_controlsengine:-"off"}
proftpd_modctrls_controlsacls=${proftpd_modctrls_controlsacls:-"all allow group wheel"}
proftpd_modctrls_controlsauthfreshness=${proftpd_modctrls_controlsauthfreshness:-"10"}
proftpd_modctrls_controlsmaxclients=${proftpd_modctrls_controlsmaxclients:-"5"}
proftpd_modctrls_controlslog=${proftpd_modctrls_controlslog:-"/var/log/${name}/controls.log"}
proftpd_modctrls_controlsinterval=${proftpd_modctrls_controlsinterval:-"10"}
proftpd_modban_bancontrolsacls=${proftpd_modban_bancontrolsacls:-"all allow group wheel"}
proftpd_modban_banlog=${proftpd_modban_banlog:-"/var/log/${name}/ban.log"}
proftpd_modban_banmessage=${proftpd_modban_banmessage:-"Host %a has been banned"}
proftpd_modban_bantable=${proftpd_modban_bantable:-"/var/run/${name}/ban.tab"}

# If $1 == 1, return $2, otherwise return nothing
bool_on()
{
    if [ $1 -gt 0 ]; then
	echo -n $2
    else
	echo -n "# $2"
    fi
}

# Return "on" for '1' and "off" for '0'
on_off()
{
    case $1 in
	0) echo "off";;
	1) echo "on";;
    esac
}

generate_proftp()
{
    local IFS=\|
#XXX missing: ftp_port chrooteveryone tlsrequired mod_ban
    local ftp_port=0 chrooteveryone=0 tlsrequired=0 mod_ban=0
#XXX unused: defaultroot ssltls
    local f="toggleFTP clients ipconnections loginattempt timeout ftp_rootlogin onlyanonymous onlylocal banner ftp_filemask ftp_dirmask fxp resume defaultroot ident reversedns masqaddress passiveportsmin passiveportsmax localuserbw localuserdlbw anonuserbw anonuserdlbw ssltls ftp_options"
    local toggleFTP clients ipconnections loginattempt timeout ftp_rootlogin onlyanonymous onlylocal banner ftp_filemask ftp_dirmask fxp resume defaultroot ident reversedns masqaddress passiveportsmin passiveportsmax localuserbw localuserdlbw anonuserbw anonuserdlbw ssltls ftp_options
    local sf
    sf=$(echo $f | sed -e 's/ /, /g')
    ${FREENAS_SQLITE_CMD} ${FREENAS_CONFIG} \
        "SELECT $sf FROM freenas_servicesftp ORDER BY -id LIMIT 1" | \
    while read toggleFTP clients ipconnections loginattempt timeout ftp_rootlogin onlyanonymous onlylocal banner ftp_filemask ftp_dirmask fxp resume defaultroot ident reversedns masqaddress passiveportsmin passiveportsmax localuserbw localuserdlbw anonuserbw anonuserdlbw ssltls ftp_options; do

	# Check if required directories exists.
	[ ! -d "/var/run/${name}" ] && mkdir "/var/run/${name}"
	[ ! -d "/var/log/${name}" ] && mkdir "/var/log/${name}"

	# Check if required files exists.
	[ ! -e "${proftpd_delaytable}" ] && cat /dev/null > "${proftpd_delaytable}"
	[ ! -e "${proftpd_tcpaccessfilesallow}" ] && cat /dev/null > "${proftpd_tcpaccessfilesallow}"
	[ ! -e "${proftpd_tcpaccessfilesdeny}" ] && cat /dev/null > "${proftpd_tcpaccessfilesdeny}"
	[ ! -e "/var/log/wtmp" ] && touch /var/log/wtmp && chmod 644 /var/log/wtmp

	# Create welcome message file
	if [ -z "${banner}" ]; then
		_productname="FreeNAS"
		echo "Welcome to ${_productname} FTP Server" > ${proftpd_displaylogin}
	else
		echo ${banner} > ${proftpd_displaylogin}
	fi
	
	#XXX missing: tls needs to be supported
# Create SSL/TLS certificate
#	if configxml_isset //ftpd/tls; then
#		_certificate=`configxml_get "//ftpd/certificate"`
#		_privatekey=`configxml_get "//ftpd/privatekey"`
#		# Create certificate and key files
#		if [ -n "${_certificate}" -a -n "${_privatekey}" ]; then
#			_tmpfile=/tmp/${name}$$.tmp
#			echo "${_certificate}" > ${_tmpfile}
#			/usr/bin/uudecode -m -p -r ${_tmpfile} > ${proftpd_tlsrsacertfile}
#			/bin/chmod 0600 ${proftpd_tlsrsacertfile}
#			echo "${_privatekey}" > ${_tmpfile}
#			/usr/bin/uudecode -m -p -r ${_tmpfile} > ${proftpd_tlsrsakeyfile}
#			/bin/chmod 0600 ${proftpd_tlsrsakeyfile}
#			/bin/rm -f ${_tmpfile}
#		fi
#	fi
	cat <<EOF >> ${proftpd_config}
ServerName "$(hostname) FTP Server"
ServerType standalone
DefaultServer on
Default Address $(hostname)
UseIPv6 on
Port ${ftp_port}
User nobody
Group nogroup	
Umask ${ftp_filemask} ${ftp_dirmask}
SyslogFacility ftp
MultilineRFC2228 ${proftpd_multilinerfc2228}
DisplayLogin ${proftpd_displaylogin}
DeferWelcome ${proftpd_deferwelcome}
TimeoutIdle ${timeout}
TimeoutLogin ${proftpd_timeoutlogin}
TimeoutNoTransfer ${proftpd_timeoutnotransfer}
TimeoutStalled ${proftpd_timeoutstalled}
MaxInstances ${proftpd_maxinstances}
MaxClients ${clients}
MaxConnectionsPerHost ${ipconnections}
MaxLoginAttempts ${loginattempt}
DefaultTransferMode ${proftpd_defaulttransfermode}
AllowForeignAddress $(on_off ${fxp})
$(ifset ${masqaddress} "MasqueradeAddress ${masqaddress}")
PassivePorts ${passiveportsmin} ${passiveportsmax}
IdentLookups $(on_off ${ident})
UseReverseDNS $(on_off ${reversedns})

EOF

	if [ ${onlylocal} -eq 0 ]; then
	    cat <<EOF >> ${proftpd_config}
<Anonymous ${proftpd_anonymousrootdir}>
  User ftp
  Group ftp
  UserAlias anonymous ftp
  TransferRate STOR ${anonuserbw}
  TransferRate RETR ${anonuserdlbw}
EOF
	    if [ ${onlyanonymous} -eq 1 ]
		cat <<EOF >> ${proftpd_config}
  <Limit LOGIN>
    AllowAll
  </Limit>

EOF
	    fi
	    cat <<EOF >> ${proftpd_config}
</Anonymous>

EOF
	else
	    cat <<EOF >> ${proftpd_config}
<Limit LOGIN>
  AllowGroup ftp
$(bool_on ${permitrootlogin} "  AllowGroup wheel")
  DenyAll
</Limit>

EOF
	fi
	cat <<EOF >> ${proftpd_config}
<Global>
  RequireValidShell ${proftpd_requirevalidshell}
$(bool_on ${chrooteveryone} "  DefaultRoot ${proftpd_defaultrootdir} ${proftpd_defaultrootgroupexpr}")
$(bool_on ${ftp_rootlogin} "  RootLogin on")
  AllowOverwrite on
$(bool_on ${resume} "  AllowRetrieveRestart on")
$(bool_on ${resume} "  AllowStoreRestart on")
  DeleteAbortedStores ${proftpd_deleteabortedstores}
  TransferRate STOR ${localuserbw}
  TransferRate RETR ${localuserdlbw}
  TimesGMT ${proftpd_timesgmt}>
</Global>
EOF
	if [ ${anonymousonly} -gt 0 ]; then
	    cat <<EOF >> ${proftpd_config}
<Limit LOGIN>
$(bool_on ${ftp_rootlogin} "  AllowGroup wheel")
  DenyAll
</Limit>
EOF
	fi
	if [ ${tls} -gt 0 ]; then
	    cat <<EOF >> ${proftpd_config}
<IfModule mod_tls.c>
  TLSEngine on
  TLSProtocol ${proftpd_tlsprotocol}
  TLSOptions ${proftpd_tlsoptions}
  TLSRSACertificateFile ${proftpd_tlsrsacertfile}
  TLSRSACertificateKeyFile ${proftpd_tlsrsakeyfile}
  TLSVerifyClient ${proftpd_tlsverifyclient}
$(bool_on ${tlsrequired} "  TLSRequired ${proftpd_tlsrequired}")
</IfModule>
EOF
	fi
	cat <<EOF >> ${proftpd_config}
<IfModule mod_ban.c>
  BanEngine $(on_off ${mod_ban})
  BanControlsACLs ${proftpd_modban_bancontrolsacls}
  BanLog ${proftpd_modban_banlog}
  BanMessage ${proftpd_modban_banmessage}
# -m "mod_ban/rule"
# -v "concat('  BanOnEvent ',event,' ',occurrence,'/',timeinterval,' ',expire)" -n
# -b
  BanTable ${proftpd_modban_bantable}
</IfModule>

EOF
	if [ -n "${ftp_options}" ]; then
	    echo "${ftp_options}" >> ${proftpd_config}
	fi

	if checkyesno proftpd_moddelay_enable; then
	    cat <<EOF >> ${proftpd_config}
<IfModule mod_delay.c>
  DelayEngine on
  DelayTable "${proftpd_delaytable}"
</IfModule>

EOF
	fi
	# Add mod_wrap
	if checkyesno proftpd_modwrap_enable; then
	    cat <<EOF >> ${proftpd_config}
<IfModule mod_wrap.c>
  TCPAccessFiles ${proftpd_tcpaccessfilesallow} ${proftpd_tcpaccessfilesdeny}
  TCPAccessSyslogLevels ${proftpd_tcpaccesssysloglevels}
  TCPServiceName ${proftpd_tcpservicename}
</ifModule>

EOF
	fi
	# Add mod_ctrls.
	if [ "${proftpd_modctrls_controlsengine}" = "on" ]; then
	    cat <<EOF >> ${proftpd_config}
<IfModule mod_ctrls.c>
  ControlsEngine ${proftpd_modctrls_controlsengine}
  ControlsACLs ${proftpd_modctrls_controlsacls}
  ControlsAuthFreshness
  ControlsMaxClients ${proftpd_modctrls_controlsmaxclients}
  ControlsLog ${proftpd_modctrls_controlslog}
  ControlsInterval ${proftpd_modctrls_controlsinterval}
</IfModule>

EOF
	fi
    done
}

name="ix-proftpd"
start_cmd='generate_proftp'
stop_cmd=':'

load_rc_config $name
run_rc_command "$1"
