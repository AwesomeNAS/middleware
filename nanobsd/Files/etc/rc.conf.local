#!/bin/sh
# THIS FILE IS RESERVED FOR THE EXCLUSIVE USE OF FREENAS CONFIG SYSTEM.
# Please edit /etc/rc.conf instead.

#-
# Copyright (c) 2010 iXsystems, Inc., All rights reserved.
#   Written by:	Xin LI
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED.  IN NO EVENT SHALL Jordan Hubbard OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
# OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
# OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
#

FREENAS_CONFIG=/data/freenas-v1.db
FREENAS_SQLITE_CMD=/usr/local/bin/sqlite3
FREENAS_RC=/var/tmp/rc.conf.freenas

_interface_config()
{
	local IFS=\|
	local _ifid interface ipv4addr subnetmask gateway

	# Note: ipv4/ipv6 are supposed in ip/masklen format.

	# Traverse the network interface table and generate rc.conf style
	# configuration.
	${FREENAS_SQLITE_CMD} ${FREENAS_CONFIG} "SELECT network_interface, ipv4address, ipv6address, interface_options FROM freenas_networkinterfacemgmt ORDER BY id" | \
	while read interface ipv4 ipv6 options; do
		echo -n ifconfig_${interface}=\"
		if [ -n "${ipv4}" ]; then
			echo -n "inet ${ipv4} "
		fi
		if [ -n "${options}" ]; then
			echo -n "${options}"
		fi
		echo \"
		if [ -n "${ipv6}" ]; then
			echo ipv6_ifconfig_${interface}=\"${ipv6}\"
		fi
		if [ -n "${gateway}" ]; then
			echo defaultrouter=\"${gateway}\"
		fi
	done
}

_host_config()
{
	local IFS=\|
	local hostname domainname
	${FREENAS_SQLITE_CMD} ${FREENAS_CONFIG} "SELECT hostname, domain FROM freenas_systemgeneralsetup ORDER BY id DESC LIMIT 1" | \
	while read hostname domainname; do
		echo hostname=\"${hostname}.${domainname}\"
	done
}

# _bool_config /variable/ /table/ /field/
_bool_config()
{
	local IFS=\|
	local boolvalue value key
	if [ -n "$4" ]; then
		key="$4"
	else
		key="id"
	fi
	${FREENAS_SQLITE_CMD} ${FREENAS_CONFIG} "SELECT $3 FROM $2 ORDER BY ${key} DESC LIMIT 1" | \
	while read boolvalue; do
		if [ "${boolvalue}" = "1" ]; then
			value="YES"
		else
			value="NO"
		fi
		echo $1=\"${value}\"
	done
}

# Grab static route configuration
_staticroute_config()
{
	local IFS=\|
	local id destination gateway interface

	${FREENAS_SQLITE_CMD} ${FREENAS_CONFIG} "SELECT freenas_networkstaticroute.id, sr_destination, sr_gateway FROM freenas_networkstaticroute INNER JOIN freenas_networkinterfacemgmt ON freenas_networkstaticroute.sr_interface_id = freenas_networkinterfacemgmt.id;" | \
	while read id destination gateway; do
		echo route_freenas${id}=\"-net ${destination} ${gateway}\"
		freenas_routes="${freenas_routes} freenas${id}"
	done
	echo static_routes=\"`${FREENAS_SQLITE_CMD} ${FREENAS_CONFIG} "SELECT id FROM freenas_networkstaticroute" | sed -e s/^/freenas/g | xargs echo `\"
}

_gen_conf()
{
	## First, import network interface configuration.
	_interface_config
	_host_config
	_staticroute_config

	## Daemons
	_bool_config cron_enable freenas_cronjob togglecron
	## TODO: Need to make this a || logic.
	_bool_config smartd_enable freenas_disk togglesmart
	_bool_config netatalk_enable freenas_servicesafp toggleAFP
	_bool_config atalkd_enable freenas_servicesafp toggleAFP
	_bool_config afpd_enable freenas_servicesafp toggleAFP
	_bool_config cnid_metad_enable freenas_servicesafp toggleAFP
	_bool_config proftpd_enable freenas_servicesftp toggleFTP
	_bool_config nfs_server_enable freenas_servicesnfs toggleNFS
	_bool_config smbd_enable freenas_servicescifs togglecifs
	_bool_config rsyncd_enable freenas_servicesrsync togglersync
	_bool_config sshd_enable freenas_servicesssh toggleSSH

	${FREENAS_SQLITE_CMD} ${FREENAS_CONFIG} "SELECT varname, varvalue FROM freenas_rcconf ORDER BY id ASC" | tr \| =
}

# If we're running really early, then mount /data read-only
if [ ! -f ${FREENAS_CONFIG} ]; then
	mount -o ro /data
	_doumount=1
fi

# Regenerate stale caches of rc.conf data.  We run multiple time
# as part of the boot process, and this helps.  It also provides
# a useful file to look at for debugging.
if [ ! -f ${FREENAS_RC} -o ${FREENAS_CONFIG} -nt ${FREENAS_RC} ]; then
	_gen_conf > ${FREENAS_RC}
fi

if [ -n "${_doumount}" ]; then
	umount /data
fi

. ${FREENAS_RC}
