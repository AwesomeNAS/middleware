#!/usr/bin/env python

from subprocess import call

import argparse
import importlib
import os
import re
import subprocess
import sys

def write_sb_var(f, var, val):
    if val is None:
        f.write("#%s= unset\n" % var)
        return
    f.write("%s='%s'\n" % (var, val))

def is_internal_repo(url):
    company = "ixsystems.com"

    if url.find(company) == -1:
        return False
    else:
        return True

    
def my_check_call(*args, **kwargs):
    print "args: %s | %s" % (args, dict(**kwargs))
    subprocess.check_call(*args, **kwargs)

def add_second_options(parser):
    parser.add_argument('--project',
        help='specify product (FreeNAS/TrueNAS)',
        default='FreeNAS')

    parser.add_argument('--sandbox-name', '-n', help='checkout name',
                        required=True)

    parser.add_argument('--repo-url',
    help='specify the main repo url (eg: https://github.com/freenas/freenas OR\n'
         'git@gitserver.ixsystems.com:/git/repos/freenas-build/freenas.git',
         required=True)

    parser.add_argument('--repo-cache',
        help='specify a local cache to speed up initial checkout')

    parser.add_argument('--branch', '-b',
        help='specify the checkout branch')

    parser.add_argument('--tag', '-t',
        help='specify the checkout tag')


def main():
    parser = argparse.ArgumentParser(description='Checkout a sandbox.')
    add_second_options(parser)
    
    args = parser.parse_args()
    
    url = args.repo_cache
    if url is None:
        url = args.repo_url
    
    # Workflow is:
    # Clone from cache if it exists.  If no cache, then just use the actual repo.
    # Update the remote 'origin' to point to the actual repo.
    # Git pull any refs to get up to date in case the cache is out of date in respect to
    #   the actual repo.
    # Checkout the branch.
    #
    # If we use a cache we do not do a -b branch to checkout initially because the specified
    # branch may not be in the cache.  For now we actually never '-b branch' to save time 
    # writing this script!  XXX: someone fix that?
    
    # do the initial clone
    sandbox_name = args.sandbox_name
    if sandbox_name is None:
        sandbox_name = args.project.lower()

    if os.path.exists(sandbox_name):
        print("Cannot create sandbox %s because it already exists."
              % (sandbox_name))
        print("Try removing %s and running %s again.\n" 
              % (sandbox_name, sys.argv[0]))
        sys.exit(1)

    sb_build_dir = os.path.basename(url)
    sb_build_dir = re.sub('\.git$', '', sb_build_dir)
    os.mkdir(sandbox_name)
    os.chdir(sandbox_name)
    f = open(".sandbox-env", "w")
    
    #write_sb_var(f, "GIT_FREEBSD_BRANCH", args.freebsd_branch)
    #write_sb_var(f, "GIT_FREEBSD_REPO", args.freebsd_repo)
    #write_sb_var(f, "GIT_FREEBSD_CACHE", args.freebsd_repo_cache)
    #write_sb_var(f, "GIT_PORTS_BRANCH", args.ports_branch)
    #write_sb_var(f, "GIT_PORTS_REPO", args.ports_repo)
    #write_sb_var(f, "GIT_PORTS_CACHE", args.ports_repo_cache)
    write_sb_var(f, "SB_BUILD_DIR", sb_build_dir)
    
    f.close()
    
    
    my_check_call("git clone %s" % (url), shell=True)

    # XX: This .git-repo-setting should later move out of the
    #     freenas source checkout directory
    #     and into the sandbox root.
    f = open(sb_build_dir + "/.git-repo-setting", "w")
    if is_internal_repo(url):
        f.write("INTERNAL")
    else:
        f.write("EXTERNAL")

    f.close() 
    
    os.chdir(sb_build_dir)
    
    # get any missing tags or branches from the repo
    my_check_call("git fetch --all", shell=True)
    # get the branch
    if args.branch:
        my_check_call("git checkout %s" % args.branch, shell=True)

    checkout_cmd="make checkout "

    if args.project:
        checkout_cmd += ('NANO_LABEL="%s" ' % (args.project))
  
    if args.branch:
        checkout_cmd += ('BRANCH="%s" ' % (args.branch))

    if args.branch:
        checkout_cmd += ('TAG="%s" ' % (args.tag))

    my_check_call(checkout_cmd, shell=True)
 
    # go back to sandbox level
    os.chdir("..")
    print ""
    print "========================================"
    print "->>> Now run: workon %s" % sandbox_name
    print "========================================"


if __name__ == "__main__":
    main()
