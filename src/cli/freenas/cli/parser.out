Created by PLY version 3.8 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> stmt_list
Rule 1     stmt_list -> stmt_redirect
Rule 2     stmt_list -> stmt_redirect NEWLINE
Rule 3     stmt_list -> stmt_redirect NEWLINE stmt_list
Rule 4     stmt_list -> NEWLINE stmt_list
Rule 5     stmt_redirect -> stmt
Rule 6     stmt_redirect -> stmt REDIRECT ATOM
Rule 7     stmt_redirect -> stmt REDIRECT STRING
Rule 8     stmt -> if_stmt
Rule 9     stmt -> for_stmt
Rule 10    stmt -> while_stmt
Rule 11    stmt -> assignment_stmt
Rule 12    stmt -> function_definition_stmt
Rule 13    stmt -> return_stmt
Rule 14    stmt -> break_stmt
Rule 15    stmt -> undef_stmt
Rule 16    stmt -> command
Rule 17    stmt -> call
Rule 18    stmt -> shell
Rule 19    block -> LBRACE stmt_list RBRACE
Rule 20    block -> LBRACE NEWLINE stmt_list RBRACE
Rule 21    block -> LBRACE NEWLINE RBRACE
Rule 22    block -> LBRACE RBRACE
Rule 23    if_stmt -> IF LPAREN expr RPAREN block
Rule 24    if_stmt -> IF LPAREN expr RPAREN block ELSE block
Rule 25    for_stmt -> FOR LPAREN ATOM IN expr RPAREN block
Rule 26    for_stmt -> FOR LPAREN ATOM COMMA ATOM IN expr RPAREN block
Rule 27    while_stmt -> WHILE LPAREN expr RPAREN block
Rule 28    assignment_stmt -> ATOM ASSIGN expr
Rule 29    assignment_stmt -> subscript_left ASSIGN expr
Rule 30    function_definition_stmt -> FUNCTION ATOM LPAREN RPAREN block
Rule 31    function_definition_stmt -> FUNCTION ATOM LPAREN function_argument_list RPAREN block
Rule 32    function_definition_stmt -> FUNCTION ATOM LPAREN RPAREN NEWLINE block
Rule 33    function_definition_stmt -> FUNCTION ATOM LPAREN function_argument_list RPAREN NEWLINE block
Rule 34    function_argument_list -> ATOM
Rule 35    function_argument_list -> ATOM COMMA function_argument_list
Rule 36    return_stmt -> RETURN
Rule 37    return_stmt -> RETURN expr
Rule 38    break_stmt -> BREAK
Rule 39    undef_stmt -> UNDEF ATOM
Rule 40    expr_list -> expr
Rule 41    expr_list -> expr COMMA expr_list
Rule 42    expr -> symbol
Rule 43    expr -> literal
Rule 44    expr -> array_literal
Rule 45    expr -> dict_literal
Rule 46    expr -> unary_expr
Rule 47    expr -> binary_expr
Rule 48    expr -> call
Rule 49    expr -> subscript_expr
Rule 50    expr -> anon_function_expr
Rule 51    expr -> expr_expansion
Rule 52    expr -> LPAREN expr RPAREN
Rule 53    expr -> COPEN expr RBRACE
Rule 54    expr_expansion -> EOPEN command RPAREN
Rule 55    array_literal -> LBRACKET RBRACKET
Rule 56    array_literal -> LBRACKET expr_list RBRACKET
Rule 57    dict_literal -> LBRACE RBRACE
Rule 58    dict_literal -> LBRACE NEWLINE RBRACE
Rule 59    dict_literal -> LBRACE dict_pair_list RBRACE
Rule 60    dict_pair_list -> dict_pair
Rule 61    dict_pair_list -> dict_pair COMMA dict_pair_list
Rule 62    dict_pair -> expr COLON expr
Rule 63    dict_pair -> NEWLINE expr COLON expr
Rule 64    dict_pair -> NEWLINE expr COLON expr NEWLINE
Rule 65    literal -> NUMBER
Rule 66    literal -> HEXNUMBER
Rule 67    literal -> BINNUMBER
Rule 68    literal -> OCTNUMBER
Rule 69    literal -> STRING
Rule 70    literal -> TRUE
Rule 71    literal -> FALSE
Rule 72    literal -> NULL
Rule 73    symbol -> ATOM
Rule 74    call -> ATOM LPAREN RPAREN
Rule 75    call -> ATOM LPAREN expr_list RPAREN
Rule 76    subscript_left -> subscript_left LBRACKET expr RBRACKET
Rule 77    subscript_left -> symbol LBRACKET expr RBRACKET
Rule 78    subscript_expr -> expr LBRACKET expr RBRACKET
Rule 79    anon_function_expr -> FUNCTION LPAREN RPAREN block
Rule 80    anon_function_expr -> FUNCTION LPAREN RPAREN NEWLINE block
Rule 81    anon_function_expr -> FUNCTION LPAREN function_argument_list RPAREN block
Rule 82    anon_function_expr -> FUNCTION LPAREN function_argument_list RPAREN NEWLINE block
Rule 83    unary_expr -> MINUS expr
Rule 84    unary_expr -> NOT expr
Rule 85    binary_expr -> expr EQ expr
Rule 86    binary_expr -> expr NE expr
Rule 87    binary_expr -> expr GT expr
Rule 88    binary_expr -> expr GE expr
Rule 89    binary_expr -> expr LT expr
Rule 90    binary_expr -> expr LE expr
Rule 91    binary_expr -> expr PLUS expr
Rule 92    binary_expr -> expr MINUS expr
Rule 93    binary_expr -> expr MUL expr
Rule 94    binary_expr -> expr DIV expr
Rule 95    binary_expr -> expr REGEX expr
Rule 96    binary_expr -> expr AND expr
Rule 97    binary_expr -> expr OR expr
Rule 98    binary_expr -> expr NOT expr
Rule 99    binary_expr -> expr MOD expr
Rule 100   command -> command_item
Rule 101   command -> command_item parameter_list
Rule 102   command -> command_item PIPE command
Rule 103   command -> command_item parameter_list PIPE command
Rule 104   command_item -> LIST
Rule 105   command_item -> NUMBER
Rule 106   command_item -> UP
Rule 107   command_item -> symbol
Rule 108   command_item -> COPEN expr RBRACE
Rule 109   command_item -> STRING
Rule 110   parameter_list -> parameter
Rule 111   parameter_list -> parameter parameter_list
Rule 112   parameter -> set_parameter
Rule 113   parameter -> binary_parameter
Rule 114   parameter -> error
Rule 115   set_parameter -> unary_parameter
Rule 116   set_parameter -> unary_parameter COMMA set_parameter
Rule 117   set_parameter -> unary_parameter COMMA error
Rule 118   unary_parameter -> symbol
Rule 119   unary_parameter -> literal
Rule 120   unary_parameter -> array_literal
Rule 121   unary_parameter -> dict_literal
Rule 122   unary_parameter -> COPEN expr RBRACE
Rule 123   unary_parameter -> LIST
Rule 124   unary_parameter -> UP
Rule 125   binary_parameter -> ATOM ASSIGN parameter
Rule 126   binary_parameter -> ATOM EQ parameter
Rule 127   binary_parameter -> ATOM NE parameter
Rule 128   binary_parameter -> ATOM GT parameter
Rule 129   binary_parameter -> ATOM GE parameter
Rule 130   binary_parameter -> ATOM LT parameter
Rule 131   binary_parameter -> ATOM LE parameter
Rule 132   binary_parameter -> ATOM REGEX parameter
Rule 133   binary_parameter -> ATOM INC parameter
Rule 134   binary_parameter -> ATOM DEC parameter
Rule 135   shell -> SHELL
Rule 136   shell -> SHELL parameter_list

Terminals, with rules where they appear

AND                  : 96
ASSIGN               : 28 29 125
ATOM                 : 6 25 26 26 28 30 31 32 33 34 35 39 73 74 75 125 126 127 128 129 130 131 132 133 134
BINNUMBER            : 67
BREAK                : 38
COLON                : 62 63 64
COMMA                : 26 35 41 61 116 117
COPEN                : 53 108 122
DEC                  : 134
DIV                  : 94
ELSE                 : 24
EOPEN                : 54
EQ                   : 85 126
FALSE                : 71
FOR                  : 25 26
FUNCTION             : 30 31 32 33 79 80 81 82
GE                   : 88 129
GT                   : 87 128
HEXNUMBER            : 66
IF                   : 23 24
IN                   : 25 26
INC                  : 133
LBRACE               : 19 20 21 22 57 58 59
LBRACKET             : 55 56 76 77 78
LE                   : 90 131
LIST                 : 104 123
LPAREN               : 23 24 25 26 27 30 31 32 33 52 74 75 79 80 81 82
LT                   : 89 130
MINUS                : 83 92
MOD                  : 99
MUL                  : 93
NE                   : 86 127
NEWLINE              : 2 3 4 20 21 32 33 58 63 64 64 80 82
NOT                  : 84 98
NULL                 : 72
NUMBER               : 65 105
OCTNUMBER            : 68
OR                   : 97
PIPE                 : 102 103
PLUS                 : 91
RBRACE               : 19 20 21 22 53 57 58 59 108 122
RBRACKET             : 55 56 76 77 78
REDIRECT             : 6 7
REGEX                : 95 132
RETURN               : 36 37
RPAREN               : 23 24 25 26 27 30 31 32 33 52 54 74 75 79 80 81 82
SHELL                : 135 136
STRING               : 7 69 109
TRUE                 : 70
UNDEF                : 39
UP                   : 106 124
WHILE                : 27
error                : 114 117

Nonterminals, with rules where they appear

anon_function_expr   : 50
array_literal        : 44 120
assignment_stmt      : 11
binary_expr          : 47
binary_parameter     : 113
block                : 23 24 24 25 26 27 30 31 32 33 79 80 81 82
break_stmt           : 14
call                 : 17 48
command              : 16 54 102 103
command_item         : 100 101 102 103
dict_literal         : 45 121
dict_pair            : 60 61
dict_pair_list       : 59 61
expr                 : 23 24 25 26 27 28 29 37 40 41 52 53 62 62 63 63 64 64 76 77 78 78 83 84 85 85 86 86 87 87 88 88 89 89 90 90 91 91 92 92 93 93 94 94 95 95 96 96 97 97 98 98 99 99 108 122
expr_expansion       : 51
expr_list            : 41 56 75
for_stmt             : 9
function_argument_list : 31 33 35 81 82
function_definition_stmt : 12
if_stmt              : 8
literal              : 43 119
parameter            : 110 111 125 126 127 128 129 130 131 132 133 134
parameter_list       : 101 103 111 136
return_stmt          : 13
set_parameter        : 112 116
shell                : 18
stmt                 : 5 6 7
stmt_list            : 3 4 19 20 0
stmt_redirect        : 1 2 3
subscript_expr       : 49
subscript_left       : 29 76
symbol               : 42 77 107 118
unary_expr           : 46
unary_parameter      : 115 116 117
undef_stmt           : 15
while_stmt           : 10

Parsing method: LALR

state 0

    (0) S' -> . stmt_list
    (1) stmt_list -> . stmt_redirect
    (2) stmt_list -> . stmt_redirect NEWLINE
    (3) stmt_list -> . stmt_redirect NEWLINE stmt_list
    (4) stmt_list -> . NEWLINE stmt_list
    (5) stmt_redirect -> . stmt
    (6) stmt_redirect -> . stmt REDIRECT ATOM
    (7) stmt_redirect -> . stmt REDIRECT STRING
    (8) stmt -> . if_stmt
    (9) stmt -> . for_stmt
    (10) stmt -> . while_stmt
    (11) stmt -> . assignment_stmt
    (12) stmt -> . function_definition_stmt
    (13) stmt -> . return_stmt
    (14) stmt -> . break_stmt
    (15) stmt -> . undef_stmt
    (16) stmt -> . command
    (17) stmt -> . call
    (18) stmt -> . shell
    (23) if_stmt -> . IF LPAREN expr RPAREN block
    (24) if_stmt -> . IF LPAREN expr RPAREN block ELSE block
    (25) for_stmt -> . FOR LPAREN ATOM IN expr RPAREN block
    (26) for_stmt -> . FOR LPAREN ATOM COMMA ATOM IN expr RPAREN block
    (27) while_stmt -> . WHILE LPAREN expr RPAREN block
    (28) assignment_stmt -> . ATOM ASSIGN expr
    (29) assignment_stmt -> . subscript_left ASSIGN expr
    (30) function_definition_stmt -> . FUNCTION ATOM LPAREN RPAREN block
    (31) function_definition_stmt -> . FUNCTION ATOM LPAREN function_argument_list RPAREN block
    (32) function_definition_stmt -> . FUNCTION ATOM LPAREN RPAREN NEWLINE block
    (33) function_definition_stmt -> . FUNCTION ATOM LPAREN function_argument_list RPAREN NEWLINE block
    (36) return_stmt -> . RETURN
    (37) return_stmt -> . RETURN expr
    (38) break_stmt -> . BREAK
    (39) undef_stmt -> . UNDEF ATOM
    (100) command -> . command_item
    (101) command -> . command_item parameter_list
    (102) command -> . command_item PIPE command
    (103) command -> . command_item parameter_list PIPE command
    (74) call -> . ATOM LPAREN RPAREN
    (75) call -> . ATOM LPAREN expr_list RPAREN
    (135) shell -> . SHELL
    (136) shell -> . SHELL parameter_list
    (76) subscript_left -> . subscript_left LBRACKET expr RBRACKET
    (77) subscript_left -> . symbol LBRACKET expr RBRACKET
    (104) command_item -> . LIST
    (105) command_item -> . NUMBER
    (106) command_item -> . UP
    (107) command_item -> . symbol
    (108) command_item -> . COPEN expr RBRACE
    (109) command_item -> . STRING
    (73) symbol -> . ATOM

    NEWLINE         shift and go to state 22
    IF              shift and go to state 13
    FOR             shift and go to state 28
    WHILE           shift and go to state 30
    ATOM            shift and go to state 11
    FUNCTION        shift and go to state 27
    RETURN          shift and go to state 3
    BREAK           shift and go to state 32
    UNDEF           shift and go to state 16
    SHELL           shift and go to state 15
    LIST            shift and go to state 8
    NUMBER          shift and go to state 26
    UP              shift and go to state 7
    COPEN           shift and go to state 31
    STRING          shift and go to state 19

    command_item                   shift and go to state 18
    shell                          shift and go to state 1
    for_stmt                       shift and go to state 2
    break_stmt                     shift and go to state 4
    if_stmt                        shift and go to state 20
    command                        shift and go to state 21
    stmt_redirect                  shift and go to state 6
    undef_stmt                     shift and go to state 5
    stmt                           shift and go to state 23
    symbol                         shift and go to state 24
    call                           shift and go to state 9
    subscript_left                 shift and go to state 10
    stmt_list                      shift and go to state 25
    while_stmt                     shift and go to state 12
    assignment_stmt                shift and go to state 29
    return_stmt                    shift and go to state 14
    function_definition_stmt       shift and go to state 17

state 1

    (18) stmt -> shell .

    REDIRECT        reduce using rule 18 (stmt -> shell .)
    NEWLINE         reduce using rule 18 (stmt -> shell .)
    RBRACE          reduce using rule 18 (stmt -> shell .)
    $end            reduce using rule 18 (stmt -> shell .)


state 2

    (9) stmt -> for_stmt .

    REDIRECT        reduce using rule 9 (stmt -> for_stmt .)
    NEWLINE         reduce using rule 9 (stmt -> for_stmt .)
    RBRACE          reduce using rule 9 (stmt -> for_stmt .)
    $end            reduce using rule 9 (stmt -> for_stmt .)


state 3

    (36) return_stmt -> RETURN .
    (37) return_stmt -> RETURN . expr
    (42) expr -> . symbol
    (43) expr -> . literal
    (44) expr -> . array_literal
    (45) expr -> . dict_literal
    (46) expr -> . unary_expr
    (47) expr -> . binary_expr
    (48) expr -> . call
    (49) expr -> . subscript_expr
    (50) expr -> . anon_function_expr
    (51) expr -> . expr_expansion
    (52) expr -> . LPAREN expr RPAREN
    (53) expr -> . COPEN expr RBRACE
    (73) symbol -> . ATOM
    (65) literal -> . NUMBER
    (66) literal -> . HEXNUMBER
    (67) literal -> . BINNUMBER
    (68) literal -> . OCTNUMBER
    (69) literal -> . STRING
    (70) literal -> . TRUE
    (71) literal -> . FALSE
    (72) literal -> . NULL
    (55) array_literal -> . LBRACKET RBRACKET
    (56) array_literal -> . LBRACKET expr_list RBRACKET
    (57) dict_literal -> . LBRACE RBRACE
    (58) dict_literal -> . LBRACE NEWLINE RBRACE
    (59) dict_literal -> . LBRACE dict_pair_list RBRACE
    (83) unary_expr -> . MINUS expr
    (84) unary_expr -> . NOT expr
    (85) binary_expr -> . expr EQ expr
    (86) binary_expr -> . expr NE expr
    (87) binary_expr -> . expr GT expr
    (88) binary_expr -> . expr GE expr
    (89) binary_expr -> . expr LT expr
    (90) binary_expr -> . expr LE expr
    (91) binary_expr -> . expr PLUS expr
    (92) binary_expr -> . expr MINUS expr
    (93) binary_expr -> . expr MUL expr
    (94) binary_expr -> . expr DIV expr
    (95) binary_expr -> . expr REGEX expr
    (96) binary_expr -> . expr AND expr
    (97) binary_expr -> . expr OR expr
    (98) binary_expr -> . expr NOT expr
    (99) binary_expr -> . expr MOD expr
    (74) call -> . ATOM LPAREN RPAREN
    (75) call -> . ATOM LPAREN expr_list RPAREN
    (78) subscript_expr -> . expr LBRACKET expr RBRACKET
    (79) anon_function_expr -> . FUNCTION LPAREN RPAREN block
    (80) anon_function_expr -> . FUNCTION LPAREN RPAREN NEWLINE block
    (81) anon_function_expr -> . FUNCTION LPAREN function_argument_list RPAREN block
    (82) anon_function_expr -> . FUNCTION LPAREN function_argument_list RPAREN NEWLINE block
    (54) expr_expansion -> . EOPEN command RPAREN

    REDIRECT        reduce using rule 36 (return_stmt -> RETURN .)
    NEWLINE         reduce using rule 36 (return_stmt -> RETURN .)
    RBRACE          reduce using rule 36 (return_stmt -> RETURN .)
    $end            reduce using rule 36 (return_stmt -> RETURN .)
    LPAREN          shift and go to state 35
    COPEN           shift and go to state 60
    ATOM            shift and go to state 38
    NUMBER          shift and go to state 43
    HEXNUMBER       shift and go to state 57
    BINNUMBER       shift and go to state 58
    OCTNUMBER       shift and go to state 54
    STRING          shift and go to state 44
    TRUE            shift and go to state 46
    FALSE           shift and go to state 51
    NULL            shift and go to state 56
    LBRACKET        shift and go to state 52
    LBRACE          shift and go to state 47
    MINUS           shift and go to state 40
    NOT             shift and go to state 45
    FUNCTION        shift and go to state 53
    EOPEN           shift and go to state 55

    binary_expr                    shift and go to state 33
    expr_expansion                 shift and go to state 39
    literal                        shift and go to state 34
    expr                           shift and go to state 48
    array_literal                  shift and go to state 49
    subscript_expr                 shift and go to state 59
    symbol                         shift and go to state 50
    anon_function_expr             shift and go to state 41
    call                           shift and go to state 36
    dict_literal                   shift and go to state 37
    unary_expr                     shift and go to state 42

state 4

    (14) stmt -> break_stmt .

    REDIRECT        reduce using rule 14 (stmt -> break_stmt .)
    NEWLINE         reduce using rule 14 (stmt -> break_stmt .)
    RBRACE          reduce using rule 14 (stmt -> break_stmt .)
    $end            reduce using rule 14 (stmt -> break_stmt .)


state 5

    (15) stmt -> undef_stmt .

    REDIRECT        reduce using rule 15 (stmt -> undef_stmt .)
    NEWLINE         reduce using rule 15 (stmt -> undef_stmt .)
    RBRACE          reduce using rule 15 (stmt -> undef_stmt .)
    $end            reduce using rule 15 (stmt -> undef_stmt .)


state 6

    (1) stmt_list -> stmt_redirect .
    (2) stmt_list -> stmt_redirect . NEWLINE
    (3) stmt_list -> stmt_redirect . NEWLINE stmt_list

    $end            reduce using rule 1 (stmt_list -> stmt_redirect .)
    RBRACE          reduce using rule 1 (stmt_list -> stmt_redirect .)
    NEWLINE         shift and go to state 61


state 7

    (106) command_item -> UP .

    PIPE            reduce using rule 106 (command_item -> UP .)
    error           reduce using rule 106 (command_item -> UP .)
    ATOM            reduce using rule 106 (command_item -> UP .)
    COPEN           reduce using rule 106 (command_item -> UP .)
    LIST            reduce using rule 106 (command_item -> UP .)
    UP              reduce using rule 106 (command_item -> UP .)
    NUMBER          reduce using rule 106 (command_item -> UP .)
    HEXNUMBER       reduce using rule 106 (command_item -> UP .)
    BINNUMBER       reduce using rule 106 (command_item -> UP .)
    OCTNUMBER       reduce using rule 106 (command_item -> UP .)
    STRING          reduce using rule 106 (command_item -> UP .)
    TRUE            reduce using rule 106 (command_item -> UP .)
    FALSE           reduce using rule 106 (command_item -> UP .)
    NULL            reduce using rule 106 (command_item -> UP .)
    LBRACKET        reduce using rule 106 (command_item -> UP .)
    LBRACE          reduce using rule 106 (command_item -> UP .)
    REDIRECT        reduce using rule 106 (command_item -> UP .)
    NEWLINE         reduce using rule 106 (command_item -> UP .)
    $end            reduce using rule 106 (command_item -> UP .)
    RBRACE          reduce using rule 106 (command_item -> UP .)
    RPAREN          reduce using rule 106 (command_item -> UP .)


state 8

    (104) command_item -> LIST .

    PIPE            reduce using rule 104 (command_item -> LIST .)
    error           reduce using rule 104 (command_item -> LIST .)
    ATOM            reduce using rule 104 (command_item -> LIST .)
    COPEN           reduce using rule 104 (command_item -> LIST .)
    LIST            reduce using rule 104 (command_item -> LIST .)
    UP              reduce using rule 104 (command_item -> LIST .)
    NUMBER          reduce using rule 104 (command_item -> LIST .)
    HEXNUMBER       reduce using rule 104 (command_item -> LIST .)
    BINNUMBER       reduce using rule 104 (command_item -> LIST .)
    OCTNUMBER       reduce using rule 104 (command_item -> LIST .)
    STRING          reduce using rule 104 (command_item -> LIST .)
    TRUE            reduce using rule 104 (command_item -> LIST .)
    FALSE           reduce using rule 104 (command_item -> LIST .)
    NULL            reduce using rule 104 (command_item -> LIST .)
    LBRACKET        reduce using rule 104 (command_item -> LIST .)
    LBRACE          reduce using rule 104 (command_item -> LIST .)
    REDIRECT        reduce using rule 104 (command_item -> LIST .)
    NEWLINE         reduce using rule 104 (command_item -> LIST .)
    $end            reduce using rule 104 (command_item -> LIST .)
    RBRACE          reduce using rule 104 (command_item -> LIST .)
    RPAREN          reduce using rule 104 (command_item -> LIST .)


state 9

    (17) stmt -> call .

    REDIRECT        reduce using rule 17 (stmt -> call .)
    NEWLINE         reduce using rule 17 (stmt -> call .)
    RBRACE          reduce using rule 17 (stmt -> call .)
    $end            reduce using rule 17 (stmt -> call .)


state 10

    (29) assignment_stmt -> subscript_left . ASSIGN expr
    (76) subscript_left -> subscript_left . LBRACKET expr RBRACKET

    ASSIGN          shift and go to state 62
    LBRACKET        shift and go to state 63


state 11

    (28) assignment_stmt -> ATOM . ASSIGN expr
    (74) call -> ATOM . LPAREN RPAREN
    (75) call -> ATOM . LPAREN expr_list RPAREN
    (73) symbol -> ATOM .

    ASSIGN          shift and go to state 65
    LPAREN          shift and go to state 64
    LBRACKET        reduce using rule 73 (symbol -> ATOM .)
    PIPE            reduce using rule 73 (symbol -> ATOM .)
    error           reduce using rule 73 (symbol -> ATOM .)
    ATOM            reduce using rule 73 (symbol -> ATOM .)
    COPEN           reduce using rule 73 (symbol -> ATOM .)
    LIST            reduce using rule 73 (symbol -> ATOM .)
    UP              reduce using rule 73 (symbol -> ATOM .)
    NUMBER          reduce using rule 73 (symbol -> ATOM .)
    HEXNUMBER       reduce using rule 73 (symbol -> ATOM .)
    BINNUMBER       reduce using rule 73 (symbol -> ATOM .)
    OCTNUMBER       reduce using rule 73 (symbol -> ATOM .)
    STRING          reduce using rule 73 (symbol -> ATOM .)
    TRUE            reduce using rule 73 (symbol -> ATOM .)
    FALSE           reduce using rule 73 (symbol -> ATOM .)
    NULL            reduce using rule 73 (symbol -> ATOM .)
    LBRACE          reduce using rule 73 (symbol -> ATOM .)
    REDIRECT        reduce using rule 73 (symbol -> ATOM .)
    NEWLINE         reduce using rule 73 (symbol -> ATOM .)
    RBRACE          reduce using rule 73 (symbol -> ATOM .)
    $end            reduce using rule 73 (symbol -> ATOM .)


state 12

    (10) stmt -> while_stmt .

    REDIRECT        reduce using rule 10 (stmt -> while_stmt .)
    NEWLINE         reduce using rule 10 (stmt -> while_stmt .)
    RBRACE          reduce using rule 10 (stmt -> while_stmt .)
    $end            reduce using rule 10 (stmt -> while_stmt .)


state 13

    (23) if_stmt -> IF . LPAREN expr RPAREN block
    (24) if_stmt -> IF . LPAREN expr RPAREN block ELSE block

    LPAREN          shift and go to state 66


state 14

    (13) stmt -> return_stmt .

    REDIRECT        reduce using rule 13 (stmt -> return_stmt .)
    NEWLINE         reduce using rule 13 (stmt -> return_stmt .)
    RBRACE          reduce using rule 13 (stmt -> return_stmt .)
    $end            reduce using rule 13 (stmt -> return_stmt .)


state 15

    (135) shell -> SHELL .
    (136) shell -> SHELL . parameter_list
    (110) parameter_list -> . parameter
    (111) parameter_list -> . parameter parameter_list
    (112) parameter -> . set_parameter
    (113) parameter -> . binary_parameter
    (114) parameter -> . error
    (115) set_parameter -> . unary_parameter
    (116) set_parameter -> . unary_parameter COMMA set_parameter
    (117) set_parameter -> . unary_parameter COMMA error
    (125) binary_parameter -> . ATOM ASSIGN parameter
    (126) binary_parameter -> . ATOM EQ parameter
    (127) binary_parameter -> . ATOM NE parameter
    (128) binary_parameter -> . ATOM GT parameter
    (129) binary_parameter -> . ATOM GE parameter
    (130) binary_parameter -> . ATOM LT parameter
    (131) binary_parameter -> . ATOM LE parameter
    (132) binary_parameter -> . ATOM REGEX parameter
    (133) binary_parameter -> . ATOM INC parameter
    (134) binary_parameter -> . ATOM DEC parameter
    (118) unary_parameter -> . symbol
    (119) unary_parameter -> . literal
    (120) unary_parameter -> . array_literal
    (121) unary_parameter -> . dict_literal
    (122) unary_parameter -> . COPEN expr RBRACE
    (123) unary_parameter -> . LIST
    (124) unary_parameter -> . UP
    (73) symbol -> . ATOM
    (65) literal -> . NUMBER
    (66) literal -> . HEXNUMBER
    (67) literal -> . BINNUMBER
    (68) literal -> . OCTNUMBER
    (69) literal -> . STRING
    (70) literal -> . TRUE
    (71) literal -> . FALSE
    (72) literal -> . NULL
    (55) array_literal -> . LBRACKET RBRACKET
    (56) array_literal -> . LBRACKET expr_list RBRACKET
    (57) dict_literal -> . LBRACE RBRACE
    (58) dict_literal -> . LBRACE NEWLINE RBRACE
    (59) dict_literal -> . LBRACE dict_pair_list RBRACE

    REDIRECT        reduce using rule 135 (shell -> SHELL .)
    NEWLINE         reduce using rule 135 (shell -> SHELL .)
    RBRACE          reduce using rule 135 (shell -> SHELL .)
    $end            reduce using rule 135 (shell -> SHELL .)
    error           shift and go to state 77
    ATOM            shift and go to state 74
    COPEN           shift and go to state 80
    LIST            shift and go to state 76
    UP              shift and go to state 73
    NUMBER          shift and go to state 43
    HEXNUMBER       shift and go to state 57
    BINNUMBER       shift and go to state 58
    OCTNUMBER       shift and go to state 54
    STRING          shift and go to state 44
    TRUE            shift and go to state 46
    FALSE           shift and go to state 51
    NULL            shift and go to state 56
    LBRACKET        shift and go to state 52
    LBRACE          shift and go to state 47

    parameter_list                 shift and go to state 67
    unary_parameter                shift and go to state 79
    parameter                      shift and go to state 68
    binary_parameter               shift and go to state 69
    array_literal                  shift and go to state 70
    set_parameter                  shift and go to state 78
    symbol                         shift and go to state 71
    literal                        shift and go to state 72
    dict_literal                   shift and go to state 75

state 16

    (39) undef_stmt -> UNDEF . ATOM

    ATOM            shift and go to state 81


state 17

    (12) stmt -> function_definition_stmt .

    REDIRECT        reduce using rule 12 (stmt -> function_definition_stmt .)
    NEWLINE         reduce using rule 12 (stmt -> function_definition_stmt .)
    RBRACE          reduce using rule 12 (stmt -> function_definition_stmt .)
    $end            reduce using rule 12 (stmt -> function_definition_stmt .)


state 18

    (100) command -> command_item .
    (101) command -> command_item . parameter_list
    (102) command -> command_item . PIPE command
    (103) command -> command_item . parameter_list PIPE command
    (110) parameter_list -> . parameter
    (111) parameter_list -> . parameter parameter_list
    (112) parameter -> . set_parameter
    (113) parameter -> . binary_parameter
    (114) parameter -> . error
    (115) set_parameter -> . unary_parameter
    (116) set_parameter -> . unary_parameter COMMA set_parameter
    (117) set_parameter -> . unary_parameter COMMA error
    (125) binary_parameter -> . ATOM ASSIGN parameter
    (126) binary_parameter -> . ATOM EQ parameter
    (127) binary_parameter -> . ATOM NE parameter
    (128) binary_parameter -> . ATOM GT parameter
    (129) binary_parameter -> . ATOM GE parameter
    (130) binary_parameter -> . ATOM LT parameter
    (131) binary_parameter -> . ATOM LE parameter
    (132) binary_parameter -> . ATOM REGEX parameter
    (133) binary_parameter -> . ATOM INC parameter
    (134) binary_parameter -> . ATOM DEC parameter
    (118) unary_parameter -> . symbol
    (119) unary_parameter -> . literal
    (120) unary_parameter -> . array_literal
    (121) unary_parameter -> . dict_literal
    (122) unary_parameter -> . COPEN expr RBRACE
    (123) unary_parameter -> . LIST
    (124) unary_parameter -> . UP
    (73) symbol -> . ATOM
    (65) literal -> . NUMBER
    (66) literal -> . HEXNUMBER
    (67) literal -> . BINNUMBER
    (68) literal -> . OCTNUMBER
    (69) literal -> . STRING
    (70) literal -> . TRUE
    (71) literal -> . FALSE
    (72) literal -> . NULL
    (55) array_literal -> . LBRACKET RBRACKET
    (56) array_literal -> . LBRACKET expr_list RBRACKET
    (57) dict_literal -> . LBRACE RBRACE
    (58) dict_literal -> . LBRACE NEWLINE RBRACE
    (59) dict_literal -> . LBRACE dict_pair_list RBRACE

    REDIRECT        reduce using rule 100 (command -> command_item .)
    NEWLINE         reduce using rule 100 (command -> command_item .)
    $end            reduce using rule 100 (command -> command_item .)
    RBRACE          reduce using rule 100 (command -> command_item .)
    RPAREN          reduce using rule 100 (command -> command_item .)
    PIPE            shift and go to state 83
    error           shift and go to state 77
    ATOM            shift and go to state 74
    COPEN           shift and go to state 80
    LIST            shift and go to state 76
    UP              shift and go to state 73
    NUMBER          shift and go to state 43
    HEXNUMBER       shift and go to state 57
    BINNUMBER       shift and go to state 58
    OCTNUMBER       shift and go to state 54
    STRING          shift and go to state 44
    TRUE            shift and go to state 46
    FALSE           shift and go to state 51
    NULL            shift and go to state 56
    LBRACKET        shift and go to state 52
    LBRACE          shift and go to state 47

    parameter_list                 shift and go to state 82
    unary_parameter                shift and go to state 79
    parameter                      shift and go to state 68
    binary_parameter               shift and go to state 69
    array_literal                  shift and go to state 70
    set_parameter                  shift and go to state 78
    symbol                         shift and go to state 71
    literal                        shift and go to state 72
    dict_literal                   shift and go to state 75

state 19

    (109) command_item -> STRING .

    PIPE            reduce using rule 109 (command_item -> STRING .)
    error           reduce using rule 109 (command_item -> STRING .)
    ATOM            reduce using rule 109 (command_item -> STRING .)
    COPEN           reduce using rule 109 (command_item -> STRING .)
    LIST            reduce using rule 109 (command_item -> STRING .)
    UP              reduce using rule 109 (command_item -> STRING .)
    NUMBER          reduce using rule 109 (command_item -> STRING .)
    HEXNUMBER       reduce using rule 109 (command_item -> STRING .)
    BINNUMBER       reduce using rule 109 (command_item -> STRING .)
    OCTNUMBER       reduce using rule 109 (command_item -> STRING .)
    STRING          reduce using rule 109 (command_item -> STRING .)
    TRUE            reduce using rule 109 (command_item -> STRING .)
    FALSE           reduce using rule 109 (command_item -> STRING .)
    NULL            reduce using rule 109 (command_item -> STRING .)
    LBRACKET        reduce using rule 109 (command_item -> STRING .)
    LBRACE          reduce using rule 109 (command_item -> STRING .)
    REDIRECT        reduce using rule 109 (command_item -> STRING .)
    NEWLINE         reduce using rule 109 (command_item -> STRING .)
    $end            reduce using rule 109 (command_item -> STRING .)
    RBRACE          reduce using rule 109 (command_item -> STRING .)
    RPAREN          reduce using rule 109 (command_item -> STRING .)


state 20

    (8) stmt -> if_stmt .

    REDIRECT        reduce using rule 8 (stmt -> if_stmt .)
    NEWLINE         reduce using rule 8 (stmt -> if_stmt .)
    RBRACE          reduce using rule 8 (stmt -> if_stmt .)
    $end            reduce using rule 8 (stmt -> if_stmt .)


state 21

    (16) stmt -> command .

    REDIRECT        reduce using rule 16 (stmt -> command .)
    NEWLINE         reduce using rule 16 (stmt -> command .)
    RBRACE          reduce using rule 16 (stmt -> command .)
    $end            reduce using rule 16 (stmt -> command .)


state 22

    (4) stmt_list -> NEWLINE . stmt_list
    (1) stmt_list -> . stmt_redirect
    (2) stmt_list -> . stmt_redirect NEWLINE
    (3) stmt_list -> . stmt_redirect NEWLINE stmt_list
    (4) stmt_list -> . NEWLINE stmt_list
    (5) stmt_redirect -> . stmt
    (6) stmt_redirect -> . stmt REDIRECT ATOM
    (7) stmt_redirect -> . stmt REDIRECT STRING
    (8) stmt -> . if_stmt
    (9) stmt -> . for_stmt
    (10) stmt -> . while_stmt
    (11) stmt -> . assignment_stmt
    (12) stmt -> . function_definition_stmt
    (13) stmt -> . return_stmt
    (14) stmt -> . break_stmt
    (15) stmt -> . undef_stmt
    (16) stmt -> . command
    (17) stmt -> . call
    (18) stmt -> . shell
    (23) if_stmt -> . IF LPAREN expr RPAREN block
    (24) if_stmt -> . IF LPAREN expr RPAREN block ELSE block
    (25) for_stmt -> . FOR LPAREN ATOM IN expr RPAREN block
    (26) for_stmt -> . FOR LPAREN ATOM COMMA ATOM IN expr RPAREN block
    (27) while_stmt -> . WHILE LPAREN expr RPAREN block
    (28) assignment_stmt -> . ATOM ASSIGN expr
    (29) assignment_stmt -> . subscript_left ASSIGN expr
    (30) function_definition_stmt -> . FUNCTION ATOM LPAREN RPAREN block
    (31) function_definition_stmt -> . FUNCTION ATOM LPAREN function_argument_list RPAREN block
    (32) function_definition_stmt -> . FUNCTION ATOM LPAREN RPAREN NEWLINE block
    (33) function_definition_stmt -> . FUNCTION ATOM LPAREN function_argument_list RPAREN NEWLINE block
    (36) return_stmt -> . RETURN
    (37) return_stmt -> . RETURN expr
    (38) break_stmt -> . BREAK
    (39) undef_stmt -> . UNDEF ATOM
    (100) command -> . command_item
    (101) command -> . command_item parameter_list
    (102) command -> . command_item PIPE command
    (103) command -> . command_item parameter_list PIPE command
    (74) call -> . ATOM LPAREN RPAREN
    (75) call -> . ATOM LPAREN expr_list RPAREN
    (135) shell -> . SHELL
    (136) shell -> . SHELL parameter_list
    (76) subscript_left -> . subscript_left LBRACKET expr RBRACKET
    (77) subscript_left -> . symbol LBRACKET expr RBRACKET
    (104) command_item -> . LIST
    (105) command_item -> . NUMBER
    (106) command_item -> . UP
    (107) command_item -> . symbol
    (108) command_item -> . COPEN expr RBRACE
    (109) command_item -> . STRING
    (73) symbol -> . ATOM

    NEWLINE         shift and go to state 22
    IF              shift and go to state 13
    FOR             shift and go to state 28
    WHILE           shift and go to state 30
    ATOM            shift and go to state 11
    FUNCTION        shift and go to state 27
    RETURN          shift and go to state 3
    BREAK           shift and go to state 32
    UNDEF           shift and go to state 16
    SHELL           shift and go to state 15
    LIST            shift and go to state 8
    NUMBER          shift and go to state 26
    UP              shift and go to state 7
    COPEN           shift and go to state 31
    STRING          shift and go to state 19

    command_item                   shift and go to state 18
    shell                          shift and go to state 1
    for_stmt                       shift and go to state 2
    break_stmt                     shift and go to state 4
    if_stmt                        shift and go to state 20
    command                        shift and go to state 21
    stmt_redirect                  shift and go to state 6
    undef_stmt                     shift and go to state 5
    stmt                           shift and go to state 23
    symbol                         shift and go to state 24
    call                           shift and go to state 9
    subscript_left                 shift and go to state 10
    stmt_list                      shift and go to state 84
    while_stmt                     shift and go to state 12
    assignment_stmt                shift and go to state 29
    return_stmt                    shift and go to state 14
    function_definition_stmt       shift and go to state 17

state 23

    (5) stmt_redirect -> stmt .
    (6) stmt_redirect -> stmt . REDIRECT ATOM
    (7) stmt_redirect -> stmt . REDIRECT STRING

    NEWLINE         reduce using rule 5 (stmt_redirect -> stmt .)
    RBRACE          reduce using rule 5 (stmt_redirect -> stmt .)
    $end            reduce using rule 5 (stmt_redirect -> stmt .)
    REDIRECT        shift and go to state 85


state 24

    (77) subscript_left -> symbol . LBRACKET expr RBRACKET
    (107) command_item -> symbol .

    LBRACKET        shift and go to state 86
    PIPE            reduce using rule 107 (command_item -> symbol .)
    error           reduce using rule 107 (command_item -> symbol .)
    ATOM            reduce using rule 107 (command_item -> symbol .)
    COPEN           reduce using rule 107 (command_item -> symbol .)
    LIST            reduce using rule 107 (command_item -> symbol .)
    UP              reduce using rule 107 (command_item -> symbol .)
    NUMBER          reduce using rule 107 (command_item -> symbol .)
    HEXNUMBER       reduce using rule 107 (command_item -> symbol .)
    BINNUMBER       reduce using rule 107 (command_item -> symbol .)
    OCTNUMBER       reduce using rule 107 (command_item -> symbol .)
    STRING          reduce using rule 107 (command_item -> symbol .)
    TRUE            reduce using rule 107 (command_item -> symbol .)
    FALSE           reduce using rule 107 (command_item -> symbol .)
    NULL            reduce using rule 107 (command_item -> symbol .)
    LBRACE          reduce using rule 107 (command_item -> symbol .)
    REDIRECT        reduce using rule 107 (command_item -> symbol .)
    NEWLINE         reduce using rule 107 (command_item -> symbol .)
    $end            reduce using rule 107 (command_item -> symbol .)
    RBRACE          reduce using rule 107 (command_item -> symbol .)

  ! LBRACKET        [ reduce using rule 107 (command_item -> symbol .) ]


state 25

    (0) S' -> stmt_list .



state 26

    (105) command_item -> NUMBER .

    PIPE            reduce using rule 105 (command_item -> NUMBER .)
    error           reduce using rule 105 (command_item -> NUMBER .)
    ATOM            reduce using rule 105 (command_item -> NUMBER .)
    COPEN           reduce using rule 105 (command_item -> NUMBER .)
    LIST            reduce using rule 105 (command_item -> NUMBER .)
    UP              reduce using rule 105 (command_item -> NUMBER .)
    NUMBER          reduce using rule 105 (command_item -> NUMBER .)
    HEXNUMBER       reduce using rule 105 (command_item -> NUMBER .)
    BINNUMBER       reduce using rule 105 (command_item -> NUMBER .)
    OCTNUMBER       reduce using rule 105 (command_item -> NUMBER .)
    STRING          reduce using rule 105 (command_item -> NUMBER .)
    TRUE            reduce using rule 105 (command_item -> NUMBER .)
    FALSE           reduce using rule 105 (command_item -> NUMBER .)
    NULL            reduce using rule 105 (command_item -> NUMBER .)
    LBRACKET        reduce using rule 105 (command_item -> NUMBER .)
    LBRACE          reduce using rule 105 (command_item -> NUMBER .)
    REDIRECT        reduce using rule 105 (command_item -> NUMBER .)
    NEWLINE         reduce using rule 105 (command_item -> NUMBER .)
    $end            reduce using rule 105 (command_item -> NUMBER .)
    RBRACE          reduce using rule 105 (command_item -> NUMBER .)
    RPAREN          reduce using rule 105 (command_item -> NUMBER .)


state 27

    (30) function_definition_stmt -> FUNCTION . ATOM LPAREN RPAREN block
    (31) function_definition_stmt -> FUNCTION . ATOM LPAREN function_argument_list RPAREN block
    (32) function_definition_stmt -> FUNCTION . ATOM LPAREN RPAREN NEWLINE block
    (33) function_definition_stmt -> FUNCTION . ATOM LPAREN function_argument_list RPAREN NEWLINE block

    ATOM            shift and go to state 87


state 28

    (25) for_stmt -> FOR . LPAREN ATOM IN expr RPAREN block
    (26) for_stmt -> FOR . LPAREN ATOM COMMA ATOM IN expr RPAREN block

    LPAREN          shift and go to state 88


state 29

    (11) stmt -> assignment_stmt .

    REDIRECT        reduce using rule 11 (stmt -> assignment_stmt .)
    NEWLINE         reduce using rule 11 (stmt -> assignment_stmt .)
    RBRACE          reduce using rule 11 (stmt -> assignment_stmt .)
    $end            reduce using rule 11 (stmt -> assignment_stmt .)


state 30

    (27) while_stmt -> WHILE . LPAREN expr RPAREN block

    LPAREN          shift and go to state 89


state 31

    (108) command_item -> COPEN . expr RBRACE
    (42) expr -> . symbol
    (43) expr -> . literal
    (44) expr -> . array_literal
    (45) expr -> . dict_literal
    (46) expr -> . unary_expr
    (47) expr -> . binary_expr
    (48) expr -> . call
    (49) expr -> . subscript_expr
    (50) expr -> . anon_function_expr
    (51) expr -> . expr_expansion
    (52) expr -> . LPAREN expr RPAREN
    (53) expr -> . COPEN expr RBRACE
    (73) symbol -> . ATOM
    (65) literal -> . NUMBER
    (66) literal -> . HEXNUMBER
    (67) literal -> . BINNUMBER
    (68) literal -> . OCTNUMBER
    (69) literal -> . STRING
    (70) literal -> . TRUE
    (71) literal -> . FALSE
    (72) literal -> . NULL
    (55) array_literal -> . LBRACKET RBRACKET
    (56) array_literal -> . LBRACKET expr_list RBRACKET
    (57) dict_literal -> . LBRACE RBRACE
    (58) dict_literal -> . LBRACE NEWLINE RBRACE
    (59) dict_literal -> . LBRACE dict_pair_list RBRACE
    (83) unary_expr -> . MINUS expr
    (84) unary_expr -> . NOT expr
    (85) binary_expr -> . expr EQ expr
    (86) binary_expr -> . expr NE expr
    (87) binary_expr -> . expr GT expr
    (88) binary_expr -> . expr GE expr
    (89) binary_expr -> . expr LT expr
    (90) binary_expr -> . expr LE expr
    (91) binary_expr -> . expr PLUS expr
    (92) binary_expr -> . expr MINUS expr
    (93) binary_expr -> . expr MUL expr
    (94) binary_expr -> . expr DIV expr
    (95) binary_expr -> . expr REGEX expr
    (96) binary_expr -> . expr AND expr
    (97) binary_expr -> . expr OR expr
    (98) binary_expr -> . expr NOT expr
    (99) binary_expr -> . expr MOD expr
    (74) call -> . ATOM LPAREN RPAREN
    (75) call -> . ATOM LPAREN expr_list RPAREN
    (78) subscript_expr -> . expr LBRACKET expr RBRACKET
    (79) anon_function_expr -> . FUNCTION LPAREN RPAREN block
    (80) anon_function_expr -> . FUNCTION LPAREN RPAREN NEWLINE block
    (81) anon_function_expr -> . FUNCTION LPAREN function_argument_list RPAREN block
    (82) anon_function_expr -> . FUNCTION LPAREN function_argument_list RPAREN NEWLINE block
    (54) expr_expansion -> . EOPEN command RPAREN

    LPAREN          shift and go to state 35
    COPEN           shift and go to state 60
    ATOM            shift and go to state 38
    NUMBER          shift and go to state 43
    HEXNUMBER       shift and go to state 57
    BINNUMBER       shift and go to state 58
    OCTNUMBER       shift and go to state 54
    STRING          shift and go to state 44
    TRUE            shift and go to state 46
    FALSE           shift and go to state 51
    NULL            shift and go to state 56
    LBRACKET        shift and go to state 52
    LBRACE          shift and go to state 47
    MINUS           shift and go to state 40
    NOT             shift and go to state 45
    FUNCTION        shift and go to state 53
    EOPEN           shift and go to state 55

    binary_expr                    shift and go to state 33
    expr_expansion                 shift and go to state 39
    literal                        shift and go to state 34
    expr                           shift and go to state 90
    array_literal                  shift and go to state 49
    subscript_expr                 shift and go to state 59
    symbol                         shift and go to state 50
    anon_function_expr             shift and go to state 41
    call                           shift and go to state 36
    dict_literal                   shift and go to state 37
    unary_expr                     shift and go to state 42

state 32

    (38) break_stmt -> BREAK .

    REDIRECT        reduce using rule 38 (break_stmt -> BREAK .)
    NEWLINE         reduce using rule 38 (break_stmt -> BREAK .)
    $end            reduce using rule 38 (break_stmt -> BREAK .)
    RBRACE          reduce using rule 38 (break_stmt -> BREAK .)


state 33

    (47) expr -> binary_expr .

    EQ              reduce using rule 47 (expr -> binary_expr .)
    NE              reduce using rule 47 (expr -> binary_expr .)
    GT              reduce using rule 47 (expr -> binary_expr .)
    GE              reduce using rule 47 (expr -> binary_expr .)
    LT              reduce using rule 47 (expr -> binary_expr .)
    LE              reduce using rule 47 (expr -> binary_expr .)
    PLUS            reduce using rule 47 (expr -> binary_expr .)
    MINUS           reduce using rule 47 (expr -> binary_expr .)
    MUL             reduce using rule 47 (expr -> binary_expr .)
    DIV             reduce using rule 47 (expr -> binary_expr .)
    REGEX           reduce using rule 47 (expr -> binary_expr .)
    AND             reduce using rule 47 (expr -> binary_expr .)
    OR              reduce using rule 47 (expr -> binary_expr .)
    NOT             reduce using rule 47 (expr -> binary_expr .)
    MOD             reduce using rule 47 (expr -> binary_expr .)
    LBRACKET        reduce using rule 47 (expr -> binary_expr .)
    REDIRECT        reduce using rule 47 (expr -> binary_expr .)
    NEWLINE         reduce using rule 47 (expr -> binary_expr .)
    $end            reduce using rule 47 (expr -> binary_expr .)
    RBRACE          reduce using rule 47 (expr -> binary_expr .)
    RPAREN          reduce using rule 47 (expr -> binary_expr .)
    COLON           reduce using rule 47 (expr -> binary_expr .)
    COMMA           reduce using rule 47 (expr -> binary_expr .)
    RBRACKET        reduce using rule 47 (expr -> binary_expr .)


state 34

    (43) expr -> literal .

    EQ              reduce using rule 43 (expr -> literal .)
    NE              reduce using rule 43 (expr -> literal .)
    GT              reduce using rule 43 (expr -> literal .)
    GE              reduce using rule 43 (expr -> literal .)
    LT              reduce using rule 43 (expr -> literal .)
    LE              reduce using rule 43 (expr -> literal .)
    PLUS            reduce using rule 43 (expr -> literal .)
    MINUS           reduce using rule 43 (expr -> literal .)
    MUL             reduce using rule 43 (expr -> literal .)
    DIV             reduce using rule 43 (expr -> literal .)
    REGEX           reduce using rule 43 (expr -> literal .)
    AND             reduce using rule 43 (expr -> literal .)
    OR              reduce using rule 43 (expr -> literal .)
    NOT             reduce using rule 43 (expr -> literal .)
    MOD             reduce using rule 43 (expr -> literal .)
    LBRACKET        reduce using rule 43 (expr -> literal .)
    REDIRECT        reduce using rule 43 (expr -> literal .)
    NEWLINE         reduce using rule 43 (expr -> literal .)
    $end            reduce using rule 43 (expr -> literal .)
    RBRACE          reduce using rule 43 (expr -> literal .)
    RPAREN          reduce using rule 43 (expr -> literal .)
    COLON           reduce using rule 43 (expr -> literal .)
    COMMA           reduce using rule 43 (expr -> literal .)
    RBRACKET        reduce using rule 43 (expr -> literal .)


state 35

    (52) expr -> LPAREN . expr RPAREN
    (42) expr -> . symbol
    (43) expr -> . literal
    (44) expr -> . array_literal
    (45) expr -> . dict_literal
    (46) expr -> . unary_expr
    (47) expr -> . binary_expr
    (48) expr -> . call
    (49) expr -> . subscript_expr
    (50) expr -> . anon_function_expr
    (51) expr -> . expr_expansion
    (52) expr -> . LPAREN expr RPAREN
    (53) expr -> . COPEN expr RBRACE
    (73) symbol -> . ATOM
    (65) literal -> . NUMBER
    (66) literal -> . HEXNUMBER
    (67) literal -> . BINNUMBER
    (68) literal -> . OCTNUMBER
    (69) literal -> . STRING
    (70) literal -> . TRUE
    (71) literal -> . FALSE
    (72) literal -> . NULL
    (55) array_literal -> . LBRACKET RBRACKET
    (56) array_literal -> . LBRACKET expr_list RBRACKET
    (57) dict_literal -> . LBRACE RBRACE
    (58) dict_literal -> . LBRACE NEWLINE RBRACE
    (59) dict_literal -> . LBRACE dict_pair_list RBRACE
    (83) unary_expr -> . MINUS expr
    (84) unary_expr -> . NOT expr
    (85) binary_expr -> . expr EQ expr
    (86) binary_expr -> . expr NE expr
    (87) binary_expr -> . expr GT expr
    (88) binary_expr -> . expr GE expr
    (89) binary_expr -> . expr LT expr
    (90) binary_expr -> . expr LE expr
    (91) binary_expr -> . expr PLUS expr
    (92) binary_expr -> . expr MINUS expr
    (93) binary_expr -> . expr MUL expr
    (94) binary_expr -> . expr DIV expr
    (95) binary_expr -> . expr REGEX expr
    (96) binary_expr -> . expr AND expr
    (97) binary_expr -> . expr OR expr
    (98) binary_expr -> . expr NOT expr
    (99) binary_expr -> . expr MOD expr
    (74) call -> . ATOM LPAREN RPAREN
    (75) call -> . ATOM LPAREN expr_list RPAREN
    (78) subscript_expr -> . expr LBRACKET expr RBRACKET
    (79) anon_function_expr -> . FUNCTION LPAREN RPAREN block
    (80) anon_function_expr -> . FUNCTION LPAREN RPAREN NEWLINE block
    (81) anon_function_expr -> . FUNCTION LPAREN function_argument_list RPAREN block
    (82) anon_function_expr -> . FUNCTION LPAREN function_argument_list RPAREN NEWLINE block
    (54) expr_expansion -> . EOPEN command RPAREN

    LPAREN          shift and go to state 35
    COPEN           shift and go to state 60
    ATOM            shift and go to state 38
    NUMBER          shift and go to state 43
    HEXNUMBER       shift and go to state 57
    BINNUMBER       shift and go to state 58
    OCTNUMBER       shift and go to state 54
    STRING          shift and go to state 44
    TRUE            shift and go to state 46
    FALSE           shift and go to state 51
    NULL            shift and go to state 56
    LBRACKET        shift and go to state 52
    LBRACE          shift and go to state 47
    MINUS           shift and go to state 40
    NOT             shift and go to state 45
    FUNCTION        shift and go to state 53
    EOPEN           shift and go to state 55

    binary_expr                    shift and go to state 33
    expr_expansion                 shift and go to state 39
    literal                        shift and go to state 34
    expr                           shift and go to state 91
    array_literal                  shift and go to state 49
    subscript_expr                 shift and go to state 59
    symbol                         shift and go to state 50
    anon_function_expr             shift and go to state 41
    call                           shift and go to state 36
    dict_literal                   shift and go to state 37
    unary_expr                     shift and go to state 42

state 36

    (48) expr -> call .

    EQ              reduce using rule 48 (expr -> call .)
    NE              reduce using rule 48 (expr -> call .)
    GT              reduce using rule 48 (expr -> call .)
    GE              reduce using rule 48 (expr -> call .)
    LT              reduce using rule 48 (expr -> call .)
    LE              reduce using rule 48 (expr -> call .)
    PLUS            reduce using rule 48 (expr -> call .)
    MINUS           reduce using rule 48 (expr -> call .)
    MUL             reduce using rule 48 (expr -> call .)
    DIV             reduce using rule 48 (expr -> call .)
    REGEX           reduce using rule 48 (expr -> call .)
    AND             reduce using rule 48 (expr -> call .)
    OR              reduce using rule 48 (expr -> call .)
    NOT             reduce using rule 48 (expr -> call .)
    MOD             reduce using rule 48 (expr -> call .)
    LBRACKET        reduce using rule 48 (expr -> call .)
    REDIRECT        reduce using rule 48 (expr -> call .)
    NEWLINE         reduce using rule 48 (expr -> call .)
    $end            reduce using rule 48 (expr -> call .)
    RBRACE          reduce using rule 48 (expr -> call .)
    RPAREN          reduce using rule 48 (expr -> call .)
    COLON           reduce using rule 48 (expr -> call .)
    COMMA           reduce using rule 48 (expr -> call .)
    RBRACKET        reduce using rule 48 (expr -> call .)


state 37

    (45) expr -> dict_literal .

    EQ              reduce using rule 45 (expr -> dict_literal .)
    NE              reduce using rule 45 (expr -> dict_literal .)
    GT              reduce using rule 45 (expr -> dict_literal .)
    GE              reduce using rule 45 (expr -> dict_literal .)
    LT              reduce using rule 45 (expr -> dict_literal .)
    LE              reduce using rule 45 (expr -> dict_literal .)
    PLUS            reduce using rule 45 (expr -> dict_literal .)
    MINUS           reduce using rule 45 (expr -> dict_literal .)
    MUL             reduce using rule 45 (expr -> dict_literal .)
    DIV             reduce using rule 45 (expr -> dict_literal .)
    REGEX           reduce using rule 45 (expr -> dict_literal .)
    AND             reduce using rule 45 (expr -> dict_literal .)
    OR              reduce using rule 45 (expr -> dict_literal .)
    NOT             reduce using rule 45 (expr -> dict_literal .)
    MOD             reduce using rule 45 (expr -> dict_literal .)
    LBRACKET        reduce using rule 45 (expr -> dict_literal .)
    REDIRECT        reduce using rule 45 (expr -> dict_literal .)
    NEWLINE         reduce using rule 45 (expr -> dict_literal .)
    $end            reduce using rule 45 (expr -> dict_literal .)
    RBRACE          reduce using rule 45 (expr -> dict_literal .)
    RPAREN          reduce using rule 45 (expr -> dict_literal .)
    COLON           reduce using rule 45 (expr -> dict_literal .)
    COMMA           reduce using rule 45 (expr -> dict_literal .)
    RBRACKET        reduce using rule 45 (expr -> dict_literal .)


state 38

    (73) symbol -> ATOM .
    (74) call -> ATOM . LPAREN RPAREN
    (75) call -> ATOM . LPAREN expr_list RPAREN

    COMMA           reduce using rule 73 (symbol -> ATOM .)
    EQ              reduce using rule 73 (symbol -> ATOM .)
    NE              reduce using rule 73 (symbol -> ATOM .)
    GT              reduce using rule 73 (symbol -> ATOM .)
    GE              reduce using rule 73 (symbol -> ATOM .)
    LT              reduce using rule 73 (symbol -> ATOM .)
    LE              reduce using rule 73 (symbol -> ATOM .)
    PLUS            reduce using rule 73 (symbol -> ATOM .)
    MINUS           reduce using rule 73 (symbol -> ATOM .)
    MUL             reduce using rule 73 (symbol -> ATOM .)
    DIV             reduce using rule 73 (symbol -> ATOM .)
    REGEX           reduce using rule 73 (symbol -> ATOM .)
    AND             reduce using rule 73 (symbol -> ATOM .)
    OR              reduce using rule 73 (symbol -> ATOM .)
    NOT             reduce using rule 73 (symbol -> ATOM .)
    MOD             reduce using rule 73 (symbol -> ATOM .)
    LBRACKET        reduce using rule 73 (symbol -> ATOM .)
    RBRACKET        reduce using rule 73 (symbol -> ATOM .)
    RPAREN          reduce using rule 73 (symbol -> ATOM .)
    RBRACE          reduce using rule 73 (symbol -> ATOM .)
    REDIRECT        reduce using rule 73 (symbol -> ATOM .)
    NEWLINE         reduce using rule 73 (symbol -> ATOM .)
    $end            reduce using rule 73 (symbol -> ATOM .)
    COLON           reduce using rule 73 (symbol -> ATOM .)
    LPAREN          shift and go to state 64


state 39

    (51) expr -> expr_expansion .

    EQ              reduce using rule 51 (expr -> expr_expansion .)
    NE              reduce using rule 51 (expr -> expr_expansion .)
    GT              reduce using rule 51 (expr -> expr_expansion .)
    GE              reduce using rule 51 (expr -> expr_expansion .)
    LT              reduce using rule 51 (expr -> expr_expansion .)
    LE              reduce using rule 51 (expr -> expr_expansion .)
    PLUS            reduce using rule 51 (expr -> expr_expansion .)
    MINUS           reduce using rule 51 (expr -> expr_expansion .)
    MUL             reduce using rule 51 (expr -> expr_expansion .)
    DIV             reduce using rule 51 (expr -> expr_expansion .)
    REGEX           reduce using rule 51 (expr -> expr_expansion .)
    AND             reduce using rule 51 (expr -> expr_expansion .)
    OR              reduce using rule 51 (expr -> expr_expansion .)
    NOT             reduce using rule 51 (expr -> expr_expansion .)
    MOD             reduce using rule 51 (expr -> expr_expansion .)
    LBRACKET        reduce using rule 51 (expr -> expr_expansion .)
    REDIRECT        reduce using rule 51 (expr -> expr_expansion .)
    NEWLINE         reduce using rule 51 (expr -> expr_expansion .)
    $end            reduce using rule 51 (expr -> expr_expansion .)
    RBRACE          reduce using rule 51 (expr -> expr_expansion .)
    RPAREN          reduce using rule 51 (expr -> expr_expansion .)
    COLON           reduce using rule 51 (expr -> expr_expansion .)
    COMMA           reduce using rule 51 (expr -> expr_expansion .)
    RBRACKET        reduce using rule 51 (expr -> expr_expansion .)


state 40

    (83) unary_expr -> MINUS . expr
    (42) expr -> . symbol
    (43) expr -> . literal
    (44) expr -> . array_literal
    (45) expr -> . dict_literal
    (46) expr -> . unary_expr
    (47) expr -> . binary_expr
    (48) expr -> . call
    (49) expr -> . subscript_expr
    (50) expr -> . anon_function_expr
    (51) expr -> . expr_expansion
    (52) expr -> . LPAREN expr RPAREN
    (53) expr -> . COPEN expr RBRACE
    (73) symbol -> . ATOM
    (65) literal -> . NUMBER
    (66) literal -> . HEXNUMBER
    (67) literal -> . BINNUMBER
    (68) literal -> . OCTNUMBER
    (69) literal -> . STRING
    (70) literal -> . TRUE
    (71) literal -> . FALSE
    (72) literal -> . NULL
    (55) array_literal -> . LBRACKET RBRACKET
    (56) array_literal -> . LBRACKET expr_list RBRACKET
    (57) dict_literal -> . LBRACE RBRACE
    (58) dict_literal -> . LBRACE NEWLINE RBRACE
    (59) dict_literal -> . LBRACE dict_pair_list RBRACE
    (83) unary_expr -> . MINUS expr
    (84) unary_expr -> . NOT expr
    (85) binary_expr -> . expr EQ expr
    (86) binary_expr -> . expr NE expr
    (87) binary_expr -> . expr GT expr
    (88) binary_expr -> . expr GE expr
    (89) binary_expr -> . expr LT expr
    (90) binary_expr -> . expr LE expr
    (91) binary_expr -> . expr PLUS expr
    (92) binary_expr -> . expr MINUS expr
    (93) binary_expr -> . expr MUL expr
    (94) binary_expr -> . expr DIV expr
    (95) binary_expr -> . expr REGEX expr
    (96) binary_expr -> . expr AND expr
    (97) binary_expr -> . expr OR expr
    (98) binary_expr -> . expr NOT expr
    (99) binary_expr -> . expr MOD expr
    (74) call -> . ATOM LPAREN RPAREN
    (75) call -> . ATOM LPAREN expr_list RPAREN
    (78) subscript_expr -> . expr LBRACKET expr RBRACKET
    (79) anon_function_expr -> . FUNCTION LPAREN RPAREN block
    (80) anon_function_expr -> . FUNCTION LPAREN RPAREN NEWLINE block
    (81) anon_function_expr -> . FUNCTION LPAREN function_argument_list RPAREN block
    (82) anon_function_expr -> . FUNCTION LPAREN function_argument_list RPAREN NEWLINE block
    (54) expr_expansion -> . EOPEN command RPAREN

    LPAREN          shift and go to state 35
    COPEN           shift and go to state 60
    ATOM            shift and go to state 38
    NUMBER          shift and go to state 43
    HEXNUMBER       shift and go to state 57
    BINNUMBER       shift and go to state 58
    OCTNUMBER       shift and go to state 54
    STRING          shift and go to state 44
    TRUE            shift and go to state 46
    FALSE           shift and go to state 51
    NULL            shift and go to state 56
    LBRACKET        shift and go to state 52
    LBRACE          shift and go to state 47
    MINUS           shift and go to state 40
    NOT             shift and go to state 45
    FUNCTION        shift and go to state 53
    EOPEN           shift and go to state 55

    binary_expr                    shift and go to state 33
    expr_expansion                 shift and go to state 39
    literal                        shift and go to state 34
    expr                           shift and go to state 92
    array_literal                  shift and go to state 49
    subscript_expr                 shift and go to state 59
    symbol                         shift and go to state 50
    anon_function_expr             shift and go to state 41
    call                           shift and go to state 36
    dict_literal                   shift and go to state 37
    unary_expr                     shift and go to state 42

state 41

    (50) expr -> anon_function_expr .

    EQ              reduce using rule 50 (expr -> anon_function_expr .)
    NE              reduce using rule 50 (expr -> anon_function_expr .)
    GT              reduce using rule 50 (expr -> anon_function_expr .)
    GE              reduce using rule 50 (expr -> anon_function_expr .)
    LT              reduce using rule 50 (expr -> anon_function_expr .)
    LE              reduce using rule 50 (expr -> anon_function_expr .)
    PLUS            reduce using rule 50 (expr -> anon_function_expr .)
    MINUS           reduce using rule 50 (expr -> anon_function_expr .)
    MUL             reduce using rule 50 (expr -> anon_function_expr .)
    DIV             reduce using rule 50 (expr -> anon_function_expr .)
    REGEX           reduce using rule 50 (expr -> anon_function_expr .)
    AND             reduce using rule 50 (expr -> anon_function_expr .)
    OR              reduce using rule 50 (expr -> anon_function_expr .)
    NOT             reduce using rule 50 (expr -> anon_function_expr .)
    MOD             reduce using rule 50 (expr -> anon_function_expr .)
    LBRACKET        reduce using rule 50 (expr -> anon_function_expr .)
    REDIRECT        reduce using rule 50 (expr -> anon_function_expr .)
    NEWLINE         reduce using rule 50 (expr -> anon_function_expr .)
    $end            reduce using rule 50 (expr -> anon_function_expr .)
    RBRACE          reduce using rule 50 (expr -> anon_function_expr .)
    RPAREN          reduce using rule 50 (expr -> anon_function_expr .)
    COLON           reduce using rule 50 (expr -> anon_function_expr .)
    COMMA           reduce using rule 50 (expr -> anon_function_expr .)
    RBRACKET        reduce using rule 50 (expr -> anon_function_expr .)


state 42

    (46) expr -> unary_expr .

    EQ              reduce using rule 46 (expr -> unary_expr .)
    NE              reduce using rule 46 (expr -> unary_expr .)
    GT              reduce using rule 46 (expr -> unary_expr .)
    GE              reduce using rule 46 (expr -> unary_expr .)
    LT              reduce using rule 46 (expr -> unary_expr .)
    LE              reduce using rule 46 (expr -> unary_expr .)
    PLUS            reduce using rule 46 (expr -> unary_expr .)
    MINUS           reduce using rule 46 (expr -> unary_expr .)
    MUL             reduce using rule 46 (expr -> unary_expr .)
    DIV             reduce using rule 46 (expr -> unary_expr .)
    REGEX           reduce using rule 46 (expr -> unary_expr .)
    AND             reduce using rule 46 (expr -> unary_expr .)
    OR              reduce using rule 46 (expr -> unary_expr .)
    NOT             reduce using rule 46 (expr -> unary_expr .)
    MOD             reduce using rule 46 (expr -> unary_expr .)
    LBRACKET        reduce using rule 46 (expr -> unary_expr .)
    REDIRECT        reduce using rule 46 (expr -> unary_expr .)
    NEWLINE         reduce using rule 46 (expr -> unary_expr .)
    $end            reduce using rule 46 (expr -> unary_expr .)
    RBRACE          reduce using rule 46 (expr -> unary_expr .)
    RPAREN          reduce using rule 46 (expr -> unary_expr .)
    COLON           reduce using rule 46 (expr -> unary_expr .)
    COMMA           reduce using rule 46 (expr -> unary_expr .)
    RBRACKET        reduce using rule 46 (expr -> unary_expr .)


state 43

    (65) literal -> NUMBER .

    EQ              reduce using rule 65 (literal -> NUMBER .)
    NE              reduce using rule 65 (literal -> NUMBER .)
    GT              reduce using rule 65 (literal -> NUMBER .)
    GE              reduce using rule 65 (literal -> NUMBER .)
    LT              reduce using rule 65 (literal -> NUMBER .)
    LE              reduce using rule 65 (literal -> NUMBER .)
    PLUS            reduce using rule 65 (literal -> NUMBER .)
    MINUS           reduce using rule 65 (literal -> NUMBER .)
    MUL             reduce using rule 65 (literal -> NUMBER .)
    DIV             reduce using rule 65 (literal -> NUMBER .)
    REGEX           reduce using rule 65 (literal -> NUMBER .)
    AND             reduce using rule 65 (literal -> NUMBER .)
    OR              reduce using rule 65 (literal -> NUMBER .)
    NOT             reduce using rule 65 (literal -> NUMBER .)
    MOD             reduce using rule 65 (literal -> NUMBER .)
    LBRACKET        reduce using rule 65 (literal -> NUMBER .)
    REDIRECT        reduce using rule 65 (literal -> NUMBER .)
    NEWLINE         reduce using rule 65 (literal -> NUMBER .)
    $end            reduce using rule 65 (literal -> NUMBER .)
    RBRACE          reduce using rule 65 (literal -> NUMBER .)
    RPAREN          reduce using rule 65 (literal -> NUMBER .)
    COLON           reduce using rule 65 (literal -> NUMBER .)
    COMMA           reduce using rule 65 (literal -> NUMBER .)
    RBRACKET        reduce using rule 65 (literal -> NUMBER .)
    error           reduce using rule 65 (literal -> NUMBER .)
    ATOM            reduce using rule 65 (literal -> NUMBER .)
    COPEN           reduce using rule 65 (literal -> NUMBER .)
    LIST            reduce using rule 65 (literal -> NUMBER .)
    UP              reduce using rule 65 (literal -> NUMBER .)
    NUMBER          reduce using rule 65 (literal -> NUMBER .)
    HEXNUMBER       reduce using rule 65 (literal -> NUMBER .)
    BINNUMBER       reduce using rule 65 (literal -> NUMBER .)
    OCTNUMBER       reduce using rule 65 (literal -> NUMBER .)
    STRING          reduce using rule 65 (literal -> NUMBER .)
    TRUE            reduce using rule 65 (literal -> NUMBER .)
    FALSE           reduce using rule 65 (literal -> NUMBER .)
    NULL            reduce using rule 65 (literal -> NUMBER .)
    LBRACE          reduce using rule 65 (literal -> NUMBER .)
    PIPE            reduce using rule 65 (literal -> NUMBER .)


state 44

    (69) literal -> STRING .

    EQ              reduce using rule 69 (literal -> STRING .)
    NE              reduce using rule 69 (literal -> STRING .)
    GT              reduce using rule 69 (literal -> STRING .)
    GE              reduce using rule 69 (literal -> STRING .)
    LT              reduce using rule 69 (literal -> STRING .)
    LE              reduce using rule 69 (literal -> STRING .)
    PLUS            reduce using rule 69 (literal -> STRING .)
    MINUS           reduce using rule 69 (literal -> STRING .)
    MUL             reduce using rule 69 (literal -> STRING .)
    DIV             reduce using rule 69 (literal -> STRING .)
    REGEX           reduce using rule 69 (literal -> STRING .)
    AND             reduce using rule 69 (literal -> STRING .)
    OR              reduce using rule 69 (literal -> STRING .)
    NOT             reduce using rule 69 (literal -> STRING .)
    MOD             reduce using rule 69 (literal -> STRING .)
    LBRACKET        reduce using rule 69 (literal -> STRING .)
    REDIRECT        reduce using rule 69 (literal -> STRING .)
    NEWLINE         reduce using rule 69 (literal -> STRING .)
    $end            reduce using rule 69 (literal -> STRING .)
    RBRACE          reduce using rule 69 (literal -> STRING .)
    RPAREN          reduce using rule 69 (literal -> STRING .)
    COLON           reduce using rule 69 (literal -> STRING .)
    COMMA           reduce using rule 69 (literal -> STRING .)
    RBRACKET        reduce using rule 69 (literal -> STRING .)
    error           reduce using rule 69 (literal -> STRING .)
    ATOM            reduce using rule 69 (literal -> STRING .)
    COPEN           reduce using rule 69 (literal -> STRING .)
    LIST            reduce using rule 69 (literal -> STRING .)
    UP              reduce using rule 69 (literal -> STRING .)
    NUMBER          reduce using rule 69 (literal -> STRING .)
    HEXNUMBER       reduce using rule 69 (literal -> STRING .)
    BINNUMBER       reduce using rule 69 (literal -> STRING .)
    OCTNUMBER       reduce using rule 69 (literal -> STRING .)
    STRING          reduce using rule 69 (literal -> STRING .)
    TRUE            reduce using rule 69 (literal -> STRING .)
    FALSE           reduce using rule 69 (literal -> STRING .)
    NULL            reduce using rule 69 (literal -> STRING .)
    LBRACE          reduce using rule 69 (literal -> STRING .)
    PIPE            reduce using rule 69 (literal -> STRING .)


state 45

    (84) unary_expr -> NOT . expr
    (42) expr -> . symbol
    (43) expr -> . literal
    (44) expr -> . array_literal
    (45) expr -> . dict_literal
    (46) expr -> . unary_expr
    (47) expr -> . binary_expr
    (48) expr -> . call
    (49) expr -> . subscript_expr
    (50) expr -> . anon_function_expr
    (51) expr -> . expr_expansion
    (52) expr -> . LPAREN expr RPAREN
    (53) expr -> . COPEN expr RBRACE
    (73) symbol -> . ATOM
    (65) literal -> . NUMBER
    (66) literal -> . HEXNUMBER
    (67) literal -> . BINNUMBER
    (68) literal -> . OCTNUMBER
    (69) literal -> . STRING
    (70) literal -> . TRUE
    (71) literal -> . FALSE
    (72) literal -> . NULL
    (55) array_literal -> . LBRACKET RBRACKET
    (56) array_literal -> . LBRACKET expr_list RBRACKET
    (57) dict_literal -> . LBRACE RBRACE
    (58) dict_literal -> . LBRACE NEWLINE RBRACE
    (59) dict_literal -> . LBRACE dict_pair_list RBRACE
    (83) unary_expr -> . MINUS expr
    (84) unary_expr -> . NOT expr
    (85) binary_expr -> . expr EQ expr
    (86) binary_expr -> . expr NE expr
    (87) binary_expr -> . expr GT expr
    (88) binary_expr -> . expr GE expr
    (89) binary_expr -> . expr LT expr
    (90) binary_expr -> . expr LE expr
    (91) binary_expr -> . expr PLUS expr
    (92) binary_expr -> . expr MINUS expr
    (93) binary_expr -> . expr MUL expr
    (94) binary_expr -> . expr DIV expr
    (95) binary_expr -> . expr REGEX expr
    (96) binary_expr -> . expr AND expr
    (97) binary_expr -> . expr OR expr
    (98) binary_expr -> . expr NOT expr
    (99) binary_expr -> . expr MOD expr
    (74) call -> . ATOM LPAREN RPAREN
    (75) call -> . ATOM LPAREN expr_list RPAREN
    (78) subscript_expr -> . expr LBRACKET expr RBRACKET
    (79) anon_function_expr -> . FUNCTION LPAREN RPAREN block
    (80) anon_function_expr -> . FUNCTION LPAREN RPAREN NEWLINE block
    (81) anon_function_expr -> . FUNCTION LPAREN function_argument_list RPAREN block
    (82) anon_function_expr -> . FUNCTION LPAREN function_argument_list RPAREN NEWLINE block
    (54) expr_expansion -> . EOPEN command RPAREN

    LPAREN          shift and go to state 35
    COPEN           shift and go to state 60
    ATOM            shift and go to state 38
    NUMBER          shift and go to state 43
    HEXNUMBER       shift and go to state 57
    BINNUMBER       shift and go to state 58
    OCTNUMBER       shift and go to state 54
    STRING          shift and go to state 44
    TRUE            shift and go to state 46
    FALSE           shift and go to state 51
    NULL            shift and go to state 56
    LBRACKET        shift and go to state 52
    LBRACE          shift and go to state 47
    MINUS           shift and go to state 40
    NOT             shift and go to state 45
    FUNCTION        shift and go to state 53
    EOPEN           shift and go to state 55

    binary_expr                    shift and go to state 33
    expr_expansion                 shift and go to state 39
    literal                        shift and go to state 34
    expr                           shift and go to state 93
    array_literal                  shift and go to state 49
    subscript_expr                 shift and go to state 59
    symbol                         shift and go to state 50
    anon_function_expr             shift and go to state 41
    call                           shift and go to state 36
    dict_literal                   shift and go to state 37
    unary_expr                     shift and go to state 42

state 46

    (70) literal -> TRUE .

    EQ              reduce using rule 70 (literal -> TRUE .)
    NE              reduce using rule 70 (literal -> TRUE .)
    GT              reduce using rule 70 (literal -> TRUE .)
    GE              reduce using rule 70 (literal -> TRUE .)
    LT              reduce using rule 70 (literal -> TRUE .)
    LE              reduce using rule 70 (literal -> TRUE .)
    PLUS            reduce using rule 70 (literal -> TRUE .)
    MINUS           reduce using rule 70 (literal -> TRUE .)
    MUL             reduce using rule 70 (literal -> TRUE .)
    DIV             reduce using rule 70 (literal -> TRUE .)
    REGEX           reduce using rule 70 (literal -> TRUE .)
    AND             reduce using rule 70 (literal -> TRUE .)
    OR              reduce using rule 70 (literal -> TRUE .)
    NOT             reduce using rule 70 (literal -> TRUE .)
    MOD             reduce using rule 70 (literal -> TRUE .)
    LBRACKET        reduce using rule 70 (literal -> TRUE .)
    REDIRECT        reduce using rule 70 (literal -> TRUE .)
    NEWLINE         reduce using rule 70 (literal -> TRUE .)
    $end            reduce using rule 70 (literal -> TRUE .)
    RBRACE          reduce using rule 70 (literal -> TRUE .)
    RPAREN          reduce using rule 70 (literal -> TRUE .)
    COLON           reduce using rule 70 (literal -> TRUE .)
    COMMA           reduce using rule 70 (literal -> TRUE .)
    RBRACKET        reduce using rule 70 (literal -> TRUE .)
    error           reduce using rule 70 (literal -> TRUE .)
    ATOM            reduce using rule 70 (literal -> TRUE .)
    COPEN           reduce using rule 70 (literal -> TRUE .)
    LIST            reduce using rule 70 (literal -> TRUE .)
    UP              reduce using rule 70 (literal -> TRUE .)
    NUMBER          reduce using rule 70 (literal -> TRUE .)
    HEXNUMBER       reduce using rule 70 (literal -> TRUE .)
    BINNUMBER       reduce using rule 70 (literal -> TRUE .)
    OCTNUMBER       reduce using rule 70 (literal -> TRUE .)
    STRING          reduce using rule 70 (literal -> TRUE .)
    TRUE            reduce using rule 70 (literal -> TRUE .)
    FALSE           reduce using rule 70 (literal -> TRUE .)
    NULL            reduce using rule 70 (literal -> TRUE .)
    LBRACE          reduce using rule 70 (literal -> TRUE .)
    PIPE            reduce using rule 70 (literal -> TRUE .)


state 47

    (57) dict_literal -> LBRACE . RBRACE
    (58) dict_literal -> LBRACE . NEWLINE RBRACE
    (59) dict_literal -> LBRACE . dict_pair_list RBRACE
    (60) dict_pair_list -> . dict_pair
    (61) dict_pair_list -> . dict_pair COMMA dict_pair_list
    (62) dict_pair -> . expr COLON expr
    (63) dict_pair -> . NEWLINE expr COLON expr
    (64) dict_pair -> . NEWLINE expr COLON expr NEWLINE
    (42) expr -> . symbol
    (43) expr -> . literal
    (44) expr -> . array_literal
    (45) expr -> . dict_literal
    (46) expr -> . unary_expr
    (47) expr -> . binary_expr
    (48) expr -> . call
    (49) expr -> . subscript_expr
    (50) expr -> . anon_function_expr
    (51) expr -> . expr_expansion
    (52) expr -> . LPAREN expr RPAREN
    (53) expr -> . COPEN expr RBRACE
    (73) symbol -> . ATOM
    (65) literal -> . NUMBER
    (66) literal -> . HEXNUMBER
    (67) literal -> . BINNUMBER
    (68) literal -> . OCTNUMBER
    (69) literal -> . STRING
    (70) literal -> . TRUE
    (71) literal -> . FALSE
    (72) literal -> . NULL
    (55) array_literal -> . LBRACKET RBRACKET
    (56) array_literal -> . LBRACKET expr_list RBRACKET
    (57) dict_literal -> . LBRACE RBRACE
    (58) dict_literal -> . LBRACE NEWLINE RBRACE
    (59) dict_literal -> . LBRACE dict_pair_list RBRACE
    (83) unary_expr -> . MINUS expr
    (84) unary_expr -> . NOT expr
    (85) binary_expr -> . expr EQ expr
    (86) binary_expr -> . expr NE expr
    (87) binary_expr -> . expr GT expr
    (88) binary_expr -> . expr GE expr
    (89) binary_expr -> . expr LT expr
    (90) binary_expr -> . expr LE expr
    (91) binary_expr -> . expr PLUS expr
    (92) binary_expr -> . expr MINUS expr
    (93) binary_expr -> . expr MUL expr
    (94) binary_expr -> . expr DIV expr
    (95) binary_expr -> . expr REGEX expr
    (96) binary_expr -> . expr AND expr
    (97) binary_expr -> . expr OR expr
    (98) binary_expr -> . expr NOT expr
    (99) binary_expr -> . expr MOD expr
    (74) call -> . ATOM LPAREN RPAREN
    (75) call -> . ATOM LPAREN expr_list RPAREN
    (78) subscript_expr -> . expr LBRACKET expr RBRACKET
    (79) anon_function_expr -> . FUNCTION LPAREN RPAREN block
    (80) anon_function_expr -> . FUNCTION LPAREN RPAREN NEWLINE block
    (81) anon_function_expr -> . FUNCTION LPAREN function_argument_list RPAREN block
    (82) anon_function_expr -> . FUNCTION LPAREN function_argument_list RPAREN NEWLINE block
    (54) expr_expansion -> . EOPEN command RPAREN

    RBRACE          shift and go to state 94
    NEWLINE         shift and go to state 97
    LPAREN          shift and go to state 35
    COPEN           shift and go to state 60
    ATOM            shift and go to state 38
    NUMBER          shift and go to state 43
    HEXNUMBER       shift and go to state 57
    BINNUMBER       shift and go to state 58
    OCTNUMBER       shift and go to state 54
    STRING          shift and go to state 44
    TRUE            shift and go to state 46
    FALSE           shift and go to state 51
    NULL            shift and go to state 56
    LBRACKET        shift and go to state 52
    LBRACE          shift and go to state 47
    MINUS           shift and go to state 40
    NOT             shift and go to state 45
    FUNCTION        shift and go to state 53
    EOPEN           shift and go to state 55

    expr_expansion                 shift and go to state 39
    binary_expr                    shift and go to state 33
    unary_expr                     shift and go to state 42
    literal                        shift and go to state 34
    expr                           shift and go to state 96
    array_literal                  shift and go to state 49
    subscript_expr                 shift and go to state 59
    anon_function_expr             shift and go to state 41
    dict_pair                      shift and go to state 98
    symbol                         shift and go to state 50
    call                           shift and go to state 36
    dict_pair_list                 shift and go to state 95
    dict_literal                   shift and go to state 37

state 48

    (37) return_stmt -> RETURN expr .
    (85) binary_expr -> expr . EQ expr
    (86) binary_expr -> expr . NE expr
    (87) binary_expr -> expr . GT expr
    (88) binary_expr -> expr . GE expr
    (89) binary_expr -> expr . LT expr
    (90) binary_expr -> expr . LE expr
    (91) binary_expr -> expr . PLUS expr
    (92) binary_expr -> expr . MINUS expr
    (93) binary_expr -> expr . MUL expr
    (94) binary_expr -> expr . DIV expr
    (95) binary_expr -> expr . REGEX expr
    (96) binary_expr -> expr . AND expr
    (97) binary_expr -> expr . OR expr
    (98) binary_expr -> expr . NOT expr
    (99) binary_expr -> expr . MOD expr
    (78) subscript_expr -> expr . LBRACKET expr RBRACKET

    REDIRECT        reduce using rule 37 (return_stmt -> RETURN expr .)
    NEWLINE         reduce using rule 37 (return_stmt -> RETURN expr .)
    RBRACE          reduce using rule 37 (return_stmt -> RETURN expr .)
    $end            reduce using rule 37 (return_stmt -> RETURN expr .)
    EQ              shift and go to state 99
    NE              shift and go to state 100
    GT              shift and go to state 103
    GE              shift and go to state 108
    LT              shift and go to state 109
    LE              shift and go to state 105
    PLUS            shift and go to state 114
    MINUS           shift and go to state 106
    MUL             shift and go to state 101
    DIV             shift and go to state 102
    REGEX           shift and go to state 113
    AND             shift and go to state 111
    OR              shift and go to state 107
    NOT             shift and go to state 104
    MOD             shift and go to state 112
    LBRACKET        shift and go to state 110


state 49

    (44) expr -> array_literal .

    EQ              reduce using rule 44 (expr -> array_literal .)
    NE              reduce using rule 44 (expr -> array_literal .)
    GT              reduce using rule 44 (expr -> array_literal .)
    GE              reduce using rule 44 (expr -> array_literal .)
    LT              reduce using rule 44 (expr -> array_literal .)
    LE              reduce using rule 44 (expr -> array_literal .)
    PLUS            reduce using rule 44 (expr -> array_literal .)
    MINUS           reduce using rule 44 (expr -> array_literal .)
    MUL             reduce using rule 44 (expr -> array_literal .)
    DIV             reduce using rule 44 (expr -> array_literal .)
    REGEX           reduce using rule 44 (expr -> array_literal .)
    AND             reduce using rule 44 (expr -> array_literal .)
    OR              reduce using rule 44 (expr -> array_literal .)
    NOT             reduce using rule 44 (expr -> array_literal .)
    MOD             reduce using rule 44 (expr -> array_literal .)
    LBRACKET        reduce using rule 44 (expr -> array_literal .)
    REDIRECT        reduce using rule 44 (expr -> array_literal .)
    NEWLINE         reduce using rule 44 (expr -> array_literal .)
    $end            reduce using rule 44 (expr -> array_literal .)
    RBRACE          reduce using rule 44 (expr -> array_literal .)
    RPAREN          reduce using rule 44 (expr -> array_literal .)
    COLON           reduce using rule 44 (expr -> array_literal .)
    COMMA           reduce using rule 44 (expr -> array_literal .)
    RBRACKET        reduce using rule 44 (expr -> array_literal .)


state 50

    (42) expr -> symbol .

    EQ              reduce using rule 42 (expr -> symbol .)
    NE              reduce using rule 42 (expr -> symbol .)
    GT              reduce using rule 42 (expr -> symbol .)
    GE              reduce using rule 42 (expr -> symbol .)
    LT              reduce using rule 42 (expr -> symbol .)
    LE              reduce using rule 42 (expr -> symbol .)
    PLUS            reduce using rule 42 (expr -> symbol .)
    MINUS           reduce using rule 42 (expr -> symbol .)
    MUL             reduce using rule 42 (expr -> symbol .)
    DIV             reduce using rule 42 (expr -> symbol .)
    REGEX           reduce using rule 42 (expr -> symbol .)
    AND             reduce using rule 42 (expr -> symbol .)
    OR              reduce using rule 42 (expr -> symbol .)
    NOT             reduce using rule 42 (expr -> symbol .)
    MOD             reduce using rule 42 (expr -> symbol .)
    LBRACKET        reduce using rule 42 (expr -> symbol .)
    REDIRECT        reduce using rule 42 (expr -> symbol .)
    NEWLINE         reduce using rule 42 (expr -> symbol .)
    $end            reduce using rule 42 (expr -> symbol .)
    RBRACE          reduce using rule 42 (expr -> symbol .)
    RPAREN          reduce using rule 42 (expr -> symbol .)
    COLON           reduce using rule 42 (expr -> symbol .)
    COMMA           reduce using rule 42 (expr -> symbol .)
    RBRACKET        reduce using rule 42 (expr -> symbol .)


state 51

    (71) literal -> FALSE .

    EQ              reduce using rule 71 (literal -> FALSE .)
    NE              reduce using rule 71 (literal -> FALSE .)
    GT              reduce using rule 71 (literal -> FALSE .)
    GE              reduce using rule 71 (literal -> FALSE .)
    LT              reduce using rule 71 (literal -> FALSE .)
    LE              reduce using rule 71 (literal -> FALSE .)
    PLUS            reduce using rule 71 (literal -> FALSE .)
    MINUS           reduce using rule 71 (literal -> FALSE .)
    MUL             reduce using rule 71 (literal -> FALSE .)
    DIV             reduce using rule 71 (literal -> FALSE .)
    REGEX           reduce using rule 71 (literal -> FALSE .)
    AND             reduce using rule 71 (literal -> FALSE .)
    OR              reduce using rule 71 (literal -> FALSE .)
    NOT             reduce using rule 71 (literal -> FALSE .)
    MOD             reduce using rule 71 (literal -> FALSE .)
    LBRACKET        reduce using rule 71 (literal -> FALSE .)
    REDIRECT        reduce using rule 71 (literal -> FALSE .)
    NEWLINE         reduce using rule 71 (literal -> FALSE .)
    $end            reduce using rule 71 (literal -> FALSE .)
    RBRACE          reduce using rule 71 (literal -> FALSE .)
    RPAREN          reduce using rule 71 (literal -> FALSE .)
    COLON           reduce using rule 71 (literal -> FALSE .)
    COMMA           reduce using rule 71 (literal -> FALSE .)
    RBRACKET        reduce using rule 71 (literal -> FALSE .)
    error           reduce using rule 71 (literal -> FALSE .)
    ATOM            reduce using rule 71 (literal -> FALSE .)
    COPEN           reduce using rule 71 (literal -> FALSE .)
    LIST            reduce using rule 71 (literal -> FALSE .)
    UP              reduce using rule 71 (literal -> FALSE .)
    NUMBER          reduce using rule 71 (literal -> FALSE .)
    HEXNUMBER       reduce using rule 71 (literal -> FALSE .)
    BINNUMBER       reduce using rule 71 (literal -> FALSE .)
    OCTNUMBER       reduce using rule 71 (literal -> FALSE .)
    STRING          reduce using rule 71 (literal -> FALSE .)
    TRUE            reduce using rule 71 (literal -> FALSE .)
    FALSE           reduce using rule 71 (literal -> FALSE .)
    NULL            reduce using rule 71 (literal -> FALSE .)
    LBRACE          reduce using rule 71 (literal -> FALSE .)
    PIPE            reduce using rule 71 (literal -> FALSE .)


state 52

    (55) array_literal -> LBRACKET . RBRACKET
    (56) array_literal -> LBRACKET . expr_list RBRACKET
    (40) expr_list -> . expr
    (41) expr_list -> . expr COMMA expr_list
    (42) expr -> . symbol
    (43) expr -> . literal
    (44) expr -> . array_literal
    (45) expr -> . dict_literal
    (46) expr -> . unary_expr
    (47) expr -> . binary_expr
    (48) expr -> . call
    (49) expr -> . subscript_expr
    (50) expr -> . anon_function_expr
    (51) expr -> . expr_expansion
    (52) expr -> . LPAREN expr RPAREN
    (53) expr -> . COPEN expr RBRACE
    (73) symbol -> . ATOM
    (65) literal -> . NUMBER
    (66) literal -> . HEXNUMBER
    (67) literal -> . BINNUMBER
    (68) literal -> . OCTNUMBER
    (69) literal -> . STRING
    (70) literal -> . TRUE
    (71) literal -> . FALSE
    (72) literal -> . NULL
    (55) array_literal -> . LBRACKET RBRACKET
    (56) array_literal -> . LBRACKET expr_list RBRACKET
    (57) dict_literal -> . LBRACE RBRACE
    (58) dict_literal -> . LBRACE NEWLINE RBRACE
    (59) dict_literal -> . LBRACE dict_pair_list RBRACE
    (83) unary_expr -> . MINUS expr
    (84) unary_expr -> . NOT expr
    (85) binary_expr -> . expr EQ expr
    (86) binary_expr -> . expr NE expr
    (87) binary_expr -> . expr GT expr
    (88) binary_expr -> . expr GE expr
    (89) binary_expr -> . expr LT expr
    (90) binary_expr -> . expr LE expr
    (91) binary_expr -> . expr PLUS expr
    (92) binary_expr -> . expr MINUS expr
    (93) binary_expr -> . expr MUL expr
    (94) binary_expr -> . expr DIV expr
    (95) binary_expr -> . expr REGEX expr
    (96) binary_expr -> . expr AND expr
    (97) binary_expr -> . expr OR expr
    (98) binary_expr -> . expr NOT expr
    (99) binary_expr -> . expr MOD expr
    (74) call -> . ATOM LPAREN RPAREN
    (75) call -> . ATOM LPAREN expr_list RPAREN
    (78) subscript_expr -> . expr LBRACKET expr RBRACKET
    (79) anon_function_expr -> . FUNCTION LPAREN RPAREN block
    (80) anon_function_expr -> . FUNCTION LPAREN RPAREN NEWLINE block
    (81) anon_function_expr -> . FUNCTION LPAREN function_argument_list RPAREN block
    (82) anon_function_expr -> . FUNCTION LPAREN function_argument_list RPAREN NEWLINE block
    (54) expr_expansion -> . EOPEN command RPAREN

    RBRACKET        shift and go to state 115
    LPAREN          shift and go to state 35
    COPEN           shift and go to state 60
    ATOM            shift and go to state 38
    NUMBER          shift and go to state 43
    HEXNUMBER       shift and go to state 57
    BINNUMBER       shift and go to state 58
    OCTNUMBER       shift and go to state 54
    STRING          shift and go to state 44
    TRUE            shift and go to state 46
    FALSE           shift and go to state 51
    NULL            shift and go to state 56
    LBRACKET        shift and go to state 52
    LBRACE          shift and go to state 47
    MINUS           shift and go to state 40
    NOT             shift and go to state 45
    FUNCTION        shift and go to state 53
    EOPEN           shift and go to state 55

    expr_expansion                 shift and go to state 39
    binary_expr                    shift and go to state 33
    unary_expr                     shift and go to state 42
    literal                        shift and go to state 34
    expr                           shift and go to state 117
    expr_list                      shift and go to state 116
    array_literal                  shift and go to state 49
    subscript_expr                 shift and go to state 59
    symbol                         shift and go to state 50
    anon_function_expr             shift and go to state 41
    call                           shift and go to state 36
    dict_literal                   shift and go to state 37

state 53

    (79) anon_function_expr -> FUNCTION . LPAREN RPAREN block
    (80) anon_function_expr -> FUNCTION . LPAREN RPAREN NEWLINE block
    (81) anon_function_expr -> FUNCTION . LPAREN function_argument_list RPAREN block
    (82) anon_function_expr -> FUNCTION . LPAREN function_argument_list RPAREN NEWLINE block

    LPAREN          shift and go to state 118


state 54

    (68) literal -> OCTNUMBER .

    EQ              reduce using rule 68 (literal -> OCTNUMBER .)
    NE              reduce using rule 68 (literal -> OCTNUMBER .)
    GT              reduce using rule 68 (literal -> OCTNUMBER .)
    GE              reduce using rule 68 (literal -> OCTNUMBER .)
    LT              reduce using rule 68 (literal -> OCTNUMBER .)
    LE              reduce using rule 68 (literal -> OCTNUMBER .)
    PLUS            reduce using rule 68 (literal -> OCTNUMBER .)
    MINUS           reduce using rule 68 (literal -> OCTNUMBER .)
    MUL             reduce using rule 68 (literal -> OCTNUMBER .)
    DIV             reduce using rule 68 (literal -> OCTNUMBER .)
    REGEX           reduce using rule 68 (literal -> OCTNUMBER .)
    AND             reduce using rule 68 (literal -> OCTNUMBER .)
    OR              reduce using rule 68 (literal -> OCTNUMBER .)
    NOT             reduce using rule 68 (literal -> OCTNUMBER .)
    MOD             reduce using rule 68 (literal -> OCTNUMBER .)
    LBRACKET        reduce using rule 68 (literal -> OCTNUMBER .)
    REDIRECT        reduce using rule 68 (literal -> OCTNUMBER .)
    NEWLINE         reduce using rule 68 (literal -> OCTNUMBER .)
    $end            reduce using rule 68 (literal -> OCTNUMBER .)
    RBRACE          reduce using rule 68 (literal -> OCTNUMBER .)
    RPAREN          reduce using rule 68 (literal -> OCTNUMBER .)
    COLON           reduce using rule 68 (literal -> OCTNUMBER .)
    COMMA           reduce using rule 68 (literal -> OCTNUMBER .)
    RBRACKET        reduce using rule 68 (literal -> OCTNUMBER .)
    error           reduce using rule 68 (literal -> OCTNUMBER .)
    ATOM            reduce using rule 68 (literal -> OCTNUMBER .)
    COPEN           reduce using rule 68 (literal -> OCTNUMBER .)
    LIST            reduce using rule 68 (literal -> OCTNUMBER .)
    UP              reduce using rule 68 (literal -> OCTNUMBER .)
    NUMBER          reduce using rule 68 (literal -> OCTNUMBER .)
    HEXNUMBER       reduce using rule 68 (literal -> OCTNUMBER .)
    BINNUMBER       reduce using rule 68 (literal -> OCTNUMBER .)
    OCTNUMBER       reduce using rule 68 (literal -> OCTNUMBER .)
    STRING          reduce using rule 68 (literal -> OCTNUMBER .)
    TRUE            reduce using rule 68 (literal -> OCTNUMBER .)
    FALSE           reduce using rule 68 (literal -> OCTNUMBER .)
    NULL            reduce using rule 68 (literal -> OCTNUMBER .)
    LBRACE          reduce using rule 68 (literal -> OCTNUMBER .)
    PIPE            reduce using rule 68 (literal -> OCTNUMBER .)


state 55

    (54) expr_expansion -> EOPEN . command RPAREN
    (100) command -> . command_item
    (101) command -> . command_item parameter_list
    (102) command -> . command_item PIPE command
    (103) command -> . command_item parameter_list PIPE command
    (104) command_item -> . LIST
    (105) command_item -> . NUMBER
    (106) command_item -> . UP
    (107) command_item -> . symbol
    (108) command_item -> . COPEN expr RBRACE
    (109) command_item -> . STRING
    (73) symbol -> . ATOM

    LIST            shift and go to state 8
    NUMBER          shift and go to state 26
    UP              shift and go to state 7
    COPEN           shift and go to state 31
    STRING          shift and go to state 19
    ATOM            shift and go to state 119

    command_item                   shift and go to state 18
    symbol                         shift and go to state 121
    command                        shift and go to state 120

state 56

    (72) literal -> NULL .

    EQ              reduce using rule 72 (literal -> NULL .)
    NE              reduce using rule 72 (literal -> NULL .)
    GT              reduce using rule 72 (literal -> NULL .)
    GE              reduce using rule 72 (literal -> NULL .)
    LT              reduce using rule 72 (literal -> NULL .)
    LE              reduce using rule 72 (literal -> NULL .)
    PLUS            reduce using rule 72 (literal -> NULL .)
    MINUS           reduce using rule 72 (literal -> NULL .)
    MUL             reduce using rule 72 (literal -> NULL .)
    DIV             reduce using rule 72 (literal -> NULL .)
    REGEX           reduce using rule 72 (literal -> NULL .)
    AND             reduce using rule 72 (literal -> NULL .)
    OR              reduce using rule 72 (literal -> NULL .)
    NOT             reduce using rule 72 (literal -> NULL .)
    MOD             reduce using rule 72 (literal -> NULL .)
    LBRACKET        reduce using rule 72 (literal -> NULL .)
    REDIRECT        reduce using rule 72 (literal -> NULL .)
    NEWLINE         reduce using rule 72 (literal -> NULL .)
    $end            reduce using rule 72 (literal -> NULL .)
    RBRACE          reduce using rule 72 (literal -> NULL .)
    RPAREN          reduce using rule 72 (literal -> NULL .)
    COLON           reduce using rule 72 (literal -> NULL .)
    COMMA           reduce using rule 72 (literal -> NULL .)
    RBRACKET        reduce using rule 72 (literal -> NULL .)
    error           reduce using rule 72 (literal -> NULL .)
    ATOM            reduce using rule 72 (literal -> NULL .)
    COPEN           reduce using rule 72 (literal -> NULL .)
    LIST            reduce using rule 72 (literal -> NULL .)
    UP              reduce using rule 72 (literal -> NULL .)
    NUMBER          reduce using rule 72 (literal -> NULL .)
    HEXNUMBER       reduce using rule 72 (literal -> NULL .)
    BINNUMBER       reduce using rule 72 (literal -> NULL .)
    OCTNUMBER       reduce using rule 72 (literal -> NULL .)
    STRING          reduce using rule 72 (literal -> NULL .)
    TRUE            reduce using rule 72 (literal -> NULL .)
    FALSE           reduce using rule 72 (literal -> NULL .)
    NULL            reduce using rule 72 (literal -> NULL .)
    LBRACE          reduce using rule 72 (literal -> NULL .)
    PIPE            reduce using rule 72 (literal -> NULL .)


state 57

    (66) literal -> HEXNUMBER .

    EQ              reduce using rule 66 (literal -> HEXNUMBER .)
    NE              reduce using rule 66 (literal -> HEXNUMBER .)
    GT              reduce using rule 66 (literal -> HEXNUMBER .)
    GE              reduce using rule 66 (literal -> HEXNUMBER .)
    LT              reduce using rule 66 (literal -> HEXNUMBER .)
    LE              reduce using rule 66 (literal -> HEXNUMBER .)
    PLUS            reduce using rule 66 (literal -> HEXNUMBER .)
    MINUS           reduce using rule 66 (literal -> HEXNUMBER .)
    MUL             reduce using rule 66 (literal -> HEXNUMBER .)
    DIV             reduce using rule 66 (literal -> HEXNUMBER .)
    REGEX           reduce using rule 66 (literal -> HEXNUMBER .)
    AND             reduce using rule 66 (literal -> HEXNUMBER .)
    OR              reduce using rule 66 (literal -> HEXNUMBER .)
    NOT             reduce using rule 66 (literal -> HEXNUMBER .)
    MOD             reduce using rule 66 (literal -> HEXNUMBER .)
    LBRACKET        reduce using rule 66 (literal -> HEXNUMBER .)
    REDIRECT        reduce using rule 66 (literal -> HEXNUMBER .)
    NEWLINE         reduce using rule 66 (literal -> HEXNUMBER .)
    $end            reduce using rule 66 (literal -> HEXNUMBER .)
    RBRACE          reduce using rule 66 (literal -> HEXNUMBER .)
    RPAREN          reduce using rule 66 (literal -> HEXNUMBER .)
    COLON           reduce using rule 66 (literal -> HEXNUMBER .)
    COMMA           reduce using rule 66 (literal -> HEXNUMBER .)
    RBRACKET        reduce using rule 66 (literal -> HEXNUMBER .)
    error           reduce using rule 66 (literal -> HEXNUMBER .)
    ATOM            reduce using rule 66 (literal -> HEXNUMBER .)
    COPEN           reduce using rule 66 (literal -> HEXNUMBER .)
    LIST            reduce using rule 66 (literal -> HEXNUMBER .)
    UP              reduce using rule 66 (literal -> HEXNUMBER .)
    NUMBER          reduce using rule 66 (literal -> HEXNUMBER .)
    HEXNUMBER       reduce using rule 66 (literal -> HEXNUMBER .)
    BINNUMBER       reduce using rule 66 (literal -> HEXNUMBER .)
    OCTNUMBER       reduce using rule 66 (literal -> HEXNUMBER .)
    STRING          reduce using rule 66 (literal -> HEXNUMBER .)
    TRUE            reduce using rule 66 (literal -> HEXNUMBER .)
    FALSE           reduce using rule 66 (literal -> HEXNUMBER .)
    NULL            reduce using rule 66 (literal -> HEXNUMBER .)
    LBRACE          reduce using rule 66 (literal -> HEXNUMBER .)
    PIPE            reduce using rule 66 (literal -> HEXNUMBER .)


state 58

    (67) literal -> BINNUMBER .

    EQ              reduce using rule 67 (literal -> BINNUMBER .)
    NE              reduce using rule 67 (literal -> BINNUMBER .)
    GT              reduce using rule 67 (literal -> BINNUMBER .)
    GE              reduce using rule 67 (literal -> BINNUMBER .)
    LT              reduce using rule 67 (literal -> BINNUMBER .)
    LE              reduce using rule 67 (literal -> BINNUMBER .)
    PLUS            reduce using rule 67 (literal -> BINNUMBER .)
    MINUS           reduce using rule 67 (literal -> BINNUMBER .)
    MUL             reduce using rule 67 (literal -> BINNUMBER .)
    DIV             reduce using rule 67 (literal -> BINNUMBER .)
    REGEX           reduce using rule 67 (literal -> BINNUMBER .)
    AND             reduce using rule 67 (literal -> BINNUMBER .)
    OR              reduce using rule 67 (literal -> BINNUMBER .)
    NOT             reduce using rule 67 (literal -> BINNUMBER .)
    MOD             reduce using rule 67 (literal -> BINNUMBER .)
    LBRACKET        reduce using rule 67 (literal -> BINNUMBER .)
    REDIRECT        reduce using rule 67 (literal -> BINNUMBER .)
    NEWLINE         reduce using rule 67 (literal -> BINNUMBER .)
    $end            reduce using rule 67 (literal -> BINNUMBER .)
    RBRACE          reduce using rule 67 (literal -> BINNUMBER .)
    RPAREN          reduce using rule 67 (literal -> BINNUMBER .)
    COLON           reduce using rule 67 (literal -> BINNUMBER .)
    COMMA           reduce using rule 67 (literal -> BINNUMBER .)
    RBRACKET        reduce using rule 67 (literal -> BINNUMBER .)
    error           reduce using rule 67 (literal -> BINNUMBER .)
    ATOM            reduce using rule 67 (literal -> BINNUMBER .)
    COPEN           reduce using rule 67 (literal -> BINNUMBER .)
    LIST            reduce using rule 67 (literal -> BINNUMBER .)
    UP              reduce using rule 67 (literal -> BINNUMBER .)
    NUMBER          reduce using rule 67 (literal -> BINNUMBER .)
    HEXNUMBER       reduce using rule 67 (literal -> BINNUMBER .)
    BINNUMBER       reduce using rule 67 (literal -> BINNUMBER .)
    OCTNUMBER       reduce using rule 67 (literal -> BINNUMBER .)
    STRING          reduce using rule 67 (literal -> BINNUMBER .)
    TRUE            reduce using rule 67 (literal -> BINNUMBER .)
    FALSE           reduce using rule 67 (literal -> BINNUMBER .)
    NULL            reduce using rule 67 (literal -> BINNUMBER .)
    LBRACE          reduce using rule 67 (literal -> BINNUMBER .)
    PIPE            reduce using rule 67 (literal -> BINNUMBER .)


state 59

    (49) expr -> subscript_expr .

    EQ              reduce using rule 49 (expr -> subscript_expr .)
    NE              reduce using rule 49 (expr -> subscript_expr .)
    GT              reduce using rule 49 (expr -> subscript_expr .)
    GE              reduce using rule 49 (expr -> subscript_expr .)
    LT              reduce using rule 49 (expr -> subscript_expr .)
    LE              reduce using rule 49 (expr -> subscript_expr .)
    PLUS            reduce using rule 49 (expr -> subscript_expr .)
    MINUS           reduce using rule 49 (expr -> subscript_expr .)
    MUL             reduce using rule 49 (expr -> subscript_expr .)
    DIV             reduce using rule 49 (expr -> subscript_expr .)
    REGEX           reduce using rule 49 (expr -> subscript_expr .)
    AND             reduce using rule 49 (expr -> subscript_expr .)
    OR              reduce using rule 49 (expr -> subscript_expr .)
    NOT             reduce using rule 49 (expr -> subscript_expr .)
    MOD             reduce using rule 49 (expr -> subscript_expr .)
    LBRACKET        reduce using rule 49 (expr -> subscript_expr .)
    REDIRECT        reduce using rule 49 (expr -> subscript_expr .)
    NEWLINE         reduce using rule 49 (expr -> subscript_expr .)
    $end            reduce using rule 49 (expr -> subscript_expr .)
    RBRACE          reduce using rule 49 (expr -> subscript_expr .)
    RPAREN          reduce using rule 49 (expr -> subscript_expr .)
    COLON           reduce using rule 49 (expr -> subscript_expr .)
    COMMA           reduce using rule 49 (expr -> subscript_expr .)
    RBRACKET        reduce using rule 49 (expr -> subscript_expr .)


state 60

    (53) expr -> COPEN . expr RBRACE
    (42) expr -> . symbol
    (43) expr -> . literal
    (44) expr -> . array_literal
    (45) expr -> . dict_literal
    (46) expr -> . unary_expr
    (47) expr -> . binary_expr
    (48) expr -> . call
    (49) expr -> . subscript_expr
    (50) expr -> . anon_function_expr
    (51) expr -> . expr_expansion
    (52) expr -> . LPAREN expr RPAREN
    (53) expr -> . COPEN expr RBRACE
    (73) symbol -> . ATOM
    (65) literal -> . NUMBER
    (66) literal -> . HEXNUMBER
    (67) literal -> . BINNUMBER
    (68) literal -> . OCTNUMBER
    (69) literal -> . STRING
    (70) literal -> . TRUE
    (71) literal -> . FALSE
    (72) literal -> . NULL
    (55) array_literal -> . LBRACKET RBRACKET
    (56) array_literal -> . LBRACKET expr_list RBRACKET
    (57) dict_literal -> . LBRACE RBRACE
    (58) dict_literal -> . LBRACE NEWLINE RBRACE
    (59) dict_literal -> . LBRACE dict_pair_list RBRACE
    (83) unary_expr -> . MINUS expr
    (84) unary_expr -> . NOT expr
    (85) binary_expr -> . expr EQ expr
    (86) binary_expr -> . expr NE expr
    (87) binary_expr -> . expr GT expr
    (88) binary_expr -> . expr GE expr
    (89) binary_expr -> . expr LT expr
    (90) binary_expr -> . expr LE expr
    (91) binary_expr -> . expr PLUS expr
    (92) binary_expr -> . expr MINUS expr
    (93) binary_expr -> . expr MUL expr
    (94) binary_expr -> . expr DIV expr
    (95) binary_expr -> . expr REGEX expr
    (96) binary_expr -> . expr AND expr
    (97) binary_expr -> . expr OR expr
    (98) binary_expr -> . expr NOT expr
    (99) binary_expr -> . expr MOD expr
    (74) call -> . ATOM LPAREN RPAREN
    (75) call -> . ATOM LPAREN expr_list RPAREN
    (78) subscript_expr -> . expr LBRACKET expr RBRACKET
    (79) anon_function_expr -> . FUNCTION LPAREN RPAREN block
    (80) anon_function_expr -> . FUNCTION LPAREN RPAREN NEWLINE block
    (81) anon_function_expr -> . FUNCTION LPAREN function_argument_list RPAREN block
    (82) anon_function_expr -> . FUNCTION LPAREN function_argument_list RPAREN NEWLINE block
    (54) expr_expansion -> . EOPEN command RPAREN

    LPAREN          shift and go to state 35
    COPEN           shift and go to state 60
    ATOM            shift and go to state 38
    NUMBER          shift and go to state 43
    HEXNUMBER       shift and go to state 57
    BINNUMBER       shift and go to state 58
    OCTNUMBER       shift and go to state 54
    STRING          shift and go to state 44
    TRUE            shift and go to state 46
    FALSE           shift and go to state 51
    NULL            shift and go to state 56
    LBRACKET        shift and go to state 52
    LBRACE          shift and go to state 47
    MINUS           shift and go to state 40
    NOT             shift and go to state 45
    FUNCTION        shift and go to state 53
    EOPEN           shift and go to state 55

    binary_expr                    shift and go to state 33
    expr_expansion                 shift and go to state 39
    literal                        shift and go to state 34
    expr                           shift and go to state 122
    array_literal                  shift and go to state 49
    subscript_expr                 shift and go to state 59
    symbol                         shift and go to state 50
    anon_function_expr             shift and go to state 41
    call                           shift and go to state 36
    dict_literal                   shift and go to state 37
    unary_expr                     shift and go to state 42

state 61

    (2) stmt_list -> stmt_redirect NEWLINE .
    (3) stmt_list -> stmt_redirect NEWLINE . stmt_list
    (1) stmt_list -> . stmt_redirect
    (2) stmt_list -> . stmt_redirect NEWLINE
    (3) stmt_list -> . stmt_redirect NEWLINE stmt_list
    (4) stmt_list -> . NEWLINE stmt_list
    (5) stmt_redirect -> . stmt
    (6) stmt_redirect -> . stmt REDIRECT ATOM
    (7) stmt_redirect -> . stmt REDIRECT STRING
    (8) stmt -> . if_stmt
    (9) stmt -> . for_stmt
    (10) stmt -> . while_stmt
    (11) stmt -> . assignment_stmt
    (12) stmt -> . function_definition_stmt
    (13) stmt -> . return_stmt
    (14) stmt -> . break_stmt
    (15) stmt -> . undef_stmt
    (16) stmt -> . command
    (17) stmt -> . call
    (18) stmt -> . shell
    (23) if_stmt -> . IF LPAREN expr RPAREN block
    (24) if_stmt -> . IF LPAREN expr RPAREN block ELSE block
    (25) for_stmt -> . FOR LPAREN ATOM IN expr RPAREN block
    (26) for_stmt -> . FOR LPAREN ATOM COMMA ATOM IN expr RPAREN block
    (27) while_stmt -> . WHILE LPAREN expr RPAREN block
    (28) assignment_stmt -> . ATOM ASSIGN expr
    (29) assignment_stmt -> . subscript_left ASSIGN expr
    (30) function_definition_stmt -> . FUNCTION ATOM LPAREN RPAREN block
    (31) function_definition_stmt -> . FUNCTION ATOM LPAREN function_argument_list RPAREN block
    (32) function_definition_stmt -> . FUNCTION ATOM LPAREN RPAREN NEWLINE block
    (33) function_definition_stmt -> . FUNCTION ATOM LPAREN function_argument_list RPAREN NEWLINE block
    (36) return_stmt -> . RETURN
    (37) return_stmt -> . RETURN expr
    (38) break_stmt -> . BREAK
    (39) undef_stmt -> . UNDEF ATOM
    (100) command -> . command_item
    (101) command -> . command_item parameter_list
    (102) command -> . command_item PIPE command
    (103) command -> . command_item parameter_list PIPE command
    (74) call -> . ATOM LPAREN RPAREN
    (75) call -> . ATOM LPAREN expr_list RPAREN
    (135) shell -> . SHELL
    (136) shell -> . SHELL parameter_list
    (76) subscript_left -> . subscript_left LBRACKET expr RBRACKET
    (77) subscript_left -> . symbol LBRACKET expr RBRACKET
    (104) command_item -> . LIST
    (105) command_item -> . NUMBER
    (106) command_item -> . UP
    (107) command_item -> . symbol
    (108) command_item -> . COPEN expr RBRACE
    (109) command_item -> . STRING
    (73) symbol -> . ATOM

    $end            reduce using rule 2 (stmt_list -> stmt_redirect NEWLINE .)
    RBRACE          reduce using rule 2 (stmt_list -> stmt_redirect NEWLINE .)
    NEWLINE         shift and go to state 22
    IF              shift and go to state 13
    FOR             shift and go to state 28
    WHILE           shift and go to state 30
    ATOM            shift and go to state 11
    FUNCTION        shift and go to state 27
    RETURN          shift and go to state 3
    BREAK           shift and go to state 32
    UNDEF           shift and go to state 16
    SHELL           shift and go to state 15
    LIST            shift and go to state 8
    NUMBER          shift and go to state 26
    UP              shift and go to state 7
    COPEN           shift and go to state 31
    STRING          shift and go to state 19

    command_item                   shift and go to state 18
    shell                          shift and go to state 1
    for_stmt                       shift and go to state 2
    break_stmt                     shift and go to state 4
    if_stmt                        shift and go to state 20
    command                        shift and go to state 21
    stmt_redirect                  shift and go to state 6
    undef_stmt                     shift and go to state 5
    stmt                           shift and go to state 23
    symbol                         shift and go to state 24
    call                           shift and go to state 9
    subscript_left                 shift and go to state 10
    stmt_list                      shift and go to state 123
    while_stmt                     shift and go to state 12
    assignment_stmt                shift and go to state 29
    return_stmt                    shift and go to state 14
    function_definition_stmt       shift and go to state 17

state 62

    (29) assignment_stmt -> subscript_left ASSIGN . expr
    (42) expr -> . symbol
    (43) expr -> . literal
    (44) expr -> . array_literal
    (45) expr -> . dict_literal
    (46) expr -> . unary_expr
    (47) expr -> . binary_expr
    (48) expr -> . call
    (49) expr -> . subscript_expr
    (50) expr -> . anon_function_expr
    (51) expr -> . expr_expansion
    (52) expr -> . LPAREN expr RPAREN
    (53) expr -> . COPEN expr RBRACE
    (73) symbol -> . ATOM
    (65) literal -> . NUMBER
    (66) literal -> . HEXNUMBER
    (67) literal -> . BINNUMBER
    (68) literal -> . OCTNUMBER
    (69) literal -> . STRING
    (70) literal -> . TRUE
    (71) literal -> . FALSE
    (72) literal -> . NULL
    (55) array_literal -> . LBRACKET RBRACKET
    (56) array_literal -> . LBRACKET expr_list RBRACKET
    (57) dict_literal -> . LBRACE RBRACE
    (58) dict_literal -> . LBRACE NEWLINE RBRACE
    (59) dict_literal -> . LBRACE dict_pair_list RBRACE
    (83) unary_expr -> . MINUS expr
    (84) unary_expr -> . NOT expr
    (85) binary_expr -> . expr EQ expr
    (86) binary_expr -> . expr NE expr
    (87) binary_expr -> . expr GT expr
    (88) binary_expr -> . expr GE expr
    (89) binary_expr -> . expr LT expr
    (90) binary_expr -> . expr LE expr
    (91) binary_expr -> . expr PLUS expr
    (92) binary_expr -> . expr MINUS expr
    (93) binary_expr -> . expr MUL expr
    (94) binary_expr -> . expr DIV expr
    (95) binary_expr -> . expr REGEX expr
    (96) binary_expr -> . expr AND expr
    (97) binary_expr -> . expr OR expr
    (98) binary_expr -> . expr NOT expr
    (99) binary_expr -> . expr MOD expr
    (74) call -> . ATOM LPAREN RPAREN
    (75) call -> . ATOM LPAREN expr_list RPAREN
    (78) subscript_expr -> . expr LBRACKET expr RBRACKET
    (79) anon_function_expr -> . FUNCTION LPAREN RPAREN block
    (80) anon_function_expr -> . FUNCTION LPAREN RPAREN NEWLINE block
    (81) anon_function_expr -> . FUNCTION LPAREN function_argument_list RPAREN block
    (82) anon_function_expr -> . FUNCTION LPAREN function_argument_list RPAREN NEWLINE block
    (54) expr_expansion -> . EOPEN command RPAREN

    LPAREN          shift and go to state 35
    COPEN           shift and go to state 60
    ATOM            shift and go to state 38
    NUMBER          shift and go to state 43
    HEXNUMBER       shift and go to state 57
    BINNUMBER       shift and go to state 58
    OCTNUMBER       shift and go to state 54
    STRING          shift and go to state 44
    TRUE            shift and go to state 46
    FALSE           shift and go to state 51
    NULL            shift and go to state 56
    LBRACKET        shift and go to state 52
    LBRACE          shift and go to state 47
    MINUS           shift and go to state 40
    NOT             shift and go to state 45
    FUNCTION        shift and go to state 53
    EOPEN           shift and go to state 55

    expr_expansion                 shift and go to state 39
    binary_expr                    shift and go to state 33
    symbol                         shift and go to state 50
    unary_expr                     shift and go to state 42
    literal                        shift and go to state 34
    expr                           shift and go to state 124
    array_literal                  shift and go to state 49
    subscript_expr                 shift and go to state 59
    anon_function_expr             shift and go to state 41
    call                           shift and go to state 36
    dict_literal                   shift and go to state 37

state 63

    (76) subscript_left -> subscript_left LBRACKET . expr RBRACKET
    (42) expr -> . symbol
    (43) expr -> . literal
    (44) expr -> . array_literal
    (45) expr -> . dict_literal
    (46) expr -> . unary_expr
    (47) expr -> . binary_expr
    (48) expr -> . call
    (49) expr -> . subscript_expr
    (50) expr -> . anon_function_expr
    (51) expr -> . expr_expansion
    (52) expr -> . LPAREN expr RPAREN
    (53) expr -> . COPEN expr RBRACE
    (73) symbol -> . ATOM
    (65) literal -> . NUMBER
    (66) literal -> . HEXNUMBER
    (67) literal -> . BINNUMBER
    (68) literal -> . OCTNUMBER
    (69) literal -> . STRING
    (70) literal -> . TRUE
    (71) literal -> . FALSE
    (72) literal -> . NULL
    (55) array_literal -> . LBRACKET RBRACKET
    (56) array_literal -> . LBRACKET expr_list RBRACKET
    (57) dict_literal -> . LBRACE RBRACE
    (58) dict_literal -> . LBRACE NEWLINE RBRACE
    (59) dict_literal -> . LBRACE dict_pair_list RBRACE
    (83) unary_expr -> . MINUS expr
    (84) unary_expr -> . NOT expr
    (85) binary_expr -> . expr EQ expr
    (86) binary_expr -> . expr NE expr
    (87) binary_expr -> . expr GT expr
    (88) binary_expr -> . expr GE expr
    (89) binary_expr -> . expr LT expr
    (90) binary_expr -> . expr LE expr
    (91) binary_expr -> . expr PLUS expr
    (92) binary_expr -> . expr MINUS expr
    (93) binary_expr -> . expr MUL expr
    (94) binary_expr -> . expr DIV expr
    (95) binary_expr -> . expr REGEX expr
    (96) binary_expr -> . expr AND expr
    (97) binary_expr -> . expr OR expr
    (98) binary_expr -> . expr NOT expr
    (99) binary_expr -> . expr MOD expr
    (74) call -> . ATOM LPAREN RPAREN
    (75) call -> . ATOM LPAREN expr_list RPAREN
    (78) subscript_expr -> . expr LBRACKET expr RBRACKET
    (79) anon_function_expr -> . FUNCTION LPAREN RPAREN block
    (80) anon_function_expr -> . FUNCTION LPAREN RPAREN NEWLINE block
    (81) anon_function_expr -> . FUNCTION LPAREN function_argument_list RPAREN block
    (82) anon_function_expr -> . FUNCTION LPAREN function_argument_list RPAREN NEWLINE block
    (54) expr_expansion -> . EOPEN command RPAREN

    LPAREN          shift and go to state 35
    COPEN           shift and go to state 60
    ATOM            shift and go to state 38
    NUMBER          shift and go to state 43
    HEXNUMBER       shift and go to state 57
    BINNUMBER       shift and go to state 58
    OCTNUMBER       shift and go to state 54
    STRING          shift and go to state 44
    TRUE            shift and go to state 46
    FALSE           shift and go to state 51
    NULL            shift and go to state 56
    LBRACKET        shift and go to state 52
    LBRACE          shift and go to state 47
    MINUS           shift and go to state 40
    NOT             shift and go to state 45
    FUNCTION        shift and go to state 53
    EOPEN           shift and go to state 55

    expr_expansion                 shift and go to state 39
    binary_expr                    shift and go to state 33
    symbol                         shift and go to state 50
    unary_expr                     shift and go to state 42
    literal                        shift and go to state 34
    expr                           shift and go to state 125
    array_literal                  shift and go to state 49
    subscript_expr                 shift and go to state 59
    anon_function_expr             shift and go to state 41
    call                           shift and go to state 36
    dict_literal                   shift and go to state 37

state 64

    (74) call -> ATOM LPAREN . RPAREN
    (75) call -> ATOM LPAREN . expr_list RPAREN
    (40) expr_list -> . expr
    (41) expr_list -> . expr COMMA expr_list
    (42) expr -> . symbol
    (43) expr -> . literal
    (44) expr -> . array_literal
    (45) expr -> . dict_literal
    (46) expr -> . unary_expr
    (47) expr -> . binary_expr
    (48) expr -> . call
    (49) expr -> . subscript_expr
    (50) expr -> . anon_function_expr
    (51) expr -> . expr_expansion
    (52) expr -> . LPAREN expr RPAREN
    (53) expr -> . COPEN expr RBRACE
    (73) symbol -> . ATOM
    (65) literal -> . NUMBER
    (66) literal -> . HEXNUMBER
    (67) literal -> . BINNUMBER
    (68) literal -> . OCTNUMBER
    (69) literal -> . STRING
    (70) literal -> . TRUE
    (71) literal -> . FALSE
    (72) literal -> . NULL
    (55) array_literal -> . LBRACKET RBRACKET
    (56) array_literal -> . LBRACKET expr_list RBRACKET
    (57) dict_literal -> . LBRACE RBRACE
    (58) dict_literal -> . LBRACE NEWLINE RBRACE
    (59) dict_literal -> . LBRACE dict_pair_list RBRACE
    (83) unary_expr -> . MINUS expr
    (84) unary_expr -> . NOT expr
    (85) binary_expr -> . expr EQ expr
    (86) binary_expr -> . expr NE expr
    (87) binary_expr -> . expr GT expr
    (88) binary_expr -> . expr GE expr
    (89) binary_expr -> . expr LT expr
    (90) binary_expr -> . expr LE expr
    (91) binary_expr -> . expr PLUS expr
    (92) binary_expr -> . expr MINUS expr
    (93) binary_expr -> . expr MUL expr
    (94) binary_expr -> . expr DIV expr
    (95) binary_expr -> . expr REGEX expr
    (96) binary_expr -> . expr AND expr
    (97) binary_expr -> . expr OR expr
    (98) binary_expr -> . expr NOT expr
    (99) binary_expr -> . expr MOD expr
    (74) call -> . ATOM LPAREN RPAREN
    (75) call -> . ATOM LPAREN expr_list RPAREN
    (78) subscript_expr -> . expr LBRACKET expr RBRACKET
    (79) anon_function_expr -> . FUNCTION LPAREN RPAREN block
    (80) anon_function_expr -> . FUNCTION LPAREN RPAREN NEWLINE block
    (81) anon_function_expr -> . FUNCTION LPAREN function_argument_list RPAREN block
    (82) anon_function_expr -> . FUNCTION LPAREN function_argument_list RPAREN NEWLINE block
    (54) expr_expansion -> . EOPEN command RPAREN

    RPAREN          shift and go to state 127
    LPAREN          shift and go to state 35
    COPEN           shift and go to state 60
    ATOM            shift and go to state 38
    NUMBER          shift and go to state 43
    HEXNUMBER       shift and go to state 57
    BINNUMBER       shift and go to state 58
    OCTNUMBER       shift and go to state 54
    STRING          shift and go to state 44
    TRUE            shift and go to state 46
    FALSE           shift and go to state 51
    NULL            shift and go to state 56
    LBRACKET        shift and go to state 52
    LBRACE          shift and go to state 47
    MINUS           shift and go to state 40
    NOT             shift and go to state 45
    FUNCTION        shift and go to state 53
    EOPEN           shift and go to state 55

    expr_expansion                 shift and go to state 39
    binary_expr                    shift and go to state 33
    unary_expr                     shift and go to state 42
    literal                        shift and go to state 34
    expr                           shift and go to state 117
    expr_list                      shift and go to state 126
    array_literal                  shift and go to state 49
    subscript_expr                 shift and go to state 59
    symbol                         shift and go to state 50
    anon_function_expr             shift and go to state 41
    call                           shift and go to state 36
    dict_literal                   shift and go to state 37

state 65

    (28) assignment_stmt -> ATOM ASSIGN . expr
    (42) expr -> . symbol
    (43) expr -> . literal
    (44) expr -> . array_literal
    (45) expr -> . dict_literal
    (46) expr -> . unary_expr
    (47) expr -> . binary_expr
    (48) expr -> . call
    (49) expr -> . subscript_expr
    (50) expr -> . anon_function_expr
    (51) expr -> . expr_expansion
    (52) expr -> . LPAREN expr RPAREN
    (53) expr -> . COPEN expr RBRACE
    (73) symbol -> . ATOM
    (65) literal -> . NUMBER
    (66) literal -> . HEXNUMBER
    (67) literal -> . BINNUMBER
    (68) literal -> . OCTNUMBER
    (69) literal -> . STRING
    (70) literal -> . TRUE
    (71) literal -> . FALSE
    (72) literal -> . NULL
    (55) array_literal -> . LBRACKET RBRACKET
    (56) array_literal -> . LBRACKET expr_list RBRACKET
    (57) dict_literal -> . LBRACE RBRACE
    (58) dict_literal -> . LBRACE NEWLINE RBRACE
    (59) dict_literal -> . LBRACE dict_pair_list RBRACE
    (83) unary_expr -> . MINUS expr
    (84) unary_expr -> . NOT expr
    (85) binary_expr -> . expr EQ expr
    (86) binary_expr -> . expr NE expr
    (87) binary_expr -> . expr GT expr
    (88) binary_expr -> . expr GE expr
    (89) binary_expr -> . expr LT expr
    (90) binary_expr -> . expr LE expr
    (91) binary_expr -> . expr PLUS expr
    (92) binary_expr -> . expr MINUS expr
    (93) binary_expr -> . expr MUL expr
    (94) binary_expr -> . expr DIV expr
    (95) binary_expr -> . expr REGEX expr
    (96) binary_expr -> . expr AND expr
    (97) binary_expr -> . expr OR expr
    (98) binary_expr -> . expr NOT expr
    (99) binary_expr -> . expr MOD expr
    (74) call -> . ATOM LPAREN RPAREN
    (75) call -> . ATOM LPAREN expr_list RPAREN
    (78) subscript_expr -> . expr LBRACKET expr RBRACKET
    (79) anon_function_expr -> . FUNCTION LPAREN RPAREN block
    (80) anon_function_expr -> . FUNCTION LPAREN RPAREN NEWLINE block
    (81) anon_function_expr -> . FUNCTION LPAREN function_argument_list RPAREN block
    (82) anon_function_expr -> . FUNCTION LPAREN function_argument_list RPAREN NEWLINE block
    (54) expr_expansion -> . EOPEN command RPAREN

    LPAREN          shift and go to state 35
    COPEN           shift and go to state 60
    ATOM            shift and go to state 38
    NUMBER          shift and go to state 43
    HEXNUMBER       shift and go to state 57
    BINNUMBER       shift and go to state 58
    OCTNUMBER       shift and go to state 54
    STRING          shift and go to state 44
    TRUE            shift and go to state 46
    FALSE           shift and go to state 51
    NULL            shift and go to state 56
    LBRACKET        shift and go to state 52
    LBRACE          shift and go to state 47
    MINUS           shift and go to state 40
    NOT             shift and go to state 45
    FUNCTION        shift and go to state 53
    EOPEN           shift and go to state 55

    binary_expr                    shift and go to state 33
    expr_expansion                 shift and go to state 39
    literal                        shift and go to state 34
    expr                           shift and go to state 128
    array_literal                  shift and go to state 49
    subscript_expr                 shift and go to state 59
    symbol                         shift and go to state 50
    anon_function_expr             shift and go to state 41
    call                           shift and go to state 36
    dict_literal                   shift and go to state 37
    unary_expr                     shift and go to state 42

state 66

    (23) if_stmt -> IF LPAREN . expr RPAREN block
    (24) if_stmt -> IF LPAREN . expr RPAREN block ELSE block
    (42) expr -> . symbol
    (43) expr -> . literal
    (44) expr -> . array_literal
    (45) expr -> . dict_literal
    (46) expr -> . unary_expr
    (47) expr -> . binary_expr
    (48) expr -> . call
    (49) expr -> . subscript_expr
    (50) expr -> . anon_function_expr
    (51) expr -> . expr_expansion
    (52) expr -> . LPAREN expr RPAREN
    (53) expr -> . COPEN expr RBRACE
    (73) symbol -> . ATOM
    (65) literal -> . NUMBER
    (66) literal -> . HEXNUMBER
    (67) literal -> . BINNUMBER
    (68) literal -> . OCTNUMBER
    (69) literal -> . STRING
    (70) literal -> . TRUE
    (71) literal -> . FALSE
    (72) literal -> . NULL
    (55) array_literal -> . LBRACKET RBRACKET
    (56) array_literal -> . LBRACKET expr_list RBRACKET
    (57) dict_literal -> . LBRACE RBRACE
    (58) dict_literal -> . LBRACE NEWLINE RBRACE
    (59) dict_literal -> . LBRACE dict_pair_list RBRACE
    (83) unary_expr -> . MINUS expr
    (84) unary_expr -> . NOT expr
    (85) binary_expr -> . expr EQ expr
    (86) binary_expr -> . expr NE expr
    (87) binary_expr -> . expr GT expr
    (88) binary_expr -> . expr GE expr
    (89) binary_expr -> . expr LT expr
    (90) binary_expr -> . expr LE expr
    (91) binary_expr -> . expr PLUS expr
    (92) binary_expr -> . expr MINUS expr
    (93) binary_expr -> . expr MUL expr
    (94) binary_expr -> . expr DIV expr
    (95) binary_expr -> . expr REGEX expr
    (96) binary_expr -> . expr AND expr
    (97) binary_expr -> . expr OR expr
    (98) binary_expr -> . expr NOT expr
    (99) binary_expr -> . expr MOD expr
    (74) call -> . ATOM LPAREN RPAREN
    (75) call -> . ATOM LPAREN expr_list RPAREN
    (78) subscript_expr -> . expr LBRACKET expr RBRACKET
    (79) anon_function_expr -> . FUNCTION LPAREN RPAREN block
    (80) anon_function_expr -> . FUNCTION LPAREN RPAREN NEWLINE block
    (81) anon_function_expr -> . FUNCTION LPAREN function_argument_list RPAREN block
    (82) anon_function_expr -> . FUNCTION LPAREN function_argument_list RPAREN NEWLINE block
    (54) expr_expansion -> . EOPEN command RPAREN

    LPAREN          shift and go to state 35
    COPEN           shift and go to state 60
    ATOM            shift and go to state 38
    NUMBER          shift and go to state 43
    HEXNUMBER       shift and go to state 57
    BINNUMBER       shift and go to state 58
    OCTNUMBER       shift and go to state 54
    STRING          shift and go to state 44
    TRUE            shift and go to state 46
    FALSE           shift and go to state 51
    NULL            shift and go to state 56
    LBRACKET        shift and go to state 52
    LBRACE          shift and go to state 47
    MINUS           shift and go to state 40
    NOT             shift and go to state 45
    FUNCTION        shift and go to state 53
    EOPEN           shift and go to state 55

    expr_expansion                 shift and go to state 39
    unary_expr                     shift and go to state 42
    literal                        shift and go to state 34
    expr                           shift and go to state 129
    array_literal                  shift and go to state 49
    subscript_expr                 shift and go to state 59
    symbol                         shift and go to state 50
    anon_function_expr             shift and go to state 41
    binary_expr                    shift and go to state 33
    call                           shift and go to state 36
    dict_literal                   shift and go to state 37

state 67

    (136) shell -> SHELL parameter_list .

    REDIRECT        reduce using rule 136 (shell -> SHELL parameter_list .)
    NEWLINE         reduce using rule 136 (shell -> SHELL parameter_list .)
    RBRACE          reduce using rule 136 (shell -> SHELL parameter_list .)
    $end            reduce using rule 136 (shell -> SHELL parameter_list .)


state 68

    (110) parameter_list -> parameter .
    (111) parameter_list -> parameter . parameter_list
    (110) parameter_list -> . parameter
    (111) parameter_list -> . parameter parameter_list
    (112) parameter -> . set_parameter
    (113) parameter -> . binary_parameter
    (114) parameter -> . error
    (115) set_parameter -> . unary_parameter
    (116) set_parameter -> . unary_parameter COMMA set_parameter
    (117) set_parameter -> . unary_parameter COMMA error
    (125) binary_parameter -> . ATOM ASSIGN parameter
    (126) binary_parameter -> . ATOM EQ parameter
    (127) binary_parameter -> . ATOM NE parameter
    (128) binary_parameter -> . ATOM GT parameter
    (129) binary_parameter -> . ATOM GE parameter
    (130) binary_parameter -> . ATOM LT parameter
    (131) binary_parameter -> . ATOM LE parameter
    (132) binary_parameter -> . ATOM REGEX parameter
    (133) binary_parameter -> . ATOM INC parameter
    (134) binary_parameter -> . ATOM DEC parameter
    (118) unary_parameter -> . symbol
    (119) unary_parameter -> . literal
    (120) unary_parameter -> . array_literal
    (121) unary_parameter -> . dict_literal
    (122) unary_parameter -> . COPEN expr RBRACE
    (123) unary_parameter -> . LIST
    (124) unary_parameter -> . UP
    (73) symbol -> . ATOM
    (65) literal -> . NUMBER
    (66) literal -> . HEXNUMBER
    (67) literal -> . BINNUMBER
    (68) literal -> . OCTNUMBER
    (69) literal -> . STRING
    (70) literal -> . TRUE
    (71) literal -> . FALSE
    (72) literal -> . NULL
    (55) array_literal -> . LBRACKET RBRACKET
    (56) array_literal -> . LBRACKET expr_list RBRACKET
    (57) dict_literal -> . LBRACE RBRACE
    (58) dict_literal -> . LBRACE NEWLINE RBRACE
    (59) dict_literal -> . LBRACE dict_pair_list RBRACE

    PIPE            reduce using rule 110 (parameter_list -> parameter .)
    REDIRECT        reduce using rule 110 (parameter_list -> parameter .)
    NEWLINE         reduce using rule 110 (parameter_list -> parameter .)
    $end            reduce using rule 110 (parameter_list -> parameter .)
    RBRACE          reduce using rule 110 (parameter_list -> parameter .)
    RPAREN          reduce using rule 110 (parameter_list -> parameter .)
    error           shift and go to state 77
    ATOM            shift and go to state 74
    COPEN           shift and go to state 80
    LIST            shift and go to state 76
    UP              shift and go to state 73
    NUMBER          shift and go to state 43
    HEXNUMBER       shift and go to state 57
    BINNUMBER       shift and go to state 58
    OCTNUMBER       shift and go to state 54
    STRING          shift and go to state 44
    TRUE            shift and go to state 46
    FALSE           shift and go to state 51
    NULL            shift and go to state 56
    LBRACKET        shift and go to state 52
    LBRACE          shift and go to state 47

    parameter_list                 shift and go to state 130
    unary_parameter                shift and go to state 79
    parameter                      shift and go to state 68
    binary_parameter               shift and go to state 69
    array_literal                  shift and go to state 70
    set_parameter                  shift and go to state 78
    symbol                         shift and go to state 71
    literal                        shift and go to state 72
    dict_literal                   shift and go to state 75

state 69

    (113) parameter -> binary_parameter .

    error           reduce using rule 113 (parameter -> binary_parameter .)
    ATOM            reduce using rule 113 (parameter -> binary_parameter .)
    COPEN           reduce using rule 113 (parameter -> binary_parameter .)
    LIST            reduce using rule 113 (parameter -> binary_parameter .)
    UP              reduce using rule 113 (parameter -> binary_parameter .)
    NUMBER          reduce using rule 113 (parameter -> binary_parameter .)
    HEXNUMBER       reduce using rule 113 (parameter -> binary_parameter .)
    BINNUMBER       reduce using rule 113 (parameter -> binary_parameter .)
    OCTNUMBER       reduce using rule 113 (parameter -> binary_parameter .)
    STRING          reduce using rule 113 (parameter -> binary_parameter .)
    TRUE            reduce using rule 113 (parameter -> binary_parameter .)
    FALSE           reduce using rule 113 (parameter -> binary_parameter .)
    NULL            reduce using rule 113 (parameter -> binary_parameter .)
    LBRACKET        reduce using rule 113 (parameter -> binary_parameter .)
    LBRACE          reduce using rule 113 (parameter -> binary_parameter .)
    REDIRECT        reduce using rule 113 (parameter -> binary_parameter .)
    NEWLINE         reduce using rule 113 (parameter -> binary_parameter .)
    $end            reduce using rule 113 (parameter -> binary_parameter .)
    RBRACE          reduce using rule 113 (parameter -> binary_parameter .)
    PIPE            reduce using rule 113 (parameter -> binary_parameter .)
    RPAREN          reduce using rule 113 (parameter -> binary_parameter .)


state 70

    (120) unary_parameter -> array_literal .

    COMMA           reduce using rule 120 (unary_parameter -> array_literal .)
    error           reduce using rule 120 (unary_parameter -> array_literal .)
    ATOM            reduce using rule 120 (unary_parameter -> array_literal .)
    COPEN           reduce using rule 120 (unary_parameter -> array_literal .)
    LIST            reduce using rule 120 (unary_parameter -> array_literal .)
    UP              reduce using rule 120 (unary_parameter -> array_literal .)
    NUMBER          reduce using rule 120 (unary_parameter -> array_literal .)
    HEXNUMBER       reduce using rule 120 (unary_parameter -> array_literal .)
    BINNUMBER       reduce using rule 120 (unary_parameter -> array_literal .)
    OCTNUMBER       reduce using rule 120 (unary_parameter -> array_literal .)
    STRING          reduce using rule 120 (unary_parameter -> array_literal .)
    TRUE            reduce using rule 120 (unary_parameter -> array_literal .)
    FALSE           reduce using rule 120 (unary_parameter -> array_literal .)
    NULL            reduce using rule 120 (unary_parameter -> array_literal .)
    LBRACKET        reduce using rule 120 (unary_parameter -> array_literal .)
    LBRACE          reduce using rule 120 (unary_parameter -> array_literal .)
    REDIRECT        reduce using rule 120 (unary_parameter -> array_literal .)
    NEWLINE         reduce using rule 120 (unary_parameter -> array_literal .)
    $end            reduce using rule 120 (unary_parameter -> array_literal .)
    RBRACE          reduce using rule 120 (unary_parameter -> array_literal .)
    PIPE            reduce using rule 120 (unary_parameter -> array_literal .)
    RPAREN          reduce using rule 120 (unary_parameter -> array_literal .)


state 71

    (118) unary_parameter -> symbol .

    COMMA           reduce using rule 118 (unary_parameter -> symbol .)
    error           reduce using rule 118 (unary_parameter -> symbol .)
    ATOM            reduce using rule 118 (unary_parameter -> symbol .)
    COPEN           reduce using rule 118 (unary_parameter -> symbol .)
    LIST            reduce using rule 118 (unary_parameter -> symbol .)
    UP              reduce using rule 118 (unary_parameter -> symbol .)
    NUMBER          reduce using rule 118 (unary_parameter -> symbol .)
    HEXNUMBER       reduce using rule 118 (unary_parameter -> symbol .)
    BINNUMBER       reduce using rule 118 (unary_parameter -> symbol .)
    OCTNUMBER       reduce using rule 118 (unary_parameter -> symbol .)
    STRING          reduce using rule 118 (unary_parameter -> symbol .)
    TRUE            reduce using rule 118 (unary_parameter -> symbol .)
    FALSE           reduce using rule 118 (unary_parameter -> symbol .)
    NULL            reduce using rule 118 (unary_parameter -> symbol .)
    LBRACKET        reduce using rule 118 (unary_parameter -> symbol .)
    LBRACE          reduce using rule 118 (unary_parameter -> symbol .)
    REDIRECT        reduce using rule 118 (unary_parameter -> symbol .)
    NEWLINE         reduce using rule 118 (unary_parameter -> symbol .)
    $end            reduce using rule 118 (unary_parameter -> symbol .)
    RBRACE          reduce using rule 118 (unary_parameter -> symbol .)
    PIPE            reduce using rule 118 (unary_parameter -> symbol .)
    RPAREN          reduce using rule 118 (unary_parameter -> symbol .)


state 72

    (119) unary_parameter -> literal .

    COMMA           reduce using rule 119 (unary_parameter -> literal .)
    error           reduce using rule 119 (unary_parameter -> literal .)
    ATOM            reduce using rule 119 (unary_parameter -> literal .)
    COPEN           reduce using rule 119 (unary_parameter -> literal .)
    LIST            reduce using rule 119 (unary_parameter -> literal .)
    UP              reduce using rule 119 (unary_parameter -> literal .)
    NUMBER          reduce using rule 119 (unary_parameter -> literal .)
    HEXNUMBER       reduce using rule 119 (unary_parameter -> literal .)
    BINNUMBER       reduce using rule 119 (unary_parameter -> literal .)
    OCTNUMBER       reduce using rule 119 (unary_parameter -> literal .)
    STRING          reduce using rule 119 (unary_parameter -> literal .)
    TRUE            reduce using rule 119 (unary_parameter -> literal .)
    FALSE           reduce using rule 119 (unary_parameter -> literal .)
    NULL            reduce using rule 119 (unary_parameter -> literal .)
    LBRACKET        reduce using rule 119 (unary_parameter -> literal .)
    LBRACE          reduce using rule 119 (unary_parameter -> literal .)
    REDIRECT        reduce using rule 119 (unary_parameter -> literal .)
    NEWLINE         reduce using rule 119 (unary_parameter -> literal .)
    $end            reduce using rule 119 (unary_parameter -> literal .)
    RBRACE          reduce using rule 119 (unary_parameter -> literal .)
    PIPE            reduce using rule 119 (unary_parameter -> literal .)
    RPAREN          reduce using rule 119 (unary_parameter -> literal .)


state 73

    (124) unary_parameter -> UP .

    COMMA           reduce using rule 124 (unary_parameter -> UP .)
    error           reduce using rule 124 (unary_parameter -> UP .)
    ATOM            reduce using rule 124 (unary_parameter -> UP .)
    COPEN           reduce using rule 124 (unary_parameter -> UP .)
    LIST            reduce using rule 124 (unary_parameter -> UP .)
    UP              reduce using rule 124 (unary_parameter -> UP .)
    NUMBER          reduce using rule 124 (unary_parameter -> UP .)
    HEXNUMBER       reduce using rule 124 (unary_parameter -> UP .)
    BINNUMBER       reduce using rule 124 (unary_parameter -> UP .)
    OCTNUMBER       reduce using rule 124 (unary_parameter -> UP .)
    STRING          reduce using rule 124 (unary_parameter -> UP .)
    TRUE            reduce using rule 124 (unary_parameter -> UP .)
    FALSE           reduce using rule 124 (unary_parameter -> UP .)
    NULL            reduce using rule 124 (unary_parameter -> UP .)
    LBRACKET        reduce using rule 124 (unary_parameter -> UP .)
    LBRACE          reduce using rule 124 (unary_parameter -> UP .)
    REDIRECT        reduce using rule 124 (unary_parameter -> UP .)
    NEWLINE         reduce using rule 124 (unary_parameter -> UP .)
    $end            reduce using rule 124 (unary_parameter -> UP .)
    RBRACE          reduce using rule 124 (unary_parameter -> UP .)
    PIPE            reduce using rule 124 (unary_parameter -> UP .)
    RPAREN          reduce using rule 124 (unary_parameter -> UP .)


state 74

    (125) binary_parameter -> ATOM . ASSIGN parameter
    (126) binary_parameter -> ATOM . EQ parameter
    (127) binary_parameter -> ATOM . NE parameter
    (128) binary_parameter -> ATOM . GT parameter
    (129) binary_parameter -> ATOM . GE parameter
    (130) binary_parameter -> ATOM . LT parameter
    (131) binary_parameter -> ATOM . LE parameter
    (132) binary_parameter -> ATOM . REGEX parameter
    (133) binary_parameter -> ATOM . INC parameter
    (134) binary_parameter -> ATOM . DEC parameter
    (73) symbol -> ATOM .

    ASSIGN          shift and go to state 135
    EQ              shift and go to state 131
    NE              shift and go to state 132
    GT              shift and go to state 134
    GE              shift and go to state 137
    LT              shift and go to state 138
    LE              shift and go to state 136
    REGEX           shift and go to state 140
    INC             shift and go to state 133
    DEC             shift and go to state 139
    COMMA           reduce using rule 73 (symbol -> ATOM .)
    error           reduce using rule 73 (symbol -> ATOM .)
    ATOM            reduce using rule 73 (symbol -> ATOM .)
    COPEN           reduce using rule 73 (symbol -> ATOM .)
    LIST            reduce using rule 73 (symbol -> ATOM .)
    UP              reduce using rule 73 (symbol -> ATOM .)
    NUMBER          reduce using rule 73 (symbol -> ATOM .)
    HEXNUMBER       reduce using rule 73 (symbol -> ATOM .)
    BINNUMBER       reduce using rule 73 (symbol -> ATOM .)
    OCTNUMBER       reduce using rule 73 (symbol -> ATOM .)
    STRING          reduce using rule 73 (symbol -> ATOM .)
    TRUE            reduce using rule 73 (symbol -> ATOM .)
    FALSE           reduce using rule 73 (symbol -> ATOM .)
    NULL            reduce using rule 73 (symbol -> ATOM .)
    LBRACKET        reduce using rule 73 (symbol -> ATOM .)
    LBRACE          reduce using rule 73 (symbol -> ATOM .)
    REDIRECT        reduce using rule 73 (symbol -> ATOM .)
    NEWLINE         reduce using rule 73 (symbol -> ATOM .)
    $end            reduce using rule 73 (symbol -> ATOM .)
    RBRACE          reduce using rule 73 (symbol -> ATOM .)
    PIPE            reduce using rule 73 (symbol -> ATOM .)
    RPAREN          reduce using rule 73 (symbol -> ATOM .)


state 75

    (121) unary_parameter -> dict_literal .

    COMMA           reduce using rule 121 (unary_parameter -> dict_literal .)
    error           reduce using rule 121 (unary_parameter -> dict_literal .)
    ATOM            reduce using rule 121 (unary_parameter -> dict_literal .)
    COPEN           reduce using rule 121 (unary_parameter -> dict_literal .)
    LIST            reduce using rule 121 (unary_parameter -> dict_literal .)
    UP              reduce using rule 121 (unary_parameter -> dict_literal .)
    NUMBER          reduce using rule 121 (unary_parameter -> dict_literal .)
    HEXNUMBER       reduce using rule 121 (unary_parameter -> dict_literal .)
    BINNUMBER       reduce using rule 121 (unary_parameter -> dict_literal .)
    OCTNUMBER       reduce using rule 121 (unary_parameter -> dict_literal .)
    STRING          reduce using rule 121 (unary_parameter -> dict_literal .)
    TRUE            reduce using rule 121 (unary_parameter -> dict_literal .)
    FALSE           reduce using rule 121 (unary_parameter -> dict_literal .)
    NULL            reduce using rule 121 (unary_parameter -> dict_literal .)
    LBRACKET        reduce using rule 121 (unary_parameter -> dict_literal .)
    LBRACE          reduce using rule 121 (unary_parameter -> dict_literal .)
    REDIRECT        reduce using rule 121 (unary_parameter -> dict_literal .)
    NEWLINE         reduce using rule 121 (unary_parameter -> dict_literal .)
    $end            reduce using rule 121 (unary_parameter -> dict_literal .)
    RBRACE          reduce using rule 121 (unary_parameter -> dict_literal .)
    PIPE            reduce using rule 121 (unary_parameter -> dict_literal .)
    RPAREN          reduce using rule 121 (unary_parameter -> dict_literal .)


state 76

    (123) unary_parameter -> LIST .

    COMMA           reduce using rule 123 (unary_parameter -> LIST .)
    error           reduce using rule 123 (unary_parameter -> LIST .)
    ATOM            reduce using rule 123 (unary_parameter -> LIST .)
    COPEN           reduce using rule 123 (unary_parameter -> LIST .)
    LIST            reduce using rule 123 (unary_parameter -> LIST .)
    UP              reduce using rule 123 (unary_parameter -> LIST .)
    NUMBER          reduce using rule 123 (unary_parameter -> LIST .)
    HEXNUMBER       reduce using rule 123 (unary_parameter -> LIST .)
    BINNUMBER       reduce using rule 123 (unary_parameter -> LIST .)
    OCTNUMBER       reduce using rule 123 (unary_parameter -> LIST .)
    STRING          reduce using rule 123 (unary_parameter -> LIST .)
    TRUE            reduce using rule 123 (unary_parameter -> LIST .)
    FALSE           reduce using rule 123 (unary_parameter -> LIST .)
    NULL            reduce using rule 123 (unary_parameter -> LIST .)
    LBRACKET        reduce using rule 123 (unary_parameter -> LIST .)
    LBRACE          reduce using rule 123 (unary_parameter -> LIST .)
    REDIRECT        reduce using rule 123 (unary_parameter -> LIST .)
    NEWLINE         reduce using rule 123 (unary_parameter -> LIST .)
    $end            reduce using rule 123 (unary_parameter -> LIST .)
    RBRACE          reduce using rule 123 (unary_parameter -> LIST .)
    PIPE            reduce using rule 123 (unary_parameter -> LIST .)
    RPAREN          reduce using rule 123 (unary_parameter -> LIST .)


state 77

    (114) parameter -> error .

    error           reduce using rule 114 (parameter -> error .)
    ATOM            reduce using rule 114 (parameter -> error .)
    COPEN           reduce using rule 114 (parameter -> error .)
    LIST            reduce using rule 114 (parameter -> error .)
    UP              reduce using rule 114 (parameter -> error .)
    NUMBER          reduce using rule 114 (parameter -> error .)
    HEXNUMBER       reduce using rule 114 (parameter -> error .)
    BINNUMBER       reduce using rule 114 (parameter -> error .)
    OCTNUMBER       reduce using rule 114 (parameter -> error .)
    STRING          reduce using rule 114 (parameter -> error .)
    TRUE            reduce using rule 114 (parameter -> error .)
    FALSE           reduce using rule 114 (parameter -> error .)
    NULL            reduce using rule 114 (parameter -> error .)
    LBRACKET        reduce using rule 114 (parameter -> error .)
    LBRACE          reduce using rule 114 (parameter -> error .)
    REDIRECT        reduce using rule 114 (parameter -> error .)
    NEWLINE         reduce using rule 114 (parameter -> error .)
    $end            reduce using rule 114 (parameter -> error .)
    RBRACE          reduce using rule 114 (parameter -> error .)
    PIPE            reduce using rule 114 (parameter -> error .)
    RPAREN          reduce using rule 114 (parameter -> error .)


state 78

    (112) parameter -> set_parameter .

    error           reduce using rule 112 (parameter -> set_parameter .)
    ATOM            reduce using rule 112 (parameter -> set_parameter .)
    COPEN           reduce using rule 112 (parameter -> set_parameter .)
    LIST            reduce using rule 112 (parameter -> set_parameter .)
    UP              reduce using rule 112 (parameter -> set_parameter .)
    NUMBER          reduce using rule 112 (parameter -> set_parameter .)
    HEXNUMBER       reduce using rule 112 (parameter -> set_parameter .)
    BINNUMBER       reduce using rule 112 (parameter -> set_parameter .)
    OCTNUMBER       reduce using rule 112 (parameter -> set_parameter .)
    STRING          reduce using rule 112 (parameter -> set_parameter .)
    TRUE            reduce using rule 112 (parameter -> set_parameter .)
    FALSE           reduce using rule 112 (parameter -> set_parameter .)
    NULL            reduce using rule 112 (parameter -> set_parameter .)
    LBRACKET        reduce using rule 112 (parameter -> set_parameter .)
    LBRACE          reduce using rule 112 (parameter -> set_parameter .)
    REDIRECT        reduce using rule 112 (parameter -> set_parameter .)
    NEWLINE         reduce using rule 112 (parameter -> set_parameter .)
    $end            reduce using rule 112 (parameter -> set_parameter .)
    RBRACE          reduce using rule 112 (parameter -> set_parameter .)
    PIPE            reduce using rule 112 (parameter -> set_parameter .)
    RPAREN          reduce using rule 112 (parameter -> set_parameter .)


state 79

    (115) set_parameter -> unary_parameter .
    (116) set_parameter -> unary_parameter . COMMA set_parameter
    (117) set_parameter -> unary_parameter . COMMA error

    error           reduce using rule 115 (set_parameter -> unary_parameter .)
    ATOM            reduce using rule 115 (set_parameter -> unary_parameter .)
    COPEN           reduce using rule 115 (set_parameter -> unary_parameter .)
    LIST            reduce using rule 115 (set_parameter -> unary_parameter .)
    UP              reduce using rule 115 (set_parameter -> unary_parameter .)
    NUMBER          reduce using rule 115 (set_parameter -> unary_parameter .)
    HEXNUMBER       reduce using rule 115 (set_parameter -> unary_parameter .)
    BINNUMBER       reduce using rule 115 (set_parameter -> unary_parameter .)
    OCTNUMBER       reduce using rule 115 (set_parameter -> unary_parameter .)
    STRING          reduce using rule 115 (set_parameter -> unary_parameter .)
    TRUE            reduce using rule 115 (set_parameter -> unary_parameter .)
    FALSE           reduce using rule 115 (set_parameter -> unary_parameter .)
    NULL            reduce using rule 115 (set_parameter -> unary_parameter .)
    LBRACKET        reduce using rule 115 (set_parameter -> unary_parameter .)
    LBRACE          reduce using rule 115 (set_parameter -> unary_parameter .)
    REDIRECT        reduce using rule 115 (set_parameter -> unary_parameter .)
    NEWLINE         reduce using rule 115 (set_parameter -> unary_parameter .)
    $end            reduce using rule 115 (set_parameter -> unary_parameter .)
    RBRACE          reduce using rule 115 (set_parameter -> unary_parameter .)
    PIPE            reduce using rule 115 (set_parameter -> unary_parameter .)
    RPAREN          reduce using rule 115 (set_parameter -> unary_parameter .)
    COMMA           shift and go to state 141


state 80

    (122) unary_parameter -> COPEN . expr RBRACE
    (42) expr -> . symbol
    (43) expr -> . literal
    (44) expr -> . array_literal
    (45) expr -> . dict_literal
    (46) expr -> . unary_expr
    (47) expr -> . binary_expr
    (48) expr -> . call
    (49) expr -> . subscript_expr
    (50) expr -> . anon_function_expr
    (51) expr -> . expr_expansion
    (52) expr -> . LPAREN expr RPAREN
    (53) expr -> . COPEN expr RBRACE
    (73) symbol -> . ATOM
    (65) literal -> . NUMBER
    (66) literal -> . HEXNUMBER
    (67) literal -> . BINNUMBER
    (68) literal -> . OCTNUMBER
    (69) literal -> . STRING
    (70) literal -> . TRUE
    (71) literal -> . FALSE
    (72) literal -> . NULL
    (55) array_literal -> . LBRACKET RBRACKET
    (56) array_literal -> . LBRACKET expr_list RBRACKET
    (57) dict_literal -> . LBRACE RBRACE
    (58) dict_literal -> . LBRACE NEWLINE RBRACE
    (59) dict_literal -> . LBRACE dict_pair_list RBRACE
    (83) unary_expr -> . MINUS expr
    (84) unary_expr -> . NOT expr
    (85) binary_expr -> . expr EQ expr
    (86) binary_expr -> . expr NE expr
    (87) binary_expr -> . expr GT expr
    (88) binary_expr -> . expr GE expr
    (89) binary_expr -> . expr LT expr
    (90) binary_expr -> . expr LE expr
    (91) binary_expr -> . expr PLUS expr
    (92) binary_expr -> . expr MINUS expr
    (93) binary_expr -> . expr MUL expr
    (94) binary_expr -> . expr DIV expr
    (95) binary_expr -> . expr REGEX expr
    (96) binary_expr -> . expr AND expr
    (97) binary_expr -> . expr OR expr
    (98) binary_expr -> . expr NOT expr
    (99) binary_expr -> . expr MOD expr
    (74) call -> . ATOM LPAREN RPAREN
    (75) call -> . ATOM LPAREN expr_list RPAREN
    (78) subscript_expr -> . expr LBRACKET expr RBRACKET
    (79) anon_function_expr -> . FUNCTION LPAREN RPAREN block
    (80) anon_function_expr -> . FUNCTION LPAREN RPAREN NEWLINE block
    (81) anon_function_expr -> . FUNCTION LPAREN function_argument_list RPAREN block
    (82) anon_function_expr -> . FUNCTION LPAREN function_argument_list RPAREN NEWLINE block
    (54) expr_expansion -> . EOPEN command RPAREN

    LPAREN          shift and go to state 35
    COPEN           shift and go to state 60
    ATOM            shift and go to state 38
    NUMBER          shift and go to state 43
    HEXNUMBER       shift and go to state 57
    BINNUMBER       shift and go to state 58
    OCTNUMBER       shift and go to state 54
    STRING          shift and go to state 44
    TRUE            shift and go to state 46
    FALSE           shift and go to state 51
    NULL            shift and go to state 56
    LBRACKET        shift and go to state 52
    LBRACE          shift and go to state 47
    MINUS           shift and go to state 40
    NOT             shift and go to state 45
    FUNCTION        shift and go to state 53
    EOPEN           shift and go to state 55

    binary_expr                    shift and go to state 33
    expr_expansion                 shift and go to state 39
    literal                        shift and go to state 34
    expr                           shift and go to state 142
    array_literal                  shift and go to state 49
    subscript_expr                 shift and go to state 59
    symbol                         shift and go to state 50
    anon_function_expr             shift and go to state 41
    call                           shift and go to state 36
    dict_literal                   shift and go to state 37
    unary_expr                     shift and go to state 42

state 81

    (39) undef_stmt -> UNDEF ATOM .

    REDIRECT        reduce using rule 39 (undef_stmt -> UNDEF ATOM .)
    NEWLINE         reduce using rule 39 (undef_stmt -> UNDEF ATOM .)
    $end            reduce using rule 39 (undef_stmt -> UNDEF ATOM .)
    RBRACE          reduce using rule 39 (undef_stmt -> UNDEF ATOM .)


state 82

    (101) command -> command_item parameter_list .
    (103) command -> command_item parameter_list . PIPE command

    REDIRECT        reduce using rule 101 (command -> command_item parameter_list .)
    NEWLINE         reduce using rule 101 (command -> command_item parameter_list .)
    $end            reduce using rule 101 (command -> command_item parameter_list .)
    RBRACE          reduce using rule 101 (command -> command_item parameter_list .)
    RPAREN          reduce using rule 101 (command -> command_item parameter_list .)
    PIPE            shift and go to state 143


state 83

    (102) command -> command_item PIPE . command
    (100) command -> . command_item
    (101) command -> . command_item parameter_list
    (102) command -> . command_item PIPE command
    (103) command -> . command_item parameter_list PIPE command
    (104) command_item -> . LIST
    (105) command_item -> . NUMBER
    (106) command_item -> . UP
    (107) command_item -> . symbol
    (108) command_item -> . COPEN expr RBRACE
    (109) command_item -> . STRING
    (73) symbol -> . ATOM

    LIST            shift and go to state 8
    NUMBER          shift and go to state 26
    UP              shift and go to state 7
    COPEN           shift and go to state 31
    STRING          shift and go to state 19
    ATOM            shift and go to state 119

    command_item                   shift and go to state 18
    symbol                         shift and go to state 121
    command                        shift and go to state 144

state 84

    (4) stmt_list -> NEWLINE stmt_list .

    $end            reduce using rule 4 (stmt_list -> NEWLINE stmt_list .)
    RBRACE          reduce using rule 4 (stmt_list -> NEWLINE stmt_list .)


state 85

    (6) stmt_redirect -> stmt REDIRECT . ATOM
    (7) stmt_redirect -> stmt REDIRECT . STRING

    ATOM            shift and go to state 146
    STRING          shift and go to state 145


state 86

    (77) subscript_left -> symbol LBRACKET . expr RBRACKET
    (42) expr -> . symbol
    (43) expr -> . literal
    (44) expr -> . array_literal
    (45) expr -> . dict_literal
    (46) expr -> . unary_expr
    (47) expr -> . binary_expr
    (48) expr -> . call
    (49) expr -> . subscript_expr
    (50) expr -> . anon_function_expr
    (51) expr -> . expr_expansion
    (52) expr -> . LPAREN expr RPAREN
    (53) expr -> . COPEN expr RBRACE
    (73) symbol -> . ATOM
    (65) literal -> . NUMBER
    (66) literal -> . HEXNUMBER
    (67) literal -> . BINNUMBER
    (68) literal -> . OCTNUMBER
    (69) literal -> . STRING
    (70) literal -> . TRUE
    (71) literal -> . FALSE
    (72) literal -> . NULL
    (55) array_literal -> . LBRACKET RBRACKET
    (56) array_literal -> . LBRACKET expr_list RBRACKET
    (57) dict_literal -> . LBRACE RBRACE
    (58) dict_literal -> . LBRACE NEWLINE RBRACE
    (59) dict_literal -> . LBRACE dict_pair_list RBRACE
    (83) unary_expr -> . MINUS expr
    (84) unary_expr -> . NOT expr
    (85) binary_expr -> . expr EQ expr
    (86) binary_expr -> . expr NE expr
    (87) binary_expr -> . expr GT expr
    (88) binary_expr -> . expr GE expr
    (89) binary_expr -> . expr LT expr
    (90) binary_expr -> . expr LE expr
    (91) binary_expr -> . expr PLUS expr
    (92) binary_expr -> . expr MINUS expr
    (93) binary_expr -> . expr MUL expr
    (94) binary_expr -> . expr DIV expr
    (95) binary_expr -> . expr REGEX expr
    (96) binary_expr -> . expr AND expr
    (97) binary_expr -> . expr OR expr
    (98) binary_expr -> . expr NOT expr
    (99) binary_expr -> . expr MOD expr
    (74) call -> . ATOM LPAREN RPAREN
    (75) call -> . ATOM LPAREN expr_list RPAREN
    (78) subscript_expr -> . expr LBRACKET expr RBRACKET
    (79) anon_function_expr -> . FUNCTION LPAREN RPAREN block
    (80) anon_function_expr -> . FUNCTION LPAREN RPAREN NEWLINE block
    (81) anon_function_expr -> . FUNCTION LPAREN function_argument_list RPAREN block
    (82) anon_function_expr -> . FUNCTION LPAREN function_argument_list RPAREN NEWLINE block
    (54) expr_expansion -> . EOPEN command RPAREN

    LPAREN          shift and go to state 35
    COPEN           shift and go to state 60
    ATOM            shift and go to state 38
    NUMBER          shift and go to state 43
    HEXNUMBER       shift and go to state 57
    BINNUMBER       shift and go to state 58
    OCTNUMBER       shift and go to state 54
    STRING          shift and go to state 44
    TRUE            shift and go to state 46
    FALSE           shift and go to state 51
    NULL            shift and go to state 56
    LBRACKET        shift and go to state 52
    LBRACE          shift and go to state 47
    MINUS           shift and go to state 40
    NOT             shift and go to state 45
    FUNCTION        shift and go to state 53
    EOPEN           shift and go to state 55

    binary_expr                    shift and go to state 33
    expr_expansion                 shift and go to state 39
    literal                        shift and go to state 34
    expr                           shift and go to state 147
    array_literal                  shift and go to state 49
    subscript_expr                 shift and go to state 59
    symbol                         shift and go to state 50
    anon_function_expr             shift and go to state 41
    call                           shift and go to state 36
    dict_literal                   shift and go to state 37
    unary_expr                     shift and go to state 42

state 87

    (30) function_definition_stmt -> FUNCTION ATOM . LPAREN RPAREN block
    (31) function_definition_stmt -> FUNCTION ATOM . LPAREN function_argument_list RPAREN block
    (32) function_definition_stmt -> FUNCTION ATOM . LPAREN RPAREN NEWLINE block
    (33) function_definition_stmt -> FUNCTION ATOM . LPAREN function_argument_list RPAREN NEWLINE block

    LPAREN          shift and go to state 148


state 88

    (25) for_stmt -> FOR LPAREN . ATOM IN expr RPAREN block
    (26) for_stmt -> FOR LPAREN . ATOM COMMA ATOM IN expr RPAREN block

    ATOM            shift and go to state 149


state 89

    (27) while_stmt -> WHILE LPAREN . expr RPAREN block
    (42) expr -> . symbol
    (43) expr -> . literal
    (44) expr -> . array_literal
    (45) expr -> . dict_literal
    (46) expr -> . unary_expr
    (47) expr -> . binary_expr
    (48) expr -> . call
    (49) expr -> . subscript_expr
    (50) expr -> . anon_function_expr
    (51) expr -> . expr_expansion
    (52) expr -> . LPAREN expr RPAREN
    (53) expr -> . COPEN expr RBRACE
    (73) symbol -> . ATOM
    (65) literal -> . NUMBER
    (66) literal -> . HEXNUMBER
    (67) literal -> . BINNUMBER
    (68) literal -> . OCTNUMBER
    (69) literal -> . STRING
    (70) literal -> . TRUE
    (71) literal -> . FALSE
    (72) literal -> . NULL
    (55) array_literal -> . LBRACKET RBRACKET
    (56) array_literal -> . LBRACKET expr_list RBRACKET
    (57) dict_literal -> . LBRACE RBRACE
    (58) dict_literal -> . LBRACE NEWLINE RBRACE
    (59) dict_literal -> . LBRACE dict_pair_list RBRACE
    (83) unary_expr -> . MINUS expr
    (84) unary_expr -> . NOT expr
    (85) binary_expr -> . expr EQ expr
    (86) binary_expr -> . expr NE expr
    (87) binary_expr -> . expr GT expr
    (88) binary_expr -> . expr GE expr
    (89) binary_expr -> . expr LT expr
    (90) binary_expr -> . expr LE expr
    (91) binary_expr -> . expr PLUS expr
    (92) binary_expr -> . expr MINUS expr
    (93) binary_expr -> . expr MUL expr
    (94) binary_expr -> . expr DIV expr
    (95) binary_expr -> . expr REGEX expr
    (96) binary_expr -> . expr AND expr
    (97) binary_expr -> . expr OR expr
    (98) binary_expr -> . expr NOT expr
    (99) binary_expr -> . expr MOD expr
    (74) call -> . ATOM LPAREN RPAREN
    (75) call -> . ATOM LPAREN expr_list RPAREN
    (78) subscript_expr -> . expr LBRACKET expr RBRACKET
    (79) anon_function_expr -> . FUNCTION LPAREN RPAREN block
    (80) anon_function_expr -> . FUNCTION LPAREN RPAREN NEWLINE block
    (81) anon_function_expr -> . FUNCTION LPAREN function_argument_list RPAREN block
    (82) anon_function_expr -> . FUNCTION LPAREN function_argument_list RPAREN NEWLINE block
    (54) expr_expansion -> . EOPEN command RPAREN

    LPAREN          shift and go to state 35
    COPEN           shift and go to state 60
    ATOM            shift and go to state 38
    NUMBER          shift and go to state 43
    HEXNUMBER       shift and go to state 57
    BINNUMBER       shift and go to state 58
    OCTNUMBER       shift and go to state 54
    STRING          shift and go to state 44
    TRUE            shift and go to state 46
    FALSE           shift and go to state 51
    NULL            shift and go to state 56
    LBRACKET        shift and go to state 52
    LBRACE          shift and go to state 47
    MINUS           shift and go to state 40
    NOT             shift and go to state 45
    FUNCTION        shift and go to state 53
    EOPEN           shift and go to state 55

    expr_expansion                 shift and go to state 39
    unary_expr                     shift and go to state 42
    literal                        shift and go to state 34
    expr                           shift and go to state 150
    array_literal                  shift and go to state 49
    subscript_expr                 shift and go to state 59
    symbol                         shift and go to state 50
    anon_function_expr             shift and go to state 41
    binary_expr                    shift and go to state 33
    call                           shift and go to state 36
    dict_literal                   shift and go to state 37

state 90

    (108) command_item -> COPEN expr . RBRACE
    (85) binary_expr -> expr . EQ expr
    (86) binary_expr -> expr . NE expr
    (87) binary_expr -> expr . GT expr
    (88) binary_expr -> expr . GE expr
    (89) binary_expr -> expr . LT expr
    (90) binary_expr -> expr . LE expr
    (91) binary_expr -> expr . PLUS expr
    (92) binary_expr -> expr . MINUS expr
    (93) binary_expr -> expr . MUL expr
    (94) binary_expr -> expr . DIV expr
    (95) binary_expr -> expr . REGEX expr
    (96) binary_expr -> expr . AND expr
    (97) binary_expr -> expr . OR expr
    (98) binary_expr -> expr . NOT expr
    (99) binary_expr -> expr . MOD expr
    (78) subscript_expr -> expr . LBRACKET expr RBRACKET

    RBRACE          shift and go to state 151
    EQ              shift and go to state 99
    NE              shift and go to state 100
    GT              shift and go to state 103
    GE              shift and go to state 108
    LT              shift and go to state 109
    LE              shift and go to state 105
    PLUS            shift and go to state 114
    MINUS           shift and go to state 106
    MUL             shift and go to state 101
    DIV             shift and go to state 102
    REGEX           shift and go to state 113
    AND             shift and go to state 111
    OR              shift and go to state 107
    NOT             shift and go to state 104
    MOD             shift and go to state 112
    LBRACKET        shift and go to state 110


state 91

    (52) expr -> LPAREN expr . RPAREN
    (85) binary_expr -> expr . EQ expr
    (86) binary_expr -> expr . NE expr
    (87) binary_expr -> expr . GT expr
    (88) binary_expr -> expr . GE expr
    (89) binary_expr -> expr . LT expr
    (90) binary_expr -> expr . LE expr
    (91) binary_expr -> expr . PLUS expr
    (92) binary_expr -> expr . MINUS expr
    (93) binary_expr -> expr . MUL expr
    (94) binary_expr -> expr . DIV expr
    (95) binary_expr -> expr . REGEX expr
    (96) binary_expr -> expr . AND expr
    (97) binary_expr -> expr . OR expr
    (98) binary_expr -> expr . NOT expr
    (99) binary_expr -> expr . MOD expr
    (78) subscript_expr -> expr . LBRACKET expr RBRACKET

    RPAREN          shift and go to state 152
    EQ              shift and go to state 99
    NE              shift and go to state 100
    GT              shift and go to state 103
    GE              shift and go to state 108
    LT              shift and go to state 109
    LE              shift and go to state 105
    PLUS            shift and go to state 114
    MINUS           shift and go to state 106
    MUL             shift and go to state 101
    DIV             shift and go to state 102
    REGEX           shift and go to state 113
    AND             shift and go to state 111
    OR              shift and go to state 107
    NOT             shift and go to state 104
    MOD             shift and go to state 112
    LBRACKET        shift and go to state 110


state 92

    (83) unary_expr -> MINUS expr .
    (85) binary_expr -> expr . EQ expr
    (86) binary_expr -> expr . NE expr
    (87) binary_expr -> expr . GT expr
    (88) binary_expr -> expr . GE expr
    (89) binary_expr -> expr . LT expr
    (90) binary_expr -> expr . LE expr
    (91) binary_expr -> expr . PLUS expr
    (92) binary_expr -> expr . MINUS expr
    (93) binary_expr -> expr . MUL expr
    (94) binary_expr -> expr . DIV expr
    (95) binary_expr -> expr . REGEX expr
    (96) binary_expr -> expr . AND expr
    (97) binary_expr -> expr . OR expr
    (98) binary_expr -> expr . NOT expr
    (99) binary_expr -> expr . MOD expr
    (78) subscript_expr -> expr . LBRACKET expr RBRACKET

    RBRACE          reduce using rule 83 (unary_expr -> MINUS expr .)
    EQ              reduce using rule 83 (unary_expr -> MINUS expr .)
    NE              reduce using rule 83 (unary_expr -> MINUS expr .)
    GT              reduce using rule 83 (unary_expr -> MINUS expr .)
    GE              reduce using rule 83 (unary_expr -> MINUS expr .)
    LT              reduce using rule 83 (unary_expr -> MINUS expr .)
    LE              reduce using rule 83 (unary_expr -> MINUS expr .)
    PLUS            reduce using rule 83 (unary_expr -> MINUS expr .)
    MINUS           reduce using rule 83 (unary_expr -> MINUS expr .)
    AND             reduce using rule 83 (unary_expr -> MINUS expr .)
    OR              reduce using rule 83 (unary_expr -> MINUS expr .)
    NOT             reduce using rule 83 (unary_expr -> MINUS expr .)
    COMMA           reduce using rule 83 (unary_expr -> MINUS expr .)
    REDIRECT        reduce using rule 83 (unary_expr -> MINUS expr .)
    NEWLINE         reduce using rule 83 (unary_expr -> MINUS expr .)
    $end            reduce using rule 83 (unary_expr -> MINUS expr .)
    RPAREN          reduce using rule 83 (unary_expr -> MINUS expr .)
    COLON           reduce using rule 83 (unary_expr -> MINUS expr .)
    RBRACKET        reduce using rule 83 (unary_expr -> MINUS expr .)
    MUL             shift and go to state 101
    DIV             shift and go to state 102
    REGEX           shift and go to state 113
    MOD             shift and go to state 112
    LBRACKET        shift and go to state 110

  ! MUL             [ reduce using rule 83 (unary_expr -> MINUS expr .) ]
  ! DIV             [ reduce using rule 83 (unary_expr -> MINUS expr .) ]
  ! REGEX           [ reduce using rule 83 (unary_expr -> MINUS expr .) ]
  ! MOD             [ reduce using rule 83 (unary_expr -> MINUS expr .) ]
  ! LBRACKET        [ reduce using rule 83 (unary_expr -> MINUS expr .) ]
  ! EQ              [ shift and go to state 99 ]
  ! NE              [ shift and go to state 100 ]
  ! GT              [ shift and go to state 103 ]
  ! GE              [ shift and go to state 108 ]
  ! LT              [ shift and go to state 109 ]
  ! LE              [ shift and go to state 105 ]
  ! PLUS            [ shift and go to state 114 ]
  ! MINUS           [ shift and go to state 106 ]
  ! AND             [ shift and go to state 111 ]
  ! OR              [ shift and go to state 107 ]
  ! NOT             [ shift and go to state 104 ]


state 93

    (84) unary_expr -> NOT expr .
    (85) binary_expr -> expr . EQ expr
    (86) binary_expr -> expr . NE expr
    (87) binary_expr -> expr . GT expr
    (88) binary_expr -> expr . GE expr
    (89) binary_expr -> expr . LT expr
    (90) binary_expr -> expr . LE expr
    (91) binary_expr -> expr . PLUS expr
    (92) binary_expr -> expr . MINUS expr
    (93) binary_expr -> expr . MUL expr
    (94) binary_expr -> expr . DIV expr
    (95) binary_expr -> expr . REGEX expr
    (96) binary_expr -> expr . AND expr
    (97) binary_expr -> expr . OR expr
    (98) binary_expr -> expr . NOT expr
    (99) binary_expr -> expr . MOD expr
    (78) subscript_expr -> expr . LBRACKET expr RBRACKET

    RBRACE          reduce using rule 84 (unary_expr -> NOT expr .)
    AND             reduce using rule 84 (unary_expr -> NOT expr .)
    OR              reduce using rule 84 (unary_expr -> NOT expr .)
    COMMA           reduce using rule 84 (unary_expr -> NOT expr .)
    REDIRECT        reduce using rule 84 (unary_expr -> NOT expr .)
    NEWLINE         reduce using rule 84 (unary_expr -> NOT expr .)
    $end            reduce using rule 84 (unary_expr -> NOT expr .)
    RPAREN          reduce using rule 84 (unary_expr -> NOT expr .)
    COLON           reduce using rule 84 (unary_expr -> NOT expr .)
    RBRACKET        reduce using rule 84 (unary_expr -> NOT expr .)
    EQ              shift and go to state 99
    NE              shift and go to state 100
    GT              shift and go to state 103
    GE              shift and go to state 108
    LT              shift and go to state 109
    LE              shift and go to state 105
    PLUS            shift and go to state 114
    MINUS           shift and go to state 106
    MUL             shift and go to state 101
    DIV             shift and go to state 102
    REGEX           shift and go to state 113
    NOT             shift and go to state 104
    MOD             shift and go to state 112
    LBRACKET        shift and go to state 110

  ! EQ              [ reduce using rule 84 (unary_expr -> NOT expr .) ]
  ! NE              [ reduce using rule 84 (unary_expr -> NOT expr .) ]
  ! GT              [ reduce using rule 84 (unary_expr -> NOT expr .) ]
  ! GE              [ reduce using rule 84 (unary_expr -> NOT expr .) ]
  ! LT              [ reduce using rule 84 (unary_expr -> NOT expr .) ]
  ! LE              [ reduce using rule 84 (unary_expr -> NOT expr .) ]
  ! PLUS            [ reduce using rule 84 (unary_expr -> NOT expr .) ]
  ! MINUS           [ reduce using rule 84 (unary_expr -> NOT expr .) ]
  ! MUL             [ reduce using rule 84 (unary_expr -> NOT expr .) ]
  ! DIV             [ reduce using rule 84 (unary_expr -> NOT expr .) ]
  ! REGEX           [ reduce using rule 84 (unary_expr -> NOT expr .) ]
  ! NOT             [ reduce using rule 84 (unary_expr -> NOT expr .) ]
  ! MOD             [ reduce using rule 84 (unary_expr -> NOT expr .) ]
  ! LBRACKET        [ reduce using rule 84 (unary_expr -> NOT expr .) ]
  ! AND             [ shift and go to state 111 ]
  ! OR              [ shift and go to state 107 ]


state 94

    (57) dict_literal -> LBRACE RBRACE .

    EQ              reduce using rule 57 (dict_literal -> LBRACE RBRACE .)
    NE              reduce using rule 57 (dict_literal -> LBRACE RBRACE .)
    GT              reduce using rule 57 (dict_literal -> LBRACE RBRACE .)
    GE              reduce using rule 57 (dict_literal -> LBRACE RBRACE .)
    LT              reduce using rule 57 (dict_literal -> LBRACE RBRACE .)
    LE              reduce using rule 57 (dict_literal -> LBRACE RBRACE .)
    PLUS            reduce using rule 57 (dict_literal -> LBRACE RBRACE .)
    MINUS           reduce using rule 57 (dict_literal -> LBRACE RBRACE .)
    MUL             reduce using rule 57 (dict_literal -> LBRACE RBRACE .)
    DIV             reduce using rule 57 (dict_literal -> LBRACE RBRACE .)
    REGEX           reduce using rule 57 (dict_literal -> LBRACE RBRACE .)
    AND             reduce using rule 57 (dict_literal -> LBRACE RBRACE .)
    OR              reduce using rule 57 (dict_literal -> LBRACE RBRACE .)
    NOT             reduce using rule 57 (dict_literal -> LBRACE RBRACE .)
    MOD             reduce using rule 57 (dict_literal -> LBRACE RBRACE .)
    LBRACKET        reduce using rule 57 (dict_literal -> LBRACE RBRACE .)
    REDIRECT        reduce using rule 57 (dict_literal -> LBRACE RBRACE .)
    NEWLINE         reduce using rule 57 (dict_literal -> LBRACE RBRACE .)
    $end            reduce using rule 57 (dict_literal -> LBRACE RBRACE .)
    RBRACE          reduce using rule 57 (dict_literal -> LBRACE RBRACE .)
    RPAREN          reduce using rule 57 (dict_literal -> LBRACE RBRACE .)
    COLON           reduce using rule 57 (dict_literal -> LBRACE RBRACE .)
    COMMA           reduce using rule 57 (dict_literal -> LBRACE RBRACE .)
    RBRACKET        reduce using rule 57 (dict_literal -> LBRACE RBRACE .)
    error           reduce using rule 57 (dict_literal -> LBRACE RBRACE .)
    ATOM            reduce using rule 57 (dict_literal -> LBRACE RBRACE .)
    COPEN           reduce using rule 57 (dict_literal -> LBRACE RBRACE .)
    LIST            reduce using rule 57 (dict_literal -> LBRACE RBRACE .)
    UP              reduce using rule 57 (dict_literal -> LBRACE RBRACE .)
    NUMBER          reduce using rule 57 (dict_literal -> LBRACE RBRACE .)
    HEXNUMBER       reduce using rule 57 (dict_literal -> LBRACE RBRACE .)
    BINNUMBER       reduce using rule 57 (dict_literal -> LBRACE RBRACE .)
    OCTNUMBER       reduce using rule 57 (dict_literal -> LBRACE RBRACE .)
    STRING          reduce using rule 57 (dict_literal -> LBRACE RBRACE .)
    TRUE            reduce using rule 57 (dict_literal -> LBRACE RBRACE .)
    FALSE           reduce using rule 57 (dict_literal -> LBRACE RBRACE .)
    NULL            reduce using rule 57 (dict_literal -> LBRACE RBRACE .)
    LBRACE          reduce using rule 57 (dict_literal -> LBRACE RBRACE .)
    PIPE            reduce using rule 57 (dict_literal -> LBRACE RBRACE .)


state 95

    (59) dict_literal -> LBRACE dict_pair_list . RBRACE

    RBRACE          shift and go to state 153


state 96

    (62) dict_pair -> expr . COLON expr
    (85) binary_expr -> expr . EQ expr
    (86) binary_expr -> expr . NE expr
    (87) binary_expr -> expr . GT expr
    (88) binary_expr -> expr . GE expr
    (89) binary_expr -> expr . LT expr
    (90) binary_expr -> expr . LE expr
    (91) binary_expr -> expr . PLUS expr
    (92) binary_expr -> expr . MINUS expr
    (93) binary_expr -> expr . MUL expr
    (94) binary_expr -> expr . DIV expr
    (95) binary_expr -> expr . REGEX expr
    (96) binary_expr -> expr . AND expr
    (97) binary_expr -> expr . OR expr
    (98) binary_expr -> expr . NOT expr
    (99) binary_expr -> expr . MOD expr
    (78) subscript_expr -> expr . LBRACKET expr RBRACKET

    COLON           shift and go to state 154
    EQ              shift and go to state 99
    NE              shift and go to state 100
    GT              shift and go to state 103
    GE              shift and go to state 108
    LT              shift and go to state 109
    LE              shift and go to state 105
    PLUS            shift and go to state 114
    MINUS           shift and go to state 106
    MUL             shift and go to state 101
    DIV             shift and go to state 102
    REGEX           shift and go to state 113
    AND             shift and go to state 111
    OR              shift and go to state 107
    NOT             shift and go to state 104
    MOD             shift and go to state 112
    LBRACKET        shift and go to state 110


state 97

    (58) dict_literal -> LBRACE NEWLINE . RBRACE
    (63) dict_pair -> NEWLINE . expr COLON expr
    (64) dict_pair -> NEWLINE . expr COLON expr NEWLINE
    (42) expr -> . symbol
    (43) expr -> . literal
    (44) expr -> . array_literal
    (45) expr -> . dict_literal
    (46) expr -> . unary_expr
    (47) expr -> . binary_expr
    (48) expr -> . call
    (49) expr -> . subscript_expr
    (50) expr -> . anon_function_expr
    (51) expr -> . expr_expansion
    (52) expr -> . LPAREN expr RPAREN
    (53) expr -> . COPEN expr RBRACE
    (73) symbol -> . ATOM
    (65) literal -> . NUMBER
    (66) literal -> . HEXNUMBER
    (67) literal -> . BINNUMBER
    (68) literal -> . OCTNUMBER
    (69) literal -> . STRING
    (70) literal -> . TRUE
    (71) literal -> . FALSE
    (72) literal -> . NULL
    (55) array_literal -> . LBRACKET RBRACKET
    (56) array_literal -> . LBRACKET expr_list RBRACKET
    (57) dict_literal -> . LBRACE RBRACE
    (58) dict_literal -> . LBRACE NEWLINE RBRACE
    (59) dict_literal -> . LBRACE dict_pair_list RBRACE
    (83) unary_expr -> . MINUS expr
    (84) unary_expr -> . NOT expr
    (85) binary_expr -> . expr EQ expr
    (86) binary_expr -> . expr NE expr
    (87) binary_expr -> . expr GT expr
    (88) binary_expr -> . expr GE expr
    (89) binary_expr -> . expr LT expr
    (90) binary_expr -> . expr LE expr
    (91) binary_expr -> . expr PLUS expr
    (92) binary_expr -> . expr MINUS expr
    (93) binary_expr -> . expr MUL expr
    (94) binary_expr -> . expr DIV expr
    (95) binary_expr -> . expr REGEX expr
    (96) binary_expr -> . expr AND expr
    (97) binary_expr -> . expr OR expr
    (98) binary_expr -> . expr NOT expr
    (99) binary_expr -> . expr MOD expr
    (74) call -> . ATOM LPAREN RPAREN
    (75) call -> . ATOM LPAREN expr_list RPAREN
    (78) subscript_expr -> . expr LBRACKET expr RBRACKET
    (79) anon_function_expr -> . FUNCTION LPAREN RPAREN block
    (80) anon_function_expr -> . FUNCTION LPAREN RPAREN NEWLINE block
    (81) anon_function_expr -> . FUNCTION LPAREN function_argument_list RPAREN block
    (82) anon_function_expr -> . FUNCTION LPAREN function_argument_list RPAREN NEWLINE block
    (54) expr_expansion -> . EOPEN command RPAREN

    RBRACE          shift and go to state 155
    LPAREN          shift and go to state 35
    COPEN           shift and go to state 60
    ATOM            shift and go to state 38
    NUMBER          shift and go to state 43
    HEXNUMBER       shift and go to state 57
    BINNUMBER       shift and go to state 58
    OCTNUMBER       shift and go to state 54
    STRING          shift and go to state 44
    TRUE            shift and go to state 46
    FALSE           shift and go to state 51
    NULL            shift and go to state 56
    LBRACKET        shift and go to state 52
    LBRACE          shift and go to state 47
    MINUS           shift and go to state 40
    NOT             shift and go to state 45
    FUNCTION        shift and go to state 53
    EOPEN           shift and go to state 55

    binary_expr                    shift and go to state 33
    expr_expansion                 shift and go to state 39
    literal                        shift and go to state 34
    expr                           shift and go to state 156
    array_literal                  shift and go to state 49
    subscript_expr                 shift and go to state 59
    symbol                         shift and go to state 50
    anon_function_expr             shift and go to state 41
    call                           shift and go to state 36
    dict_literal                   shift and go to state 37
    unary_expr                     shift and go to state 42

state 98

    (60) dict_pair_list -> dict_pair .
    (61) dict_pair_list -> dict_pair . COMMA dict_pair_list

    RBRACE          reduce using rule 60 (dict_pair_list -> dict_pair .)
    COMMA           shift and go to state 157


state 99

    (85) binary_expr -> expr EQ . expr
    (42) expr -> . symbol
    (43) expr -> . literal
    (44) expr -> . array_literal
    (45) expr -> . dict_literal
    (46) expr -> . unary_expr
    (47) expr -> . binary_expr
    (48) expr -> . call
    (49) expr -> . subscript_expr
    (50) expr -> . anon_function_expr
    (51) expr -> . expr_expansion
    (52) expr -> . LPAREN expr RPAREN
    (53) expr -> . COPEN expr RBRACE
    (73) symbol -> . ATOM
    (65) literal -> . NUMBER
    (66) literal -> . HEXNUMBER
    (67) literal -> . BINNUMBER
    (68) literal -> . OCTNUMBER
    (69) literal -> . STRING
    (70) literal -> . TRUE
    (71) literal -> . FALSE
    (72) literal -> . NULL
    (55) array_literal -> . LBRACKET RBRACKET
    (56) array_literal -> . LBRACKET expr_list RBRACKET
    (57) dict_literal -> . LBRACE RBRACE
    (58) dict_literal -> . LBRACE NEWLINE RBRACE
    (59) dict_literal -> . LBRACE dict_pair_list RBRACE
    (83) unary_expr -> . MINUS expr
    (84) unary_expr -> . NOT expr
    (85) binary_expr -> . expr EQ expr
    (86) binary_expr -> . expr NE expr
    (87) binary_expr -> . expr GT expr
    (88) binary_expr -> . expr GE expr
    (89) binary_expr -> . expr LT expr
    (90) binary_expr -> . expr LE expr
    (91) binary_expr -> . expr PLUS expr
    (92) binary_expr -> . expr MINUS expr
    (93) binary_expr -> . expr MUL expr
    (94) binary_expr -> . expr DIV expr
    (95) binary_expr -> . expr REGEX expr
    (96) binary_expr -> . expr AND expr
    (97) binary_expr -> . expr OR expr
    (98) binary_expr -> . expr NOT expr
    (99) binary_expr -> . expr MOD expr
    (74) call -> . ATOM LPAREN RPAREN
    (75) call -> . ATOM LPAREN expr_list RPAREN
    (78) subscript_expr -> . expr LBRACKET expr RBRACKET
    (79) anon_function_expr -> . FUNCTION LPAREN RPAREN block
    (80) anon_function_expr -> . FUNCTION LPAREN RPAREN NEWLINE block
    (81) anon_function_expr -> . FUNCTION LPAREN function_argument_list RPAREN block
    (82) anon_function_expr -> . FUNCTION LPAREN function_argument_list RPAREN NEWLINE block
    (54) expr_expansion -> . EOPEN command RPAREN

    LPAREN          shift and go to state 35
    COPEN           shift and go to state 60
    ATOM            shift and go to state 38
    NUMBER          shift and go to state 43
    HEXNUMBER       shift and go to state 57
    BINNUMBER       shift and go to state 58
    OCTNUMBER       shift and go to state 54
    STRING          shift and go to state 44
    TRUE            shift and go to state 46
    FALSE           shift and go to state 51
    NULL            shift and go to state 56
    LBRACKET        shift and go to state 52
    LBRACE          shift and go to state 47
    MINUS           shift and go to state 40
    NOT             shift and go to state 45
    FUNCTION        shift and go to state 53
    EOPEN           shift and go to state 55

    binary_expr                    shift and go to state 33
    expr_expansion                 shift and go to state 39
    literal                        shift and go to state 34
    expr                           shift and go to state 158
    array_literal                  shift and go to state 49
    subscript_expr                 shift and go to state 59
    symbol                         shift and go to state 50
    anon_function_expr             shift and go to state 41
    call                           shift and go to state 36
    dict_literal                   shift and go to state 37
    unary_expr                     shift and go to state 42

state 100

    (86) binary_expr -> expr NE . expr
    (42) expr -> . symbol
    (43) expr -> . literal
    (44) expr -> . array_literal
    (45) expr -> . dict_literal
    (46) expr -> . unary_expr
    (47) expr -> . binary_expr
    (48) expr -> . call
    (49) expr -> . subscript_expr
    (50) expr -> . anon_function_expr
    (51) expr -> . expr_expansion
    (52) expr -> . LPAREN expr RPAREN
    (53) expr -> . COPEN expr RBRACE
    (73) symbol -> . ATOM
    (65) literal -> . NUMBER
    (66) literal -> . HEXNUMBER
    (67) literal -> . BINNUMBER
    (68) literal -> . OCTNUMBER
    (69) literal -> . STRING
    (70) literal -> . TRUE
    (71) literal -> . FALSE
    (72) literal -> . NULL
    (55) array_literal -> . LBRACKET RBRACKET
    (56) array_literal -> . LBRACKET expr_list RBRACKET
    (57) dict_literal -> . LBRACE RBRACE
    (58) dict_literal -> . LBRACE NEWLINE RBRACE
    (59) dict_literal -> . LBRACE dict_pair_list RBRACE
    (83) unary_expr -> . MINUS expr
    (84) unary_expr -> . NOT expr
    (85) binary_expr -> . expr EQ expr
    (86) binary_expr -> . expr NE expr
    (87) binary_expr -> . expr GT expr
    (88) binary_expr -> . expr GE expr
    (89) binary_expr -> . expr LT expr
    (90) binary_expr -> . expr LE expr
    (91) binary_expr -> . expr PLUS expr
    (92) binary_expr -> . expr MINUS expr
    (93) binary_expr -> . expr MUL expr
    (94) binary_expr -> . expr DIV expr
    (95) binary_expr -> . expr REGEX expr
    (96) binary_expr -> . expr AND expr
    (97) binary_expr -> . expr OR expr
    (98) binary_expr -> . expr NOT expr
    (99) binary_expr -> . expr MOD expr
    (74) call -> . ATOM LPAREN RPAREN
    (75) call -> . ATOM LPAREN expr_list RPAREN
    (78) subscript_expr -> . expr LBRACKET expr RBRACKET
    (79) anon_function_expr -> . FUNCTION LPAREN RPAREN block
    (80) anon_function_expr -> . FUNCTION LPAREN RPAREN NEWLINE block
    (81) anon_function_expr -> . FUNCTION LPAREN function_argument_list RPAREN block
    (82) anon_function_expr -> . FUNCTION LPAREN function_argument_list RPAREN NEWLINE block
    (54) expr_expansion -> . EOPEN command RPAREN

    LPAREN          shift and go to state 35
    COPEN           shift and go to state 60
    ATOM            shift and go to state 38
    NUMBER          shift and go to state 43
    HEXNUMBER       shift and go to state 57
    BINNUMBER       shift and go to state 58
    OCTNUMBER       shift and go to state 54
    STRING          shift and go to state 44
    TRUE            shift and go to state 46
    FALSE           shift and go to state 51
    NULL            shift and go to state 56
    LBRACKET        shift and go to state 52
    LBRACE          shift and go to state 47
    MINUS           shift and go to state 40
    NOT             shift and go to state 45
    FUNCTION        shift and go to state 53
    EOPEN           shift and go to state 55

    binary_expr                    shift and go to state 33
    expr_expansion                 shift and go to state 39
    literal                        shift and go to state 34
    expr                           shift and go to state 159
    array_literal                  shift and go to state 49
    subscript_expr                 shift and go to state 59
    symbol                         shift and go to state 50
    anon_function_expr             shift and go to state 41
    call                           shift and go to state 36
    dict_literal                   shift and go to state 37
    unary_expr                     shift and go to state 42

state 101

    (93) binary_expr -> expr MUL . expr
    (42) expr -> . symbol
    (43) expr -> . literal
    (44) expr -> . array_literal
    (45) expr -> . dict_literal
    (46) expr -> . unary_expr
    (47) expr -> . binary_expr
    (48) expr -> . call
    (49) expr -> . subscript_expr
    (50) expr -> . anon_function_expr
    (51) expr -> . expr_expansion
    (52) expr -> . LPAREN expr RPAREN
    (53) expr -> . COPEN expr RBRACE
    (73) symbol -> . ATOM
    (65) literal -> . NUMBER
    (66) literal -> . HEXNUMBER
    (67) literal -> . BINNUMBER
    (68) literal -> . OCTNUMBER
    (69) literal -> . STRING
    (70) literal -> . TRUE
    (71) literal -> . FALSE
    (72) literal -> . NULL
    (55) array_literal -> . LBRACKET RBRACKET
    (56) array_literal -> . LBRACKET expr_list RBRACKET
    (57) dict_literal -> . LBRACE RBRACE
    (58) dict_literal -> . LBRACE NEWLINE RBRACE
    (59) dict_literal -> . LBRACE dict_pair_list RBRACE
    (83) unary_expr -> . MINUS expr
    (84) unary_expr -> . NOT expr
    (85) binary_expr -> . expr EQ expr
    (86) binary_expr -> . expr NE expr
    (87) binary_expr -> . expr GT expr
    (88) binary_expr -> . expr GE expr
    (89) binary_expr -> . expr LT expr
    (90) binary_expr -> . expr LE expr
    (91) binary_expr -> . expr PLUS expr
    (92) binary_expr -> . expr MINUS expr
    (93) binary_expr -> . expr MUL expr
    (94) binary_expr -> . expr DIV expr
    (95) binary_expr -> . expr REGEX expr
    (96) binary_expr -> . expr AND expr
    (97) binary_expr -> . expr OR expr
    (98) binary_expr -> . expr NOT expr
    (99) binary_expr -> . expr MOD expr
    (74) call -> . ATOM LPAREN RPAREN
    (75) call -> . ATOM LPAREN expr_list RPAREN
    (78) subscript_expr -> . expr LBRACKET expr RBRACKET
    (79) anon_function_expr -> . FUNCTION LPAREN RPAREN block
    (80) anon_function_expr -> . FUNCTION LPAREN RPAREN NEWLINE block
    (81) anon_function_expr -> . FUNCTION LPAREN function_argument_list RPAREN block
    (82) anon_function_expr -> . FUNCTION LPAREN function_argument_list RPAREN NEWLINE block
    (54) expr_expansion -> . EOPEN command RPAREN

    LPAREN          shift and go to state 35
    COPEN           shift and go to state 60
    ATOM            shift and go to state 38
    NUMBER          shift and go to state 43
    HEXNUMBER       shift and go to state 57
    BINNUMBER       shift and go to state 58
    OCTNUMBER       shift and go to state 54
    STRING          shift and go to state 44
    TRUE            shift and go to state 46
    FALSE           shift and go to state 51
    NULL            shift and go to state 56
    LBRACKET        shift and go to state 52
    LBRACE          shift and go to state 47
    MINUS           shift and go to state 40
    NOT             shift and go to state 45
    FUNCTION        shift and go to state 53
    EOPEN           shift and go to state 55

    binary_expr                    shift and go to state 33
    expr_expansion                 shift and go to state 39
    literal                        shift and go to state 34
    expr                           shift and go to state 160
    array_literal                  shift and go to state 49
    subscript_expr                 shift and go to state 59
    symbol                         shift and go to state 50
    anon_function_expr             shift and go to state 41
    call                           shift and go to state 36
    dict_literal                   shift and go to state 37
    unary_expr                     shift and go to state 42

state 102

    (94) binary_expr -> expr DIV . expr
    (42) expr -> . symbol
    (43) expr -> . literal
    (44) expr -> . array_literal
    (45) expr -> . dict_literal
    (46) expr -> . unary_expr
    (47) expr -> . binary_expr
    (48) expr -> . call
    (49) expr -> . subscript_expr
    (50) expr -> . anon_function_expr
    (51) expr -> . expr_expansion
    (52) expr -> . LPAREN expr RPAREN
    (53) expr -> . COPEN expr RBRACE
    (73) symbol -> . ATOM
    (65) literal -> . NUMBER
    (66) literal -> . HEXNUMBER
    (67) literal -> . BINNUMBER
    (68) literal -> . OCTNUMBER
    (69) literal -> . STRING
    (70) literal -> . TRUE
    (71) literal -> . FALSE
    (72) literal -> . NULL
    (55) array_literal -> . LBRACKET RBRACKET
    (56) array_literal -> . LBRACKET expr_list RBRACKET
    (57) dict_literal -> . LBRACE RBRACE
    (58) dict_literal -> . LBRACE NEWLINE RBRACE
    (59) dict_literal -> . LBRACE dict_pair_list RBRACE
    (83) unary_expr -> . MINUS expr
    (84) unary_expr -> . NOT expr
    (85) binary_expr -> . expr EQ expr
    (86) binary_expr -> . expr NE expr
    (87) binary_expr -> . expr GT expr
    (88) binary_expr -> . expr GE expr
    (89) binary_expr -> . expr LT expr
    (90) binary_expr -> . expr LE expr
    (91) binary_expr -> . expr PLUS expr
    (92) binary_expr -> . expr MINUS expr
    (93) binary_expr -> . expr MUL expr
    (94) binary_expr -> . expr DIV expr
    (95) binary_expr -> . expr REGEX expr
    (96) binary_expr -> . expr AND expr
    (97) binary_expr -> . expr OR expr
    (98) binary_expr -> . expr NOT expr
    (99) binary_expr -> . expr MOD expr
    (74) call -> . ATOM LPAREN RPAREN
    (75) call -> . ATOM LPAREN expr_list RPAREN
    (78) subscript_expr -> . expr LBRACKET expr RBRACKET
    (79) anon_function_expr -> . FUNCTION LPAREN RPAREN block
    (80) anon_function_expr -> . FUNCTION LPAREN RPAREN NEWLINE block
    (81) anon_function_expr -> . FUNCTION LPAREN function_argument_list RPAREN block
    (82) anon_function_expr -> . FUNCTION LPAREN function_argument_list RPAREN NEWLINE block
    (54) expr_expansion -> . EOPEN command RPAREN

    LPAREN          shift and go to state 35
    COPEN           shift and go to state 60
    ATOM            shift and go to state 38
    NUMBER          shift and go to state 43
    HEXNUMBER       shift and go to state 57
    BINNUMBER       shift and go to state 58
    OCTNUMBER       shift and go to state 54
    STRING          shift and go to state 44
    TRUE            shift and go to state 46
    FALSE           shift and go to state 51
    NULL            shift and go to state 56
    LBRACKET        shift and go to state 52
    LBRACE          shift and go to state 47
    MINUS           shift and go to state 40
    NOT             shift and go to state 45
    FUNCTION        shift and go to state 53
    EOPEN           shift and go to state 55

    binary_expr                    shift and go to state 33
    expr_expansion                 shift and go to state 39
    literal                        shift and go to state 34
    expr                           shift and go to state 161
    array_literal                  shift and go to state 49
    subscript_expr                 shift and go to state 59
    symbol                         shift and go to state 50
    anon_function_expr             shift and go to state 41
    call                           shift and go to state 36
    dict_literal                   shift and go to state 37
    unary_expr                     shift and go to state 42

state 103

    (87) binary_expr -> expr GT . expr
    (42) expr -> . symbol
    (43) expr -> . literal
    (44) expr -> . array_literal
    (45) expr -> . dict_literal
    (46) expr -> . unary_expr
    (47) expr -> . binary_expr
    (48) expr -> . call
    (49) expr -> . subscript_expr
    (50) expr -> . anon_function_expr
    (51) expr -> . expr_expansion
    (52) expr -> . LPAREN expr RPAREN
    (53) expr -> . COPEN expr RBRACE
    (73) symbol -> . ATOM
    (65) literal -> . NUMBER
    (66) literal -> . HEXNUMBER
    (67) literal -> . BINNUMBER
    (68) literal -> . OCTNUMBER
    (69) literal -> . STRING
    (70) literal -> . TRUE
    (71) literal -> . FALSE
    (72) literal -> . NULL
    (55) array_literal -> . LBRACKET RBRACKET
    (56) array_literal -> . LBRACKET expr_list RBRACKET
    (57) dict_literal -> . LBRACE RBRACE
    (58) dict_literal -> . LBRACE NEWLINE RBRACE
    (59) dict_literal -> . LBRACE dict_pair_list RBRACE
    (83) unary_expr -> . MINUS expr
    (84) unary_expr -> . NOT expr
    (85) binary_expr -> . expr EQ expr
    (86) binary_expr -> . expr NE expr
    (87) binary_expr -> . expr GT expr
    (88) binary_expr -> . expr GE expr
    (89) binary_expr -> . expr LT expr
    (90) binary_expr -> . expr LE expr
    (91) binary_expr -> . expr PLUS expr
    (92) binary_expr -> . expr MINUS expr
    (93) binary_expr -> . expr MUL expr
    (94) binary_expr -> . expr DIV expr
    (95) binary_expr -> . expr REGEX expr
    (96) binary_expr -> . expr AND expr
    (97) binary_expr -> . expr OR expr
    (98) binary_expr -> . expr NOT expr
    (99) binary_expr -> . expr MOD expr
    (74) call -> . ATOM LPAREN RPAREN
    (75) call -> . ATOM LPAREN expr_list RPAREN
    (78) subscript_expr -> . expr LBRACKET expr RBRACKET
    (79) anon_function_expr -> . FUNCTION LPAREN RPAREN block
    (80) anon_function_expr -> . FUNCTION LPAREN RPAREN NEWLINE block
    (81) anon_function_expr -> . FUNCTION LPAREN function_argument_list RPAREN block
    (82) anon_function_expr -> . FUNCTION LPAREN function_argument_list RPAREN NEWLINE block
    (54) expr_expansion -> . EOPEN command RPAREN

    LPAREN          shift and go to state 35
    COPEN           shift and go to state 60
    ATOM            shift and go to state 38
    NUMBER          shift and go to state 43
    HEXNUMBER       shift and go to state 57
    BINNUMBER       shift and go to state 58
    OCTNUMBER       shift and go to state 54
    STRING          shift and go to state 44
    TRUE            shift and go to state 46
    FALSE           shift and go to state 51
    NULL            shift and go to state 56
    LBRACKET        shift and go to state 52
    LBRACE          shift and go to state 47
    MINUS           shift and go to state 40
    NOT             shift and go to state 45
    FUNCTION        shift and go to state 53
    EOPEN           shift and go to state 55

    binary_expr                    shift and go to state 33
    expr_expansion                 shift and go to state 39
    literal                        shift and go to state 34
    expr                           shift and go to state 162
    array_literal                  shift and go to state 49
    subscript_expr                 shift and go to state 59
    symbol                         shift and go to state 50
    anon_function_expr             shift and go to state 41
    call                           shift and go to state 36
    dict_literal                   shift and go to state 37
    unary_expr                     shift and go to state 42

state 104

    (98) binary_expr -> expr NOT . expr
    (42) expr -> . symbol
    (43) expr -> . literal
    (44) expr -> . array_literal
    (45) expr -> . dict_literal
    (46) expr -> . unary_expr
    (47) expr -> . binary_expr
    (48) expr -> . call
    (49) expr -> . subscript_expr
    (50) expr -> . anon_function_expr
    (51) expr -> . expr_expansion
    (52) expr -> . LPAREN expr RPAREN
    (53) expr -> . COPEN expr RBRACE
    (73) symbol -> . ATOM
    (65) literal -> . NUMBER
    (66) literal -> . HEXNUMBER
    (67) literal -> . BINNUMBER
    (68) literal -> . OCTNUMBER
    (69) literal -> . STRING
    (70) literal -> . TRUE
    (71) literal -> . FALSE
    (72) literal -> . NULL
    (55) array_literal -> . LBRACKET RBRACKET
    (56) array_literal -> . LBRACKET expr_list RBRACKET
    (57) dict_literal -> . LBRACE RBRACE
    (58) dict_literal -> . LBRACE NEWLINE RBRACE
    (59) dict_literal -> . LBRACE dict_pair_list RBRACE
    (83) unary_expr -> . MINUS expr
    (84) unary_expr -> . NOT expr
    (85) binary_expr -> . expr EQ expr
    (86) binary_expr -> . expr NE expr
    (87) binary_expr -> . expr GT expr
    (88) binary_expr -> . expr GE expr
    (89) binary_expr -> . expr LT expr
    (90) binary_expr -> . expr LE expr
    (91) binary_expr -> . expr PLUS expr
    (92) binary_expr -> . expr MINUS expr
    (93) binary_expr -> . expr MUL expr
    (94) binary_expr -> . expr DIV expr
    (95) binary_expr -> . expr REGEX expr
    (96) binary_expr -> . expr AND expr
    (97) binary_expr -> . expr OR expr
    (98) binary_expr -> . expr NOT expr
    (99) binary_expr -> . expr MOD expr
    (74) call -> . ATOM LPAREN RPAREN
    (75) call -> . ATOM LPAREN expr_list RPAREN
    (78) subscript_expr -> . expr LBRACKET expr RBRACKET
    (79) anon_function_expr -> . FUNCTION LPAREN RPAREN block
    (80) anon_function_expr -> . FUNCTION LPAREN RPAREN NEWLINE block
    (81) anon_function_expr -> . FUNCTION LPAREN function_argument_list RPAREN block
    (82) anon_function_expr -> . FUNCTION LPAREN function_argument_list RPAREN NEWLINE block
    (54) expr_expansion -> . EOPEN command RPAREN

    LPAREN          shift and go to state 35
    COPEN           shift and go to state 60
    ATOM            shift and go to state 38
    NUMBER          shift and go to state 43
    HEXNUMBER       shift and go to state 57
    BINNUMBER       shift and go to state 58
    OCTNUMBER       shift and go to state 54
    STRING          shift and go to state 44
    TRUE            shift and go to state 46
    FALSE           shift and go to state 51
    NULL            shift and go to state 56
    LBRACKET        shift and go to state 52
    LBRACE          shift and go to state 47
    MINUS           shift and go to state 40
    NOT             shift and go to state 45
    FUNCTION        shift and go to state 53
    EOPEN           shift and go to state 55

    binary_expr                    shift and go to state 33
    expr_expansion                 shift and go to state 39
    literal                        shift and go to state 34
    expr                           shift and go to state 163
    array_literal                  shift and go to state 49
    subscript_expr                 shift and go to state 59
    symbol                         shift and go to state 50
    anon_function_expr             shift and go to state 41
    call                           shift and go to state 36
    dict_literal                   shift and go to state 37
    unary_expr                     shift and go to state 42

state 105

    (90) binary_expr -> expr LE . expr
    (42) expr -> . symbol
    (43) expr -> . literal
    (44) expr -> . array_literal
    (45) expr -> . dict_literal
    (46) expr -> . unary_expr
    (47) expr -> . binary_expr
    (48) expr -> . call
    (49) expr -> . subscript_expr
    (50) expr -> . anon_function_expr
    (51) expr -> . expr_expansion
    (52) expr -> . LPAREN expr RPAREN
    (53) expr -> . COPEN expr RBRACE
    (73) symbol -> . ATOM
    (65) literal -> . NUMBER
    (66) literal -> . HEXNUMBER
    (67) literal -> . BINNUMBER
    (68) literal -> . OCTNUMBER
    (69) literal -> . STRING
    (70) literal -> . TRUE
    (71) literal -> . FALSE
    (72) literal -> . NULL
    (55) array_literal -> . LBRACKET RBRACKET
    (56) array_literal -> . LBRACKET expr_list RBRACKET
    (57) dict_literal -> . LBRACE RBRACE
    (58) dict_literal -> . LBRACE NEWLINE RBRACE
    (59) dict_literal -> . LBRACE dict_pair_list RBRACE
    (83) unary_expr -> . MINUS expr
    (84) unary_expr -> . NOT expr
    (85) binary_expr -> . expr EQ expr
    (86) binary_expr -> . expr NE expr
    (87) binary_expr -> . expr GT expr
    (88) binary_expr -> . expr GE expr
    (89) binary_expr -> . expr LT expr
    (90) binary_expr -> . expr LE expr
    (91) binary_expr -> . expr PLUS expr
    (92) binary_expr -> . expr MINUS expr
    (93) binary_expr -> . expr MUL expr
    (94) binary_expr -> . expr DIV expr
    (95) binary_expr -> . expr REGEX expr
    (96) binary_expr -> . expr AND expr
    (97) binary_expr -> . expr OR expr
    (98) binary_expr -> . expr NOT expr
    (99) binary_expr -> . expr MOD expr
    (74) call -> . ATOM LPAREN RPAREN
    (75) call -> . ATOM LPAREN expr_list RPAREN
    (78) subscript_expr -> . expr LBRACKET expr RBRACKET
    (79) anon_function_expr -> . FUNCTION LPAREN RPAREN block
    (80) anon_function_expr -> . FUNCTION LPAREN RPAREN NEWLINE block
    (81) anon_function_expr -> . FUNCTION LPAREN function_argument_list RPAREN block
    (82) anon_function_expr -> . FUNCTION LPAREN function_argument_list RPAREN NEWLINE block
    (54) expr_expansion -> . EOPEN command RPAREN

    LPAREN          shift and go to state 35
    COPEN           shift and go to state 60
    ATOM            shift and go to state 38
    NUMBER          shift and go to state 43
    HEXNUMBER       shift and go to state 57
    BINNUMBER       shift and go to state 58
    OCTNUMBER       shift and go to state 54
    STRING          shift and go to state 44
    TRUE            shift and go to state 46
    FALSE           shift and go to state 51
    NULL            shift and go to state 56
    LBRACKET        shift and go to state 52
    LBRACE          shift and go to state 47
    MINUS           shift and go to state 40
    NOT             shift and go to state 45
    FUNCTION        shift and go to state 53
    EOPEN           shift and go to state 55

    binary_expr                    shift and go to state 33
    expr_expansion                 shift and go to state 39
    literal                        shift and go to state 34
    expr                           shift and go to state 164
    array_literal                  shift and go to state 49
    subscript_expr                 shift and go to state 59
    symbol                         shift and go to state 50
    anon_function_expr             shift and go to state 41
    call                           shift and go to state 36
    dict_literal                   shift and go to state 37
    unary_expr                     shift and go to state 42

state 106

    (92) binary_expr -> expr MINUS . expr
    (42) expr -> . symbol
    (43) expr -> . literal
    (44) expr -> . array_literal
    (45) expr -> . dict_literal
    (46) expr -> . unary_expr
    (47) expr -> . binary_expr
    (48) expr -> . call
    (49) expr -> . subscript_expr
    (50) expr -> . anon_function_expr
    (51) expr -> . expr_expansion
    (52) expr -> . LPAREN expr RPAREN
    (53) expr -> . COPEN expr RBRACE
    (73) symbol -> . ATOM
    (65) literal -> . NUMBER
    (66) literal -> . HEXNUMBER
    (67) literal -> . BINNUMBER
    (68) literal -> . OCTNUMBER
    (69) literal -> . STRING
    (70) literal -> . TRUE
    (71) literal -> . FALSE
    (72) literal -> . NULL
    (55) array_literal -> . LBRACKET RBRACKET
    (56) array_literal -> . LBRACKET expr_list RBRACKET
    (57) dict_literal -> . LBRACE RBRACE
    (58) dict_literal -> . LBRACE NEWLINE RBRACE
    (59) dict_literal -> . LBRACE dict_pair_list RBRACE
    (83) unary_expr -> . MINUS expr
    (84) unary_expr -> . NOT expr
    (85) binary_expr -> . expr EQ expr
    (86) binary_expr -> . expr NE expr
    (87) binary_expr -> . expr GT expr
    (88) binary_expr -> . expr GE expr
    (89) binary_expr -> . expr LT expr
    (90) binary_expr -> . expr LE expr
    (91) binary_expr -> . expr PLUS expr
    (92) binary_expr -> . expr MINUS expr
    (93) binary_expr -> . expr MUL expr
    (94) binary_expr -> . expr DIV expr
    (95) binary_expr -> . expr REGEX expr
    (96) binary_expr -> . expr AND expr
    (97) binary_expr -> . expr OR expr
    (98) binary_expr -> . expr NOT expr
    (99) binary_expr -> . expr MOD expr
    (74) call -> . ATOM LPAREN RPAREN
    (75) call -> . ATOM LPAREN expr_list RPAREN
    (78) subscript_expr -> . expr LBRACKET expr RBRACKET
    (79) anon_function_expr -> . FUNCTION LPAREN RPAREN block
    (80) anon_function_expr -> . FUNCTION LPAREN RPAREN NEWLINE block
    (81) anon_function_expr -> . FUNCTION LPAREN function_argument_list RPAREN block
    (82) anon_function_expr -> . FUNCTION LPAREN function_argument_list RPAREN NEWLINE block
    (54) expr_expansion -> . EOPEN command RPAREN

    LPAREN          shift and go to state 35
    COPEN           shift and go to state 60
    ATOM            shift and go to state 38
    NUMBER          shift and go to state 43
    HEXNUMBER       shift and go to state 57
    BINNUMBER       shift and go to state 58
    OCTNUMBER       shift and go to state 54
    STRING          shift and go to state 44
    TRUE            shift and go to state 46
    FALSE           shift and go to state 51
    NULL            shift and go to state 56
    LBRACKET        shift and go to state 52
    LBRACE          shift and go to state 47
    MINUS           shift and go to state 40
    NOT             shift and go to state 45
    FUNCTION        shift and go to state 53
    EOPEN           shift and go to state 55

    binary_expr                    shift and go to state 33
    expr_expansion                 shift and go to state 39
    literal                        shift and go to state 34
    expr                           shift and go to state 165
    array_literal                  shift and go to state 49
    subscript_expr                 shift and go to state 59
    symbol                         shift and go to state 50
    anon_function_expr             shift and go to state 41
    call                           shift and go to state 36
    dict_literal                   shift and go to state 37
    unary_expr                     shift and go to state 42

state 107

    (97) binary_expr -> expr OR . expr
    (42) expr -> . symbol
    (43) expr -> . literal
    (44) expr -> . array_literal
    (45) expr -> . dict_literal
    (46) expr -> . unary_expr
    (47) expr -> . binary_expr
    (48) expr -> . call
    (49) expr -> . subscript_expr
    (50) expr -> . anon_function_expr
    (51) expr -> . expr_expansion
    (52) expr -> . LPAREN expr RPAREN
    (53) expr -> . COPEN expr RBRACE
    (73) symbol -> . ATOM
    (65) literal -> . NUMBER
    (66) literal -> . HEXNUMBER
    (67) literal -> . BINNUMBER
    (68) literal -> . OCTNUMBER
    (69) literal -> . STRING
    (70) literal -> . TRUE
    (71) literal -> . FALSE
    (72) literal -> . NULL
    (55) array_literal -> . LBRACKET RBRACKET
    (56) array_literal -> . LBRACKET expr_list RBRACKET
    (57) dict_literal -> . LBRACE RBRACE
    (58) dict_literal -> . LBRACE NEWLINE RBRACE
    (59) dict_literal -> . LBRACE dict_pair_list RBRACE
    (83) unary_expr -> . MINUS expr
    (84) unary_expr -> . NOT expr
    (85) binary_expr -> . expr EQ expr
    (86) binary_expr -> . expr NE expr
    (87) binary_expr -> . expr GT expr
    (88) binary_expr -> . expr GE expr
    (89) binary_expr -> . expr LT expr
    (90) binary_expr -> . expr LE expr
    (91) binary_expr -> . expr PLUS expr
    (92) binary_expr -> . expr MINUS expr
    (93) binary_expr -> . expr MUL expr
    (94) binary_expr -> . expr DIV expr
    (95) binary_expr -> . expr REGEX expr
    (96) binary_expr -> . expr AND expr
    (97) binary_expr -> . expr OR expr
    (98) binary_expr -> . expr NOT expr
    (99) binary_expr -> . expr MOD expr
    (74) call -> . ATOM LPAREN RPAREN
    (75) call -> . ATOM LPAREN expr_list RPAREN
    (78) subscript_expr -> . expr LBRACKET expr RBRACKET
    (79) anon_function_expr -> . FUNCTION LPAREN RPAREN block
    (80) anon_function_expr -> . FUNCTION LPAREN RPAREN NEWLINE block
    (81) anon_function_expr -> . FUNCTION LPAREN function_argument_list RPAREN block
    (82) anon_function_expr -> . FUNCTION LPAREN function_argument_list RPAREN NEWLINE block
    (54) expr_expansion -> . EOPEN command RPAREN

    LPAREN          shift and go to state 35
    COPEN           shift and go to state 60
    ATOM            shift and go to state 38
    NUMBER          shift and go to state 43
    HEXNUMBER       shift and go to state 57
    BINNUMBER       shift and go to state 58
    OCTNUMBER       shift and go to state 54
    STRING          shift and go to state 44
    TRUE            shift and go to state 46
    FALSE           shift and go to state 51
    NULL            shift and go to state 56
    LBRACKET        shift and go to state 52
    LBRACE          shift and go to state 47
    MINUS           shift and go to state 40
    NOT             shift and go to state 45
    FUNCTION        shift and go to state 53
    EOPEN           shift and go to state 55

    binary_expr                    shift and go to state 33
    expr_expansion                 shift and go to state 39
    literal                        shift and go to state 34
    expr                           shift and go to state 166
    array_literal                  shift and go to state 49
    subscript_expr                 shift and go to state 59
    symbol                         shift and go to state 50
    anon_function_expr             shift and go to state 41
    call                           shift and go to state 36
    dict_literal                   shift and go to state 37
    unary_expr                     shift and go to state 42

state 108

    (88) binary_expr -> expr GE . expr
    (42) expr -> . symbol
    (43) expr -> . literal
    (44) expr -> . array_literal
    (45) expr -> . dict_literal
    (46) expr -> . unary_expr
    (47) expr -> . binary_expr
    (48) expr -> . call
    (49) expr -> . subscript_expr
    (50) expr -> . anon_function_expr
    (51) expr -> . expr_expansion
    (52) expr -> . LPAREN expr RPAREN
    (53) expr -> . COPEN expr RBRACE
    (73) symbol -> . ATOM
    (65) literal -> . NUMBER
    (66) literal -> . HEXNUMBER
    (67) literal -> . BINNUMBER
    (68) literal -> . OCTNUMBER
    (69) literal -> . STRING
    (70) literal -> . TRUE
    (71) literal -> . FALSE
    (72) literal -> . NULL
    (55) array_literal -> . LBRACKET RBRACKET
    (56) array_literal -> . LBRACKET expr_list RBRACKET
    (57) dict_literal -> . LBRACE RBRACE
    (58) dict_literal -> . LBRACE NEWLINE RBRACE
    (59) dict_literal -> . LBRACE dict_pair_list RBRACE
    (83) unary_expr -> . MINUS expr
    (84) unary_expr -> . NOT expr
    (85) binary_expr -> . expr EQ expr
    (86) binary_expr -> . expr NE expr
    (87) binary_expr -> . expr GT expr
    (88) binary_expr -> . expr GE expr
    (89) binary_expr -> . expr LT expr
    (90) binary_expr -> . expr LE expr
    (91) binary_expr -> . expr PLUS expr
    (92) binary_expr -> . expr MINUS expr
    (93) binary_expr -> . expr MUL expr
    (94) binary_expr -> . expr DIV expr
    (95) binary_expr -> . expr REGEX expr
    (96) binary_expr -> . expr AND expr
    (97) binary_expr -> . expr OR expr
    (98) binary_expr -> . expr NOT expr
    (99) binary_expr -> . expr MOD expr
    (74) call -> . ATOM LPAREN RPAREN
    (75) call -> . ATOM LPAREN expr_list RPAREN
    (78) subscript_expr -> . expr LBRACKET expr RBRACKET
    (79) anon_function_expr -> . FUNCTION LPAREN RPAREN block
    (80) anon_function_expr -> . FUNCTION LPAREN RPAREN NEWLINE block
    (81) anon_function_expr -> . FUNCTION LPAREN function_argument_list RPAREN block
    (82) anon_function_expr -> . FUNCTION LPAREN function_argument_list RPAREN NEWLINE block
    (54) expr_expansion -> . EOPEN command RPAREN

    LPAREN          shift and go to state 35
    COPEN           shift and go to state 60
    ATOM            shift and go to state 38
    NUMBER          shift and go to state 43
    HEXNUMBER       shift and go to state 57
    BINNUMBER       shift and go to state 58
    OCTNUMBER       shift and go to state 54
    STRING          shift and go to state 44
    TRUE            shift and go to state 46
    FALSE           shift and go to state 51
    NULL            shift and go to state 56
    LBRACKET        shift and go to state 52
    LBRACE          shift and go to state 47
    MINUS           shift and go to state 40
    NOT             shift and go to state 45
    FUNCTION        shift and go to state 53
    EOPEN           shift and go to state 55

    binary_expr                    shift and go to state 33
    expr_expansion                 shift and go to state 39
    literal                        shift and go to state 34
    expr                           shift and go to state 167
    array_literal                  shift and go to state 49
    subscript_expr                 shift and go to state 59
    symbol                         shift and go to state 50
    anon_function_expr             shift and go to state 41
    call                           shift and go to state 36
    dict_literal                   shift and go to state 37
    unary_expr                     shift and go to state 42

state 109

    (89) binary_expr -> expr LT . expr
    (42) expr -> . symbol
    (43) expr -> . literal
    (44) expr -> . array_literal
    (45) expr -> . dict_literal
    (46) expr -> . unary_expr
    (47) expr -> . binary_expr
    (48) expr -> . call
    (49) expr -> . subscript_expr
    (50) expr -> . anon_function_expr
    (51) expr -> . expr_expansion
    (52) expr -> . LPAREN expr RPAREN
    (53) expr -> . COPEN expr RBRACE
    (73) symbol -> . ATOM
    (65) literal -> . NUMBER
    (66) literal -> . HEXNUMBER
    (67) literal -> . BINNUMBER
    (68) literal -> . OCTNUMBER
    (69) literal -> . STRING
    (70) literal -> . TRUE
    (71) literal -> . FALSE
    (72) literal -> . NULL
    (55) array_literal -> . LBRACKET RBRACKET
    (56) array_literal -> . LBRACKET expr_list RBRACKET
    (57) dict_literal -> . LBRACE RBRACE
    (58) dict_literal -> . LBRACE NEWLINE RBRACE
    (59) dict_literal -> . LBRACE dict_pair_list RBRACE
    (83) unary_expr -> . MINUS expr
    (84) unary_expr -> . NOT expr
    (85) binary_expr -> . expr EQ expr
    (86) binary_expr -> . expr NE expr
    (87) binary_expr -> . expr GT expr
    (88) binary_expr -> . expr GE expr
    (89) binary_expr -> . expr LT expr
    (90) binary_expr -> . expr LE expr
    (91) binary_expr -> . expr PLUS expr
    (92) binary_expr -> . expr MINUS expr
    (93) binary_expr -> . expr MUL expr
    (94) binary_expr -> . expr DIV expr
    (95) binary_expr -> . expr REGEX expr
    (96) binary_expr -> . expr AND expr
    (97) binary_expr -> . expr OR expr
    (98) binary_expr -> . expr NOT expr
    (99) binary_expr -> . expr MOD expr
    (74) call -> . ATOM LPAREN RPAREN
    (75) call -> . ATOM LPAREN expr_list RPAREN
    (78) subscript_expr -> . expr LBRACKET expr RBRACKET
    (79) anon_function_expr -> . FUNCTION LPAREN RPAREN block
    (80) anon_function_expr -> . FUNCTION LPAREN RPAREN NEWLINE block
    (81) anon_function_expr -> . FUNCTION LPAREN function_argument_list RPAREN block
    (82) anon_function_expr -> . FUNCTION LPAREN function_argument_list RPAREN NEWLINE block
    (54) expr_expansion -> . EOPEN command RPAREN

    LPAREN          shift and go to state 35
    COPEN           shift and go to state 60
    ATOM            shift and go to state 38
    NUMBER          shift and go to state 43
    HEXNUMBER       shift and go to state 57
    BINNUMBER       shift and go to state 58
    OCTNUMBER       shift and go to state 54
    STRING          shift and go to state 44
    TRUE            shift and go to state 46
    FALSE           shift and go to state 51
    NULL            shift and go to state 56
    LBRACKET        shift and go to state 52
    LBRACE          shift and go to state 47
    MINUS           shift and go to state 40
    NOT             shift and go to state 45
    FUNCTION        shift and go to state 53
    EOPEN           shift and go to state 55

    binary_expr                    shift and go to state 33
    expr_expansion                 shift and go to state 39
    literal                        shift and go to state 34
    expr                           shift and go to state 168
    array_literal                  shift and go to state 49
    subscript_expr                 shift and go to state 59
    symbol                         shift and go to state 50
    anon_function_expr             shift and go to state 41
    call                           shift and go to state 36
    dict_literal                   shift and go to state 37
    unary_expr                     shift and go to state 42

state 110

    (78) subscript_expr -> expr LBRACKET . expr RBRACKET
    (42) expr -> . symbol
    (43) expr -> . literal
    (44) expr -> . array_literal
    (45) expr -> . dict_literal
    (46) expr -> . unary_expr
    (47) expr -> . binary_expr
    (48) expr -> . call
    (49) expr -> . subscript_expr
    (50) expr -> . anon_function_expr
    (51) expr -> . expr_expansion
    (52) expr -> . LPAREN expr RPAREN
    (53) expr -> . COPEN expr RBRACE
    (73) symbol -> . ATOM
    (65) literal -> . NUMBER
    (66) literal -> . HEXNUMBER
    (67) literal -> . BINNUMBER
    (68) literal -> . OCTNUMBER
    (69) literal -> . STRING
    (70) literal -> . TRUE
    (71) literal -> . FALSE
    (72) literal -> . NULL
    (55) array_literal -> . LBRACKET RBRACKET
    (56) array_literal -> . LBRACKET expr_list RBRACKET
    (57) dict_literal -> . LBRACE RBRACE
    (58) dict_literal -> . LBRACE NEWLINE RBRACE
    (59) dict_literal -> . LBRACE dict_pair_list RBRACE
    (83) unary_expr -> . MINUS expr
    (84) unary_expr -> . NOT expr
    (85) binary_expr -> . expr EQ expr
    (86) binary_expr -> . expr NE expr
    (87) binary_expr -> . expr GT expr
    (88) binary_expr -> . expr GE expr
    (89) binary_expr -> . expr LT expr
    (90) binary_expr -> . expr LE expr
    (91) binary_expr -> . expr PLUS expr
    (92) binary_expr -> . expr MINUS expr
    (93) binary_expr -> . expr MUL expr
    (94) binary_expr -> . expr DIV expr
    (95) binary_expr -> . expr REGEX expr
    (96) binary_expr -> . expr AND expr
    (97) binary_expr -> . expr OR expr
    (98) binary_expr -> . expr NOT expr
    (99) binary_expr -> . expr MOD expr
    (74) call -> . ATOM LPAREN RPAREN
    (75) call -> . ATOM LPAREN expr_list RPAREN
    (78) subscript_expr -> . expr LBRACKET expr RBRACKET
    (79) anon_function_expr -> . FUNCTION LPAREN RPAREN block
    (80) anon_function_expr -> . FUNCTION LPAREN RPAREN NEWLINE block
    (81) anon_function_expr -> . FUNCTION LPAREN function_argument_list RPAREN block
    (82) anon_function_expr -> . FUNCTION LPAREN function_argument_list RPAREN NEWLINE block
    (54) expr_expansion -> . EOPEN command RPAREN

    LPAREN          shift and go to state 35
    COPEN           shift and go to state 60
    ATOM            shift and go to state 38
    NUMBER          shift and go to state 43
    HEXNUMBER       shift and go to state 57
    BINNUMBER       shift and go to state 58
    OCTNUMBER       shift and go to state 54
    STRING          shift and go to state 44
    TRUE            shift and go to state 46
    FALSE           shift and go to state 51
    NULL            shift and go to state 56
    LBRACKET        shift and go to state 52
    LBRACE          shift and go to state 47
    MINUS           shift and go to state 40
    NOT             shift and go to state 45
    FUNCTION        shift and go to state 53
    EOPEN           shift and go to state 55

    binary_expr                    shift and go to state 33
    expr_expansion                 shift and go to state 39
    literal                        shift and go to state 34
    expr                           shift and go to state 169
    array_literal                  shift and go to state 49
    subscript_expr                 shift and go to state 59
    symbol                         shift and go to state 50
    anon_function_expr             shift and go to state 41
    call                           shift and go to state 36
    dict_literal                   shift and go to state 37
    unary_expr                     shift and go to state 42

state 111

    (96) binary_expr -> expr AND . expr
    (42) expr -> . symbol
    (43) expr -> . literal
    (44) expr -> . array_literal
    (45) expr -> . dict_literal
    (46) expr -> . unary_expr
    (47) expr -> . binary_expr
    (48) expr -> . call
    (49) expr -> . subscript_expr
    (50) expr -> . anon_function_expr
    (51) expr -> . expr_expansion
    (52) expr -> . LPAREN expr RPAREN
    (53) expr -> . COPEN expr RBRACE
    (73) symbol -> . ATOM
    (65) literal -> . NUMBER
    (66) literal -> . HEXNUMBER
    (67) literal -> . BINNUMBER
    (68) literal -> . OCTNUMBER
    (69) literal -> . STRING
    (70) literal -> . TRUE
    (71) literal -> . FALSE
    (72) literal -> . NULL
    (55) array_literal -> . LBRACKET RBRACKET
    (56) array_literal -> . LBRACKET expr_list RBRACKET
    (57) dict_literal -> . LBRACE RBRACE
    (58) dict_literal -> . LBRACE NEWLINE RBRACE
    (59) dict_literal -> . LBRACE dict_pair_list RBRACE
    (83) unary_expr -> . MINUS expr
    (84) unary_expr -> . NOT expr
    (85) binary_expr -> . expr EQ expr
    (86) binary_expr -> . expr NE expr
    (87) binary_expr -> . expr GT expr
    (88) binary_expr -> . expr GE expr
    (89) binary_expr -> . expr LT expr
    (90) binary_expr -> . expr LE expr
    (91) binary_expr -> . expr PLUS expr
    (92) binary_expr -> . expr MINUS expr
    (93) binary_expr -> . expr MUL expr
    (94) binary_expr -> . expr DIV expr
    (95) binary_expr -> . expr REGEX expr
    (96) binary_expr -> . expr AND expr
    (97) binary_expr -> . expr OR expr
    (98) binary_expr -> . expr NOT expr
    (99) binary_expr -> . expr MOD expr
    (74) call -> . ATOM LPAREN RPAREN
    (75) call -> . ATOM LPAREN expr_list RPAREN
    (78) subscript_expr -> . expr LBRACKET expr RBRACKET
    (79) anon_function_expr -> . FUNCTION LPAREN RPAREN block
    (80) anon_function_expr -> . FUNCTION LPAREN RPAREN NEWLINE block
    (81) anon_function_expr -> . FUNCTION LPAREN function_argument_list RPAREN block
    (82) anon_function_expr -> . FUNCTION LPAREN function_argument_list RPAREN NEWLINE block
    (54) expr_expansion -> . EOPEN command RPAREN

    LPAREN          shift and go to state 35
    COPEN           shift and go to state 60
    ATOM            shift and go to state 38
    NUMBER          shift and go to state 43
    HEXNUMBER       shift and go to state 57
    BINNUMBER       shift and go to state 58
    OCTNUMBER       shift and go to state 54
    STRING          shift and go to state 44
    TRUE            shift and go to state 46
    FALSE           shift and go to state 51
    NULL            shift and go to state 56
    LBRACKET        shift and go to state 52
    LBRACE          shift and go to state 47
    MINUS           shift and go to state 40
    NOT             shift and go to state 45
    FUNCTION        shift and go to state 53
    EOPEN           shift and go to state 55

    binary_expr                    shift and go to state 33
    expr_expansion                 shift and go to state 39
    literal                        shift and go to state 34
    expr                           shift and go to state 170
    array_literal                  shift and go to state 49
    subscript_expr                 shift and go to state 59
    symbol                         shift and go to state 50
    anon_function_expr             shift and go to state 41
    call                           shift and go to state 36
    dict_literal                   shift and go to state 37
    unary_expr                     shift and go to state 42

state 112

    (99) binary_expr -> expr MOD . expr
    (42) expr -> . symbol
    (43) expr -> . literal
    (44) expr -> . array_literal
    (45) expr -> . dict_literal
    (46) expr -> . unary_expr
    (47) expr -> . binary_expr
    (48) expr -> . call
    (49) expr -> . subscript_expr
    (50) expr -> . anon_function_expr
    (51) expr -> . expr_expansion
    (52) expr -> . LPAREN expr RPAREN
    (53) expr -> . COPEN expr RBRACE
    (73) symbol -> . ATOM
    (65) literal -> . NUMBER
    (66) literal -> . HEXNUMBER
    (67) literal -> . BINNUMBER
    (68) literal -> . OCTNUMBER
    (69) literal -> . STRING
    (70) literal -> . TRUE
    (71) literal -> . FALSE
    (72) literal -> . NULL
    (55) array_literal -> . LBRACKET RBRACKET
    (56) array_literal -> . LBRACKET expr_list RBRACKET
    (57) dict_literal -> . LBRACE RBRACE
    (58) dict_literal -> . LBRACE NEWLINE RBRACE
    (59) dict_literal -> . LBRACE dict_pair_list RBRACE
    (83) unary_expr -> . MINUS expr
    (84) unary_expr -> . NOT expr
    (85) binary_expr -> . expr EQ expr
    (86) binary_expr -> . expr NE expr
    (87) binary_expr -> . expr GT expr
    (88) binary_expr -> . expr GE expr
    (89) binary_expr -> . expr LT expr
    (90) binary_expr -> . expr LE expr
    (91) binary_expr -> . expr PLUS expr
    (92) binary_expr -> . expr MINUS expr
    (93) binary_expr -> . expr MUL expr
    (94) binary_expr -> . expr DIV expr
    (95) binary_expr -> . expr REGEX expr
    (96) binary_expr -> . expr AND expr
    (97) binary_expr -> . expr OR expr
    (98) binary_expr -> . expr NOT expr
    (99) binary_expr -> . expr MOD expr
    (74) call -> . ATOM LPAREN RPAREN
    (75) call -> . ATOM LPAREN expr_list RPAREN
    (78) subscript_expr -> . expr LBRACKET expr RBRACKET
    (79) anon_function_expr -> . FUNCTION LPAREN RPAREN block
    (80) anon_function_expr -> . FUNCTION LPAREN RPAREN NEWLINE block
    (81) anon_function_expr -> . FUNCTION LPAREN function_argument_list RPAREN block
    (82) anon_function_expr -> . FUNCTION LPAREN function_argument_list RPAREN NEWLINE block
    (54) expr_expansion -> . EOPEN command RPAREN

    LPAREN          shift and go to state 35
    COPEN           shift and go to state 60
    ATOM            shift and go to state 38
    NUMBER          shift and go to state 43
    HEXNUMBER       shift and go to state 57
    BINNUMBER       shift and go to state 58
    OCTNUMBER       shift and go to state 54
    STRING          shift and go to state 44
    TRUE            shift and go to state 46
    FALSE           shift and go to state 51
    NULL            shift and go to state 56
    LBRACKET        shift and go to state 52
    LBRACE          shift and go to state 47
    MINUS           shift and go to state 40
    NOT             shift and go to state 45
    FUNCTION        shift and go to state 53
    EOPEN           shift and go to state 55

    binary_expr                    shift and go to state 33
    expr_expansion                 shift and go to state 39
    literal                        shift and go to state 34
    expr                           shift and go to state 171
    array_literal                  shift and go to state 49
    subscript_expr                 shift and go to state 59
    symbol                         shift and go to state 50
    anon_function_expr             shift and go to state 41
    call                           shift and go to state 36
    dict_literal                   shift and go to state 37
    unary_expr                     shift and go to state 42

state 113

    (95) binary_expr -> expr REGEX . expr
    (42) expr -> . symbol
    (43) expr -> . literal
    (44) expr -> . array_literal
    (45) expr -> . dict_literal
    (46) expr -> . unary_expr
    (47) expr -> . binary_expr
    (48) expr -> . call
    (49) expr -> . subscript_expr
    (50) expr -> . anon_function_expr
    (51) expr -> . expr_expansion
    (52) expr -> . LPAREN expr RPAREN
    (53) expr -> . COPEN expr RBRACE
    (73) symbol -> . ATOM
    (65) literal -> . NUMBER
    (66) literal -> . HEXNUMBER
    (67) literal -> . BINNUMBER
    (68) literal -> . OCTNUMBER
    (69) literal -> . STRING
    (70) literal -> . TRUE
    (71) literal -> . FALSE
    (72) literal -> . NULL
    (55) array_literal -> . LBRACKET RBRACKET
    (56) array_literal -> . LBRACKET expr_list RBRACKET
    (57) dict_literal -> . LBRACE RBRACE
    (58) dict_literal -> . LBRACE NEWLINE RBRACE
    (59) dict_literal -> . LBRACE dict_pair_list RBRACE
    (83) unary_expr -> . MINUS expr
    (84) unary_expr -> . NOT expr
    (85) binary_expr -> . expr EQ expr
    (86) binary_expr -> . expr NE expr
    (87) binary_expr -> . expr GT expr
    (88) binary_expr -> . expr GE expr
    (89) binary_expr -> . expr LT expr
    (90) binary_expr -> . expr LE expr
    (91) binary_expr -> . expr PLUS expr
    (92) binary_expr -> . expr MINUS expr
    (93) binary_expr -> . expr MUL expr
    (94) binary_expr -> . expr DIV expr
    (95) binary_expr -> . expr REGEX expr
    (96) binary_expr -> . expr AND expr
    (97) binary_expr -> . expr OR expr
    (98) binary_expr -> . expr NOT expr
    (99) binary_expr -> . expr MOD expr
    (74) call -> . ATOM LPAREN RPAREN
    (75) call -> . ATOM LPAREN expr_list RPAREN
    (78) subscript_expr -> . expr LBRACKET expr RBRACKET
    (79) anon_function_expr -> . FUNCTION LPAREN RPAREN block
    (80) anon_function_expr -> . FUNCTION LPAREN RPAREN NEWLINE block
    (81) anon_function_expr -> . FUNCTION LPAREN function_argument_list RPAREN block
    (82) anon_function_expr -> . FUNCTION LPAREN function_argument_list RPAREN NEWLINE block
    (54) expr_expansion -> . EOPEN command RPAREN

    LPAREN          shift and go to state 35
    COPEN           shift and go to state 60
    ATOM            shift and go to state 38
    NUMBER          shift and go to state 43
    HEXNUMBER       shift and go to state 57
    BINNUMBER       shift and go to state 58
    OCTNUMBER       shift and go to state 54
    STRING          shift and go to state 44
    TRUE            shift and go to state 46
    FALSE           shift and go to state 51
    NULL            shift and go to state 56
    LBRACKET        shift and go to state 52
    LBRACE          shift and go to state 47
    MINUS           shift and go to state 40
    NOT             shift and go to state 45
    FUNCTION        shift and go to state 53
    EOPEN           shift and go to state 55

    binary_expr                    shift and go to state 33
    expr_expansion                 shift and go to state 39
    literal                        shift and go to state 34
    expr                           shift and go to state 172
    array_literal                  shift and go to state 49
    subscript_expr                 shift and go to state 59
    symbol                         shift and go to state 50
    anon_function_expr             shift and go to state 41
    call                           shift and go to state 36
    dict_literal                   shift and go to state 37
    unary_expr                     shift and go to state 42

state 114

    (91) binary_expr -> expr PLUS . expr
    (42) expr -> . symbol
    (43) expr -> . literal
    (44) expr -> . array_literal
    (45) expr -> . dict_literal
    (46) expr -> . unary_expr
    (47) expr -> . binary_expr
    (48) expr -> . call
    (49) expr -> . subscript_expr
    (50) expr -> . anon_function_expr
    (51) expr -> . expr_expansion
    (52) expr -> . LPAREN expr RPAREN
    (53) expr -> . COPEN expr RBRACE
    (73) symbol -> . ATOM
    (65) literal -> . NUMBER
    (66) literal -> . HEXNUMBER
    (67) literal -> . BINNUMBER
    (68) literal -> . OCTNUMBER
    (69) literal -> . STRING
    (70) literal -> . TRUE
    (71) literal -> . FALSE
    (72) literal -> . NULL
    (55) array_literal -> . LBRACKET RBRACKET
    (56) array_literal -> . LBRACKET expr_list RBRACKET
    (57) dict_literal -> . LBRACE RBRACE
    (58) dict_literal -> . LBRACE NEWLINE RBRACE
    (59) dict_literal -> . LBRACE dict_pair_list RBRACE
    (83) unary_expr -> . MINUS expr
    (84) unary_expr -> . NOT expr
    (85) binary_expr -> . expr EQ expr
    (86) binary_expr -> . expr NE expr
    (87) binary_expr -> . expr GT expr
    (88) binary_expr -> . expr GE expr
    (89) binary_expr -> . expr LT expr
    (90) binary_expr -> . expr LE expr
    (91) binary_expr -> . expr PLUS expr
    (92) binary_expr -> . expr MINUS expr
    (93) binary_expr -> . expr MUL expr
    (94) binary_expr -> . expr DIV expr
    (95) binary_expr -> . expr REGEX expr
    (96) binary_expr -> . expr AND expr
    (97) binary_expr -> . expr OR expr
    (98) binary_expr -> . expr NOT expr
    (99) binary_expr -> . expr MOD expr
    (74) call -> . ATOM LPAREN RPAREN
    (75) call -> . ATOM LPAREN expr_list RPAREN
    (78) subscript_expr -> . expr LBRACKET expr RBRACKET
    (79) anon_function_expr -> . FUNCTION LPAREN RPAREN block
    (80) anon_function_expr -> . FUNCTION LPAREN RPAREN NEWLINE block
    (81) anon_function_expr -> . FUNCTION LPAREN function_argument_list RPAREN block
    (82) anon_function_expr -> . FUNCTION LPAREN function_argument_list RPAREN NEWLINE block
    (54) expr_expansion -> . EOPEN command RPAREN

    LPAREN          shift and go to state 35
    COPEN           shift and go to state 60
    ATOM            shift and go to state 38
    NUMBER          shift and go to state 43
    HEXNUMBER       shift and go to state 57
    BINNUMBER       shift and go to state 58
    OCTNUMBER       shift and go to state 54
    STRING          shift and go to state 44
    TRUE            shift and go to state 46
    FALSE           shift and go to state 51
    NULL            shift and go to state 56
    LBRACKET        shift and go to state 52
    LBRACE          shift and go to state 47
    MINUS           shift and go to state 40
    NOT             shift and go to state 45
    FUNCTION        shift and go to state 53
    EOPEN           shift and go to state 55

    binary_expr                    shift and go to state 33
    expr_expansion                 shift and go to state 39
    literal                        shift and go to state 34
    expr                           shift and go to state 173
    array_literal                  shift and go to state 49
    subscript_expr                 shift and go to state 59
    symbol                         shift and go to state 50
    anon_function_expr             shift and go to state 41
    call                           shift and go to state 36
    dict_literal                   shift and go to state 37
    unary_expr                     shift and go to state 42

state 115

    (55) array_literal -> LBRACKET RBRACKET .

    COMMA           reduce using rule 55 (array_literal -> LBRACKET RBRACKET .)
    error           reduce using rule 55 (array_literal -> LBRACKET RBRACKET .)
    ATOM            reduce using rule 55 (array_literal -> LBRACKET RBRACKET .)
    COPEN           reduce using rule 55 (array_literal -> LBRACKET RBRACKET .)
    LIST            reduce using rule 55 (array_literal -> LBRACKET RBRACKET .)
    UP              reduce using rule 55 (array_literal -> LBRACKET RBRACKET .)
    NUMBER          reduce using rule 55 (array_literal -> LBRACKET RBRACKET .)
    HEXNUMBER       reduce using rule 55 (array_literal -> LBRACKET RBRACKET .)
    BINNUMBER       reduce using rule 55 (array_literal -> LBRACKET RBRACKET .)
    OCTNUMBER       reduce using rule 55 (array_literal -> LBRACKET RBRACKET .)
    STRING          reduce using rule 55 (array_literal -> LBRACKET RBRACKET .)
    TRUE            reduce using rule 55 (array_literal -> LBRACKET RBRACKET .)
    FALSE           reduce using rule 55 (array_literal -> LBRACKET RBRACKET .)
    NULL            reduce using rule 55 (array_literal -> LBRACKET RBRACKET .)
    LBRACKET        reduce using rule 55 (array_literal -> LBRACKET RBRACKET .)
    LBRACE          reduce using rule 55 (array_literal -> LBRACKET RBRACKET .)
    REDIRECT        reduce using rule 55 (array_literal -> LBRACKET RBRACKET .)
    NEWLINE         reduce using rule 55 (array_literal -> LBRACKET RBRACKET .)
    $end            reduce using rule 55 (array_literal -> LBRACKET RBRACKET .)
    RBRACE          reduce using rule 55 (array_literal -> LBRACKET RBRACKET .)
    PIPE            reduce using rule 55 (array_literal -> LBRACKET RBRACKET .)
    RPAREN          reduce using rule 55 (array_literal -> LBRACKET RBRACKET .)
    COLON           reduce using rule 55 (array_literal -> LBRACKET RBRACKET .)
    EQ              reduce using rule 55 (array_literal -> LBRACKET RBRACKET .)
    NE              reduce using rule 55 (array_literal -> LBRACKET RBRACKET .)
    GT              reduce using rule 55 (array_literal -> LBRACKET RBRACKET .)
    GE              reduce using rule 55 (array_literal -> LBRACKET RBRACKET .)
    LT              reduce using rule 55 (array_literal -> LBRACKET RBRACKET .)
    LE              reduce using rule 55 (array_literal -> LBRACKET RBRACKET .)
    PLUS            reduce using rule 55 (array_literal -> LBRACKET RBRACKET .)
    MINUS           reduce using rule 55 (array_literal -> LBRACKET RBRACKET .)
    MUL             reduce using rule 55 (array_literal -> LBRACKET RBRACKET .)
    DIV             reduce using rule 55 (array_literal -> LBRACKET RBRACKET .)
    REGEX           reduce using rule 55 (array_literal -> LBRACKET RBRACKET .)
    AND             reduce using rule 55 (array_literal -> LBRACKET RBRACKET .)
    OR              reduce using rule 55 (array_literal -> LBRACKET RBRACKET .)
    NOT             reduce using rule 55 (array_literal -> LBRACKET RBRACKET .)
    MOD             reduce using rule 55 (array_literal -> LBRACKET RBRACKET .)
    RBRACKET        reduce using rule 55 (array_literal -> LBRACKET RBRACKET .)


state 116

    (56) array_literal -> LBRACKET expr_list . RBRACKET

    RBRACKET        shift and go to state 174


state 117

    (40) expr_list -> expr .
    (41) expr_list -> expr . COMMA expr_list
    (85) binary_expr -> expr . EQ expr
    (86) binary_expr -> expr . NE expr
    (87) binary_expr -> expr . GT expr
    (88) binary_expr -> expr . GE expr
    (89) binary_expr -> expr . LT expr
    (90) binary_expr -> expr . LE expr
    (91) binary_expr -> expr . PLUS expr
    (92) binary_expr -> expr . MINUS expr
    (93) binary_expr -> expr . MUL expr
    (94) binary_expr -> expr . DIV expr
    (95) binary_expr -> expr . REGEX expr
    (96) binary_expr -> expr . AND expr
    (97) binary_expr -> expr . OR expr
    (98) binary_expr -> expr . NOT expr
    (99) binary_expr -> expr . MOD expr
    (78) subscript_expr -> expr . LBRACKET expr RBRACKET

    RBRACKET        reduce using rule 40 (expr_list -> expr .)
    RPAREN          reduce using rule 40 (expr_list -> expr .)
    COMMA           shift and go to state 175
    EQ              shift and go to state 99
    NE              shift and go to state 100
    GT              shift and go to state 103
    GE              shift and go to state 108
    LT              shift and go to state 109
    LE              shift and go to state 105
    PLUS            shift and go to state 114
    MINUS           shift and go to state 106
    MUL             shift and go to state 101
    DIV             shift and go to state 102
    REGEX           shift and go to state 113
    AND             shift and go to state 111
    OR              shift and go to state 107
    NOT             shift and go to state 104
    MOD             shift and go to state 112
    LBRACKET        shift and go to state 110


state 118

    (79) anon_function_expr -> FUNCTION LPAREN . RPAREN block
    (80) anon_function_expr -> FUNCTION LPAREN . RPAREN NEWLINE block
    (81) anon_function_expr -> FUNCTION LPAREN . function_argument_list RPAREN block
    (82) anon_function_expr -> FUNCTION LPAREN . function_argument_list RPAREN NEWLINE block
    (34) function_argument_list -> . ATOM
    (35) function_argument_list -> . ATOM COMMA function_argument_list

    RPAREN          shift and go to state 178
    ATOM            shift and go to state 177

    function_argument_list         shift and go to state 176

state 119

    (73) symbol -> ATOM .

    PIPE            reduce using rule 73 (symbol -> ATOM .)
    error           reduce using rule 73 (symbol -> ATOM .)
    ATOM            reduce using rule 73 (symbol -> ATOM .)
    COPEN           reduce using rule 73 (symbol -> ATOM .)
    LIST            reduce using rule 73 (symbol -> ATOM .)
    UP              reduce using rule 73 (symbol -> ATOM .)
    NUMBER          reduce using rule 73 (symbol -> ATOM .)
    HEXNUMBER       reduce using rule 73 (symbol -> ATOM .)
    BINNUMBER       reduce using rule 73 (symbol -> ATOM .)
    OCTNUMBER       reduce using rule 73 (symbol -> ATOM .)
    STRING          reduce using rule 73 (symbol -> ATOM .)
    TRUE            reduce using rule 73 (symbol -> ATOM .)
    FALSE           reduce using rule 73 (symbol -> ATOM .)
    NULL            reduce using rule 73 (symbol -> ATOM .)
    LBRACKET        reduce using rule 73 (symbol -> ATOM .)
    LBRACE          reduce using rule 73 (symbol -> ATOM .)
    REDIRECT        reduce using rule 73 (symbol -> ATOM .)
    NEWLINE         reduce using rule 73 (symbol -> ATOM .)
    $end            reduce using rule 73 (symbol -> ATOM .)
    RBRACE          reduce using rule 73 (symbol -> ATOM .)
    RPAREN          reduce using rule 73 (symbol -> ATOM .)
    COMMA           reduce using rule 73 (symbol -> ATOM .)


state 120

    (54) expr_expansion -> EOPEN command . RPAREN

    RPAREN          shift and go to state 179


state 121

    (107) command_item -> symbol .

    PIPE            reduce using rule 107 (command_item -> symbol .)
    error           reduce using rule 107 (command_item -> symbol .)
    ATOM            reduce using rule 107 (command_item -> symbol .)
    COPEN           reduce using rule 107 (command_item -> symbol .)
    LIST            reduce using rule 107 (command_item -> symbol .)
    UP              reduce using rule 107 (command_item -> symbol .)
    NUMBER          reduce using rule 107 (command_item -> symbol .)
    HEXNUMBER       reduce using rule 107 (command_item -> symbol .)
    BINNUMBER       reduce using rule 107 (command_item -> symbol .)
    OCTNUMBER       reduce using rule 107 (command_item -> symbol .)
    STRING          reduce using rule 107 (command_item -> symbol .)
    TRUE            reduce using rule 107 (command_item -> symbol .)
    FALSE           reduce using rule 107 (command_item -> symbol .)
    NULL            reduce using rule 107 (command_item -> symbol .)
    LBRACKET        reduce using rule 107 (command_item -> symbol .)
    LBRACE          reduce using rule 107 (command_item -> symbol .)
    RPAREN          reduce using rule 107 (command_item -> symbol .)
    REDIRECT        reduce using rule 107 (command_item -> symbol .)
    NEWLINE         reduce using rule 107 (command_item -> symbol .)
    $end            reduce using rule 107 (command_item -> symbol .)
    RBRACE          reduce using rule 107 (command_item -> symbol .)


state 122

    (53) expr -> COPEN expr . RBRACE
    (85) binary_expr -> expr . EQ expr
    (86) binary_expr -> expr . NE expr
    (87) binary_expr -> expr . GT expr
    (88) binary_expr -> expr . GE expr
    (89) binary_expr -> expr . LT expr
    (90) binary_expr -> expr . LE expr
    (91) binary_expr -> expr . PLUS expr
    (92) binary_expr -> expr . MINUS expr
    (93) binary_expr -> expr . MUL expr
    (94) binary_expr -> expr . DIV expr
    (95) binary_expr -> expr . REGEX expr
    (96) binary_expr -> expr . AND expr
    (97) binary_expr -> expr . OR expr
    (98) binary_expr -> expr . NOT expr
    (99) binary_expr -> expr . MOD expr
    (78) subscript_expr -> expr . LBRACKET expr RBRACKET

    RBRACE          shift and go to state 180
    EQ              shift and go to state 99
    NE              shift and go to state 100
    GT              shift and go to state 103
    GE              shift and go to state 108
    LT              shift and go to state 109
    LE              shift and go to state 105
    PLUS            shift and go to state 114
    MINUS           shift and go to state 106
    MUL             shift and go to state 101
    DIV             shift and go to state 102
    REGEX           shift and go to state 113
    AND             shift and go to state 111
    OR              shift and go to state 107
    NOT             shift and go to state 104
    MOD             shift and go to state 112
    LBRACKET        shift and go to state 110


state 123

    (3) stmt_list -> stmt_redirect NEWLINE stmt_list .

    $end            reduce using rule 3 (stmt_list -> stmt_redirect NEWLINE stmt_list .)
    RBRACE          reduce using rule 3 (stmt_list -> stmt_redirect NEWLINE stmt_list .)


state 124

    (29) assignment_stmt -> subscript_left ASSIGN expr .
    (85) binary_expr -> expr . EQ expr
    (86) binary_expr -> expr . NE expr
    (87) binary_expr -> expr . GT expr
    (88) binary_expr -> expr . GE expr
    (89) binary_expr -> expr . LT expr
    (90) binary_expr -> expr . LE expr
    (91) binary_expr -> expr . PLUS expr
    (92) binary_expr -> expr . MINUS expr
    (93) binary_expr -> expr . MUL expr
    (94) binary_expr -> expr . DIV expr
    (95) binary_expr -> expr . REGEX expr
    (96) binary_expr -> expr . AND expr
    (97) binary_expr -> expr . OR expr
    (98) binary_expr -> expr . NOT expr
    (99) binary_expr -> expr . MOD expr
    (78) subscript_expr -> expr . LBRACKET expr RBRACKET

    REDIRECT        reduce using rule 29 (assignment_stmt -> subscript_left ASSIGN expr .)
    NEWLINE         reduce using rule 29 (assignment_stmt -> subscript_left ASSIGN expr .)
    RBRACE          reduce using rule 29 (assignment_stmt -> subscript_left ASSIGN expr .)
    $end            reduce using rule 29 (assignment_stmt -> subscript_left ASSIGN expr .)
    EQ              shift and go to state 99
    NE              shift and go to state 100
    GT              shift and go to state 103
    GE              shift and go to state 108
    LT              shift and go to state 109
    LE              shift and go to state 105
    PLUS            shift and go to state 114
    MINUS           shift and go to state 106
    MUL             shift and go to state 101
    DIV             shift and go to state 102
    REGEX           shift and go to state 113
    AND             shift and go to state 111
    OR              shift and go to state 107
    NOT             shift and go to state 104
    MOD             shift and go to state 112
    LBRACKET        shift and go to state 110


state 125

    (76) subscript_left -> subscript_left LBRACKET expr . RBRACKET
    (85) binary_expr -> expr . EQ expr
    (86) binary_expr -> expr . NE expr
    (87) binary_expr -> expr . GT expr
    (88) binary_expr -> expr . GE expr
    (89) binary_expr -> expr . LT expr
    (90) binary_expr -> expr . LE expr
    (91) binary_expr -> expr . PLUS expr
    (92) binary_expr -> expr . MINUS expr
    (93) binary_expr -> expr . MUL expr
    (94) binary_expr -> expr . DIV expr
    (95) binary_expr -> expr . REGEX expr
    (96) binary_expr -> expr . AND expr
    (97) binary_expr -> expr . OR expr
    (98) binary_expr -> expr . NOT expr
    (99) binary_expr -> expr . MOD expr
    (78) subscript_expr -> expr . LBRACKET expr RBRACKET

    RBRACKET        shift and go to state 181
    EQ              shift and go to state 99
    NE              shift and go to state 100
    GT              shift and go to state 103
    GE              shift and go to state 108
    LT              shift and go to state 109
    LE              shift and go to state 105
    PLUS            shift and go to state 114
    MINUS           shift and go to state 106
    MUL             shift and go to state 101
    DIV             shift and go to state 102
    REGEX           shift and go to state 113
    AND             shift and go to state 111
    OR              shift and go to state 107
    NOT             shift and go to state 104
    MOD             shift and go to state 112
    LBRACKET        shift and go to state 110


state 126

    (75) call -> ATOM LPAREN expr_list . RPAREN

    RPAREN          shift and go to state 182


state 127

    (74) call -> ATOM LPAREN RPAREN .

    RBRACE          reduce using rule 74 (call -> ATOM LPAREN RPAREN .)
    EQ              reduce using rule 74 (call -> ATOM LPAREN RPAREN .)
    NE              reduce using rule 74 (call -> ATOM LPAREN RPAREN .)
    GT              reduce using rule 74 (call -> ATOM LPAREN RPAREN .)
    GE              reduce using rule 74 (call -> ATOM LPAREN RPAREN .)
    LT              reduce using rule 74 (call -> ATOM LPAREN RPAREN .)
    LE              reduce using rule 74 (call -> ATOM LPAREN RPAREN .)
    PLUS            reduce using rule 74 (call -> ATOM LPAREN RPAREN .)
    MINUS           reduce using rule 74 (call -> ATOM LPAREN RPAREN .)
    MUL             reduce using rule 74 (call -> ATOM LPAREN RPAREN .)
    DIV             reduce using rule 74 (call -> ATOM LPAREN RPAREN .)
    REGEX           reduce using rule 74 (call -> ATOM LPAREN RPAREN .)
    AND             reduce using rule 74 (call -> ATOM LPAREN RPAREN .)
    OR              reduce using rule 74 (call -> ATOM LPAREN RPAREN .)
    NOT             reduce using rule 74 (call -> ATOM LPAREN RPAREN .)
    MOD             reduce using rule 74 (call -> ATOM LPAREN RPAREN .)
    LBRACKET        reduce using rule 74 (call -> ATOM LPAREN RPAREN .)
    REDIRECT        reduce using rule 74 (call -> ATOM LPAREN RPAREN .)
    NEWLINE         reduce using rule 74 (call -> ATOM LPAREN RPAREN .)
    $end            reduce using rule 74 (call -> ATOM LPAREN RPAREN .)
    RPAREN          reduce using rule 74 (call -> ATOM LPAREN RPAREN .)
    COLON           reduce using rule 74 (call -> ATOM LPAREN RPAREN .)
    COMMA           reduce using rule 74 (call -> ATOM LPAREN RPAREN .)
    RBRACKET        reduce using rule 74 (call -> ATOM LPAREN RPAREN .)


state 128

    (28) assignment_stmt -> ATOM ASSIGN expr .
    (85) binary_expr -> expr . EQ expr
    (86) binary_expr -> expr . NE expr
    (87) binary_expr -> expr . GT expr
    (88) binary_expr -> expr . GE expr
    (89) binary_expr -> expr . LT expr
    (90) binary_expr -> expr . LE expr
    (91) binary_expr -> expr . PLUS expr
    (92) binary_expr -> expr . MINUS expr
    (93) binary_expr -> expr . MUL expr
    (94) binary_expr -> expr . DIV expr
    (95) binary_expr -> expr . REGEX expr
    (96) binary_expr -> expr . AND expr
    (97) binary_expr -> expr . OR expr
    (98) binary_expr -> expr . NOT expr
    (99) binary_expr -> expr . MOD expr
    (78) subscript_expr -> expr . LBRACKET expr RBRACKET

    REDIRECT        reduce using rule 28 (assignment_stmt -> ATOM ASSIGN expr .)
    NEWLINE         reduce using rule 28 (assignment_stmt -> ATOM ASSIGN expr .)
    RBRACE          reduce using rule 28 (assignment_stmt -> ATOM ASSIGN expr .)
    $end            reduce using rule 28 (assignment_stmt -> ATOM ASSIGN expr .)
    EQ              shift and go to state 99
    NE              shift and go to state 100
    GT              shift and go to state 103
    GE              shift and go to state 108
    LT              shift and go to state 109
    LE              shift and go to state 105
    PLUS            shift and go to state 114
    MINUS           shift and go to state 106
    MUL             shift and go to state 101
    DIV             shift and go to state 102
    REGEX           shift and go to state 113
    AND             shift and go to state 111
    OR              shift and go to state 107
    NOT             shift and go to state 104
    MOD             shift and go to state 112
    LBRACKET        shift and go to state 110


state 129

    (23) if_stmt -> IF LPAREN expr . RPAREN block
    (24) if_stmt -> IF LPAREN expr . RPAREN block ELSE block
    (85) binary_expr -> expr . EQ expr
    (86) binary_expr -> expr . NE expr
    (87) binary_expr -> expr . GT expr
    (88) binary_expr -> expr . GE expr
    (89) binary_expr -> expr . LT expr
    (90) binary_expr -> expr . LE expr
    (91) binary_expr -> expr . PLUS expr
    (92) binary_expr -> expr . MINUS expr
    (93) binary_expr -> expr . MUL expr
    (94) binary_expr -> expr . DIV expr
    (95) binary_expr -> expr . REGEX expr
    (96) binary_expr -> expr . AND expr
    (97) binary_expr -> expr . OR expr
    (98) binary_expr -> expr . NOT expr
    (99) binary_expr -> expr . MOD expr
    (78) subscript_expr -> expr . LBRACKET expr RBRACKET

    RPAREN          shift and go to state 183
    EQ              shift and go to state 99
    NE              shift and go to state 100
    GT              shift and go to state 103
    GE              shift and go to state 108
    LT              shift and go to state 109
    LE              shift and go to state 105
    PLUS            shift and go to state 114
    MINUS           shift and go to state 106
    MUL             shift and go to state 101
    DIV             shift and go to state 102
    REGEX           shift and go to state 113
    AND             shift and go to state 111
    OR              shift and go to state 107
    NOT             shift and go to state 104
    MOD             shift and go to state 112
    LBRACKET        shift and go to state 110


state 130

    (111) parameter_list -> parameter parameter_list .

    PIPE            reduce using rule 111 (parameter_list -> parameter parameter_list .)
    REDIRECT        reduce using rule 111 (parameter_list -> parameter parameter_list .)
    NEWLINE         reduce using rule 111 (parameter_list -> parameter parameter_list .)
    $end            reduce using rule 111 (parameter_list -> parameter parameter_list .)
    RBRACE          reduce using rule 111 (parameter_list -> parameter parameter_list .)
    RPAREN          reduce using rule 111 (parameter_list -> parameter parameter_list .)


state 131

    (126) binary_parameter -> ATOM EQ . parameter
    (112) parameter -> . set_parameter
    (113) parameter -> . binary_parameter
    (114) parameter -> . error
    (115) set_parameter -> . unary_parameter
    (116) set_parameter -> . unary_parameter COMMA set_parameter
    (117) set_parameter -> . unary_parameter COMMA error
    (125) binary_parameter -> . ATOM ASSIGN parameter
    (126) binary_parameter -> . ATOM EQ parameter
    (127) binary_parameter -> . ATOM NE parameter
    (128) binary_parameter -> . ATOM GT parameter
    (129) binary_parameter -> . ATOM GE parameter
    (130) binary_parameter -> . ATOM LT parameter
    (131) binary_parameter -> . ATOM LE parameter
    (132) binary_parameter -> . ATOM REGEX parameter
    (133) binary_parameter -> . ATOM INC parameter
    (134) binary_parameter -> . ATOM DEC parameter
    (118) unary_parameter -> . symbol
    (119) unary_parameter -> . literal
    (120) unary_parameter -> . array_literal
    (121) unary_parameter -> . dict_literal
    (122) unary_parameter -> . COPEN expr RBRACE
    (123) unary_parameter -> . LIST
    (124) unary_parameter -> . UP
    (73) symbol -> . ATOM
    (65) literal -> . NUMBER
    (66) literal -> . HEXNUMBER
    (67) literal -> . BINNUMBER
    (68) literal -> . OCTNUMBER
    (69) literal -> . STRING
    (70) literal -> . TRUE
    (71) literal -> . FALSE
    (72) literal -> . NULL
    (55) array_literal -> . LBRACKET RBRACKET
    (56) array_literal -> . LBRACKET expr_list RBRACKET
    (57) dict_literal -> . LBRACE RBRACE
    (58) dict_literal -> . LBRACE NEWLINE RBRACE
    (59) dict_literal -> . LBRACE dict_pair_list RBRACE

    error           shift and go to state 77
    ATOM            shift and go to state 74
    COPEN           shift and go to state 80
    LIST            shift and go to state 76
    UP              shift and go to state 73
    NUMBER          shift and go to state 43
    HEXNUMBER       shift and go to state 57
    BINNUMBER       shift and go to state 58
    OCTNUMBER       shift and go to state 54
    STRING          shift and go to state 44
    TRUE            shift and go to state 46
    FALSE           shift and go to state 51
    NULL            shift and go to state 56
    LBRACKET        shift and go to state 52
    LBRACE          shift and go to state 47

    dict_literal                   shift and go to state 75
    array_literal                  shift and go to state 70
    set_parameter                  shift and go to state 78
    symbol                         shift and go to state 71
    unary_parameter                shift and go to state 79
    parameter                      shift and go to state 184
    binary_parameter               shift and go to state 69
    literal                        shift and go to state 72

state 132

    (127) binary_parameter -> ATOM NE . parameter
    (112) parameter -> . set_parameter
    (113) parameter -> . binary_parameter
    (114) parameter -> . error
    (115) set_parameter -> . unary_parameter
    (116) set_parameter -> . unary_parameter COMMA set_parameter
    (117) set_parameter -> . unary_parameter COMMA error
    (125) binary_parameter -> . ATOM ASSIGN parameter
    (126) binary_parameter -> . ATOM EQ parameter
    (127) binary_parameter -> . ATOM NE parameter
    (128) binary_parameter -> . ATOM GT parameter
    (129) binary_parameter -> . ATOM GE parameter
    (130) binary_parameter -> . ATOM LT parameter
    (131) binary_parameter -> . ATOM LE parameter
    (132) binary_parameter -> . ATOM REGEX parameter
    (133) binary_parameter -> . ATOM INC parameter
    (134) binary_parameter -> . ATOM DEC parameter
    (118) unary_parameter -> . symbol
    (119) unary_parameter -> . literal
    (120) unary_parameter -> . array_literal
    (121) unary_parameter -> . dict_literal
    (122) unary_parameter -> . COPEN expr RBRACE
    (123) unary_parameter -> . LIST
    (124) unary_parameter -> . UP
    (73) symbol -> . ATOM
    (65) literal -> . NUMBER
    (66) literal -> . HEXNUMBER
    (67) literal -> . BINNUMBER
    (68) literal -> . OCTNUMBER
    (69) literal -> . STRING
    (70) literal -> . TRUE
    (71) literal -> . FALSE
    (72) literal -> . NULL
    (55) array_literal -> . LBRACKET RBRACKET
    (56) array_literal -> . LBRACKET expr_list RBRACKET
    (57) dict_literal -> . LBRACE RBRACE
    (58) dict_literal -> . LBRACE NEWLINE RBRACE
    (59) dict_literal -> . LBRACE dict_pair_list RBRACE

    error           shift and go to state 77
    ATOM            shift and go to state 74
    COPEN           shift and go to state 80
    LIST            shift and go to state 76
    UP              shift and go to state 73
    NUMBER          shift and go to state 43
    HEXNUMBER       shift and go to state 57
    BINNUMBER       shift and go to state 58
    OCTNUMBER       shift and go to state 54
    STRING          shift and go to state 44
    TRUE            shift and go to state 46
    FALSE           shift and go to state 51
    NULL            shift and go to state 56
    LBRACKET        shift and go to state 52
    LBRACE          shift and go to state 47

    dict_literal                   shift and go to state 75
    array_literal                  shift and go to state 70
    set_parameter                  shift and go to state 78
    symbol                         shift and go to state 71
    unary_parameter                shift and go to state 79
    parameter                      shift and go to state 185
    binary_parameter               shift and go to state 69
    literal                        shift and go to state 72

state 133

    (133) binary_parameter -> ATOM INC . parameter
    (112) parameter -> . set_parameter
    (113) parameter -> . binary_parameter
    (114) parameter -> . error
    (115) set_parameter -> . unary_parameter
    (116) set_parameter -> . unary_parameter COMMA set_parameter
    (117) set_parameter -> . unary_parameter COMMA error
    (125) binary_parameter -> . ATOM ASSIGN parameter
    (126) binary_parameter -> . ATOM EQ parameter
    (127) binary_parameter -> . ATOM NE parameter
    (128) binary_parameter -> . ATOM GT parameter
    (129) binary_parameter -> . ATOM GE parameter
    (130) binary_parameter -> . ATOM LT parameter
    (131) binary_parameter -> . ATOM LE parameter
    (132) binary_parameter -> . ATOM REGEX parameter
    (133) binary_parameter -> . ATOM INC parameter
    (134) binary_parameter -> . ATOM DEC parameter
    (118) unary_parameter -> . symbol
    (119) unary_parameter -> . literal
    (120) unary_parameter -> . array_literal
    (121) unary_parameter -> . dict_literal
    (122) unary_parameter -> . COPEN expr RBRACE
    (123) unary_parameter -> . LIST
    (124) unary_parameter -> . UP
    (73) symbol -> . ATOM
    (65) literal -> . NUMBER
    (66) literal -> . HEXNUMBER
    (67) literal -> . BINNUMBER
    (68) literal -> . OCTNUMBER
    (69) literal -> . STRING
    (70) literal -> . TRUE
    (71) literal -> . FALSE
    (72) literal -> . NULL
    (55) array_literal -> . LBRACKET RBRACKET
    (56) array_literal -> . LBRACKET expr_list RBRACKET
    (57) dict_literal -> . LBRACE RBRACE
    (58) dict_literal -> . LBRACE NEWLINE RBRACE
    (59) dict_literal -> . LBRACE dict_pair_list RBRACE

    error           shift and go to state 77
    ATOM            shift and go to state 74
    COPEN           shift and go to state 80
    LIST            shift and go to state 76
    UP              shift and go to state 73
    NUMBER          shift and go to state 43
    HEXNUMBER       shift and go to state 57
    BINNUMBER       shift and go to state 58
    OCTNUMBER       shift and go to state 54
    STRING          shift and go to state 44
    TRUE            shift and go to state 46
    FALSE           shift and go to state 51
    NULL            shift and go to state 56
    LBRACKET        shift and go to state 52
    LBRACE          shift and go to state 47

    dict_literal                   shift and go to state 75
    array_literal                  shift and go to state 70
    set_parameter                  shift and go to state 78
    symbol                         shift and go to state 71
    unary_parameter                shift and go to state 79
    parameter                      shift and go to state 186
    binary_parameter               shift and go to state 69
    literal                        shift and go to state 72

state 134

    (128) binary_parameter -> ATOM GT . parameter
    (112) parameter -> . set_parameter
    (113) parameter -> . binary_parameter
    (114) parameter -> . error
    (115) set_parameter -> . unary_parameter
    (116) set_parameter -> . unary_parameter COMMA set_parameter
    (117) set_parameter -> . unary_parameter COMMA error
    (125) binary_parameter -> . ATOM ASSIGN parameter
    (126) binary_parameter -> . ATOM EQ parameter
    (127) binary_parameter -> . ATOM NE parameter
    (128) binary_parameter -> . ATOM GT parameter
    (129) binary_parameter -> . ATOM GE parameter
    (130) binary_parameter -> . ATOM LT parameter
    (131) binary_parameter -> . ATOM LE parameter
    (132) binary_parameter -> . ATOM REGEX parameter
    (133) binary_parameter -> . ATOM INC parameter
    (134) binary_parameter -> . ATOM DEC parameter
    (118) unary_parameter -> . symbol
    (119) unary_parameter -> . literal
    (120) unary_parameter -> . array_literal
    (121) unary_parameter -> . dict_literal
    (122) unary_parameter -> . COPEN expr RBRACE
    (123) unary_parameter -> . LIST
    (124) unary_parameter -> . UP
    (73) symbol -> . ATOM
    (65) literal -> . NUMBER
    (66) literal -> . HEXNUMBER
    (67) literal -> . BINNUMBER
    (68) literal -> . OCTNUMBER
    (69) literal -> . STRING
    (70) literal -> . TRUE
    (71) literal -> . FALSE
    (72) literal -> . NULL
    (55) array_literal -> . LBRACKET RBRACKET
    (56) array_literal -> . LBRACKET expr_list RBRACKET
    (57) dict_literal -> . LBRACE RBRACE
    (58) dict_literal -> . LBRACE NEWLINE RBRACE
    (59) dict_literal -> . LBRACE dict_pair_list RBRACE

    error           shift and go to state 77
    ATOM            shift and go to state 74
    COPEN           shift and go to state 80
    LIST            shift and go to state 76
    UP              shift and go to state 73
    NUMBER          shift and go to state 43
    HEXNUMBER       shift and go to state 57
    BINNUMBER       shift and go to state 58
    OCTNUMBER       shift and go to state 54
    STRING          shift and go to state 44
    TRUE            shift and go to state 46
    FALSE           shift and go to state 51
    NULL            shift and go to state 56
    LBRACKET        shift and go to state 52
    LBRACE          shift and go to state 47

    dict_literal                   shift and go to state 75
    array_literal                  shift and go to state 70
    set_parameter                  shift and go to state 78
    symbol                         shift and go to state 71
    unary_parameter                shift and go to state 79
    parameter                      shift and go to state 187
    binary_parameter               shift and go to state 69
    literal                        shift and go to state 72

state 135

    (125) binary_parameter -> ATOM ASSIGN . parameter
    (112) parameter -> . set_parameter
    (113) parameter -> . binary_parameter
    (114) parameter -> . error
    (115) set_parameter -> . unary_parameter
    (116) set_parameter -> . unary_parameter COMMA set_parameter
    (117) set_parameter -> . unary_parameter COMMA error
    (125) binary_parameter -> . ATOM ASSIGN parameter
    (126) binary_parameter -> . ATOM EQ parameter
    (127) binary_parameter -> . ATOM NE parameter
    (128) binary_parameter -> . ATOM GT parameter
    (129) binary_parameter -> . ATOM GE parameter
    (130) binary_parameter -> . ATOM LT parameter
    (131) binary_parameter -> . ATOM LE parameter
    (132) binary_parameter -> . ATOM REGEX parameter
    (133) binary_parameter -> . ATOM INC parameter
    (134) binary_parameter -> . ATOM DEC parameter
    (118) unary_parameter -> . symbol
    (119) unary_parameter -> . literal
    (120) unary_parameter -> . array_literal
    (121) unary_parameter -> . dict_literal
    (122) unary_parameter -> . COPEN expr RBRACE
    (123) unary_parameter -> . LIST
    (124) unary_parameter -> . UP
    (73) symbol -> . ATOM
    (65) literal -> . NUMBER
    (66) literal -> . HEXNUMBER
    (67) literal -> . BINNUMBER
    (68) literal -> . OCTNUMBER
    (69) literal -> . STRING
    (70) literal -> . TRUE
    (71) literal -> . FALSE
    (72) literal -> . NULL
    (55) array_literal -> . LBRACKET RBRACKET
    (56) array_literal -> . LBRACKET expr_list RBRACKET
    (57) dict_literal -> . LBRACE RBRACE
    (58) dict_literal -> . LBRACE NEWLINE RBRACE
    (59) dict_literal -> . LBRACE dict_pair_list RBRACE

    error           shift and go to state 77
    ATOM            shift and go to state 74
    COPEN           shift and go to state 80
    LIST            shift and go to state 76
    UP              shift and go to state 73
    NUMBER          shift and go to state 43
    HEXNUMBER       shift and go to state 57
    BINNUMBER       shift and go to state 58
    OCTNUMBER       shift and go to state 54
    STRING          shift and go to state 44
    TRUE            shift and go to state 46
    FALSE           shift and go to state 51
    NULL            shift and go to state 56
    LBRACKET        shift and go to state 52
    LBRACE          shift and go to state 47

    dict_literal                   shift and go to state 75
    array_literal                  shift and go to state 70
    set_parameter                  shift and go to state 78
    symbol                         shift and go to state 71
    unary_parameter                shift and go to state 79
    parameter                      shift and go to state 188
    binary_parameter               shift and go to state 69
    literal                        shift and go to state 72

state 136

    (131) binary_parameter -> ATOM LE . parameter
    (112) parameter -> . set_parameter
    (113) parameter -> . binary_parameter
    (114) parameter -> . error
    (115) set_parameter -> . unary_parameter
    (116) set_parameter -> . unary_parameter COMMA set_parameter
    (117) set_parameter -> . unary_parameter COMMA error
    (125) binary_parameter -> . ATOM ASSIGN parameter
    (126) binary_parameter -> . ATOM EQ parameter
    (127) binary_parameter -> . ATOM NE parameter
    (128) binary_parameter -> . ATOM GT parameter
    (129) binary_parameter -> . ATOM GE parameter
    (130) binary_parameter -> . ATOM LT parameter
    (131) binary_parameter -> . ATOM LE parameter
    (132) binary_parameter -> . ATOM REGEX parameter
    (133) binary_parameter -> . ATOM INC parameter
    (134) binary_parameter -> . ATOM DEC parameter
    (118) unary_parameter -> . symbol
    (119) unary_parameter -> . literal
    (120) unary_parameter -> . array_literal
    (121) unary_parameter -> . dict_literal
    (122) unary_parameter -> . COPEN expr RBRACE
    (123) unary_parameter -> . LIST
    (124) unary_parameter -> . UP
    (73) symbol -> . ATOM
    (65) literal -> . NUMBER
    (66) literal -> . HEXNUMBER
    (67) literal -> . BINNUMBER
    (68) literal -> . OCTNUMBER
    (69) literal -> . STRING
    (70) literal -> . TRUE
    (71) literal -> . FALSE
    (72) literal -> . NULL
    (55) array_literal -> . LBRACKET RBRACKET
    (56) array_literal -> . LBRACKET expr_list RBRACKET
    (57) dict_literal -> . LBRACE RBRACE
    (58) dict_literal -> . LBRACE NEWLINE RBRACE
    (59) dict_literal -> . LBRACE dict_pair_list RBRACE

    error           shift and go to state 77
    ATOM            shift and go to state 74
    COPEN           shift and go to state 80
    LIST            shift and go to state 76
    UP              shift and go to state 73
    NUMBER          shift and go to state 43
    HEXNUMBER       shift and go to state 57
    BINNUMBER       shift and go to state 58
    OCTNUMBER       shift and go to state 54
    STRING          shift and go to state 44
    TRUE            shift and go to state 46
    FALSE           shift and go to state 51
    NULL            shift and go to state 56
    LBRACKET        shift and go to state 52
    LBRACE          shift and go to state 47

    dict_literal                   shift and go to state 75
    array_literal                  shift and go to state 70
    set_parameter                  shift and go to state 78
    symbol                         shift and go to state 71
    unary_parameter                shift and go to state 79
    parameter                      shift and go to state 189
    binary_parameter               shift and go to state 69
    literal                        shift and go to state 72

state 137

    (129) binary_parameter -> ATOM GE . parameter
    (112) parameter -> . set_parameter
    (113) parameter -> . binary_parameter
    (114) parameter -> . error
    (115) set_parameter -> . unary_parameter
    (116) set_parameter -> . unary_parameter COMMA set_parameter
    (117) set_parameter -> . unary_parameter COMMA error
    (125) binary_parameter -> . ATOM ASSIGN parameter
    (126) binary_parameter -> . ATOM EQ parameter
    (127) binary_parameter -> . ATOM NE parameter
    (128) binary_parameter -> . ATOM GT parameter
    (129) binary_parameter -> . ATOM GE parameter
    (130) binary_parameter -> . ATOM LT parameter
    (131) binary_parameter -> . ATOM LE parameter
    (132) binary_parameter -> . ATOM REGEX parameter
    (133) binary_parameter -> . ATOM INC parameter
    (134) binary_parameter -> . ATOM DEC parameter
    (118) unary_parameter -> . symbol
    (119) unary_parameter -> . literal
    (120) unary_parameter -> . array_literal
    (121) unary_parameter -> . dict_literal
    (122) unary_parameter -> . COPEN expr RBRACE
    (123) unary_parameter -> . LIST
    (124) unary_parameter -> . UP
    (73) symbol -> . ATOM
    (65) literal -> . NUMBER
    (66) literal -> . HEXNUMBER
    (67) literal -> . BINNUMBER
    (68) literal -> . OCTNUMBER
    (69) literal -> . STRING
    (70) literal -> . TRUE
    (71) literal -> . FALSE
    (72) literal -> . NULL
    (55) array_literal -> . LBRACKET RBRACKET
    (56) array_literal -> . LBRACKET expr_list RBRACKET
    (57) dict_literal -> . LBRACE RBRACE
    (58) dict_literal -> . LBRACE NEWLINE RBRACE
    (59) dict_literal -> . LBRACE dict_pair_list RBRACE

    error           shift and go to state 77
    ATOM            shift and go to state 74
    COPEN           shift and go to state 80
    LIST            shift and go to state 76
    UP              shift and go to state 73
    NUMBER          shift and go to state 43
    HEXNUMBER       shift and go to state 57
    BINNUMBER       shift and go to state 58
    OCTNUMBER       shift and go to state 54
    STRING          shift and go to state 44
    TRUE            shift and go to state 46
    FALSE           shift and go to state 51
    NULL            shift and go to state 56
    LBRACKET        shift and go to state 52
    LBRACE          shift and go to state 47

    dict_literal                   shift and go to state 75
    array_literal                  shift and go to state 70
    set_parameter                  shift and go to state 78
    symbol                         shift and go to state 71
    unary_parameter                shift and go to state 79
    parameter                      shift and go to state 190
    binary_parameter               shift and go to state 69
    literal                        shift and go to state 72

state 138

    (130) binary_parameter -> ATOM LT . parameter
    (112) parameter -> . set_parameter
    (113) parameter -> . binary_parameter
    (114) parameter -> . error
    (115) set_parameter -> . unary_parameter
    (116) set_parameter -> . unary_parameter COMMA set_parameter
    (117) set_parameter -> . unary_parameter COMMA error
    (125) binary_parameter -> . ATOM ASSIGN parameter
    (126) binary_parameter -> . ATOM EQ parameter
    (127) binary_parameter -> . ATOM NE parameter
    (128) binary_parameter -> . ATOM GT parameter
    (129) binary_parameter -> . ATOM GE parameter
    (130) binary_parameter -> . ATOM LT parameter
    (131) binary_parameter -> . ATOM LE parameter
    (132) binary_parameter -> . ATOM REGEX parameter
    (133) binary_parameter -> . ATOM INC parameter
    (134) binary_parameter -> . ATOM DEC parameter
    (118) unary_parameter -> . symbol
    (119) unary_parameter -> . literal
    (120) unary_parameter -> . array_literal
    (121) unary_parameter -> . dict_literal
    (122) unary_parameter -> . COPEN expr RBRACE
    (123) unary_parameter -> . LIST
    (124) unary_parameter -> . UP
    (73) symbol -> . ATOM
    (65) literal -> . NUMBER
    (66) literal -> . HEXNUMBER
    (67) literal -> . BINNUMBER
    (68) literal -> . OCTNUMBER
    (69) literal -> . STRING
    (70) literal -> . TRUE
    (71) literal -> . FALSE
    (72) literal -> . NULL
    (55) array_literal -> . LBRACKET RBRACKET
    (56) array_literal -> . LBRACKET expr_list RBRACKET
    (57) dict_literal -> . LBRACE RBRACE
    (58) dict_literal -> . LBRACE NEWLINE RBRACE
    (59) dict_literal -> . LBRACE dict_pair_list RBRACE

    error           shift and go to state 77
    ATOM            shift and go to state 74
    COPEN           shift and go to state 80
    LIST            shift and go to state 76
    UP              shift and go to state 73
    NUMBER          shift and go to state 43
    HEXNUMBER       shift and go to state 57
    BINNUMBER       shift and go to state 58
    OCTNUMBER       shift and go to state 54
    STRING          shift and go to state 44
    TRUE            shift and go to state 46
    FALSE           shift and go to state 51
    NULL            shift and go to state 56
    LBRACKET        shift and go to state 52
    LBRACE          shift and go to state 47

    dict_literal                   shift and go to state 75
    array_literal                  shift and go to state 70
    set_parameter                  shift and go to state 78
    symbol                         shift and go to state 71
    unary_parameter                shift and go to state 79
    parameter                      shift and go to state 191
    binary_parameter               shift and go to state 69
    literal                        shift and go to state 72

state 139

    (134) binary_parameter -> ATOM DEC . parameter
    (112) parameter -> . set_parameter
    (113) parameter -> . binary_parameter
    (114) parameter -> . error
    (115) set_parameter -> . unary_parameter
    (116) set_parameter -> . unary_parameter COMMA set_parameter
    (117) set_parameter -> . unary_parameter COMMA error
    (125) binary_parameter -> . ATOM ASSIGN parameter
    (126) binary_parameter -> . ATOM EQ parameter
    (127) binary_parameter -> . ATOM NE parameter
    (128) binary_parameter -> . ATOM GT parameter
    (129) binary_parameter -> . ATOM GE parameter
    (130) binary_parameter -> . ATOM LT parameter
    (131) binary_parameter -> . ATOM LE parameter
    (132) binary_parameter -> . ATOM REGEX parameter
    (133) binary_parameter -> . ATOM INC parameter
    (134) binary_parameter -> . ATOM DEC parameter
    (118) unary_parameter -> . symbol
    (119) unary_parameter -> . literal
    (120) unary_parameter -> . array_literal
    (121) unary_parameter -> . dict_literal
    (122) unary_parameter -> . COPEN expr RBRACE
    (123) unary_parameter -> . LIST
    (124) unary_parameter -> . UP
    (73) symbol -> . ATOM
    (65) literal -> . NUMBER
    (66) literal -> . HEXNUMBER
    (67) literal -> . BINNUMBER
    (68) literal -> . OCTNUMBER
    (69) literal -> . STRING
    (70) literal -> . TRUE
    (71) literal -> . FALSE
    (72) literal -> . NULL
    (55) array_literal -> . LBRACKET RBRACKET
    (56) array_literal -> . LBRACKET expr_list RBRACKET
    (57) dict_literal -> . LBRACE RBRACE
    (58) dict_literal -> . LBRACE NEWLINE RBRACE
    (59) dict_literal -> . LBRACE dict_pair_list RBRACE

    error           shift and go to state 77
    ATOM            shift and go to state 74
    COPEN           shift and go to state 80
    LIST            shift and go to state 76
    UP              shift and go to state 73
    NUMBER          shift and go to state 43
    HEXNUMBER       shift and go to state 57
    BINNUMBER       shift and go to state 58
    OCTNUMBER       shift and go to state 54
    STRING          shift and go to state 44
    TRUE            shift and go to state 46
    FALSE           shift and go to state 51
    NULL            shift and go to state 56
    LBRACKET        shift and go to state 52
    LBRACE          shift and go to state 47

    dict_literal                   shift and go to state 75
    array_literal                  shift and go to state 70
    set_parameter                  shift and go to state 78
    symbol                         shift and go to state 71
    unary_parameter                shift and go to state 79
    parameter                      shift and go to state 192
    binary_parameter               shift and go to state 69
    literal                        shift and go to state 72

state 140

    (132) binary_parameter -> ATOM REGEX . parameter
    (112) parameter -> . set_parameter
    (113) parameter -> . binary_parameter
    (114) parameter -> . error
    (115) set_parameter -> . unary_parameter
    (116) set_parameter -> . unary_parameter COMMA set_parameter
    (117) set_parameter -> . unary_parameter COMMA error
    (125) binary_parameter -> . ATOM ASSIGN parameter
    (126) binary_parameter -> . ATOM EQ parameter
    (127) binary_parameter -> . ATOM NE parameter
    (128) binary_parameter -> . ATOM GT parameter
    (129) binary_parameter -> . ATOM GE parameter
    (130) binary_parameter -> . ATOM LT parameter
    (131) binary_parameter -> . ATOM LE parameter
    (132) binary_parameter -> . ATOM REGEX parameter
    (133) binary_parameter -> . ATOM INC parameter
    (134) binary_parameter -> . ATOM DEC parameter
    (118) unary_parameter -> . symbol
    (119) unary_parameter -> . literal
    (120) unary_parameter -> . array_literal
    (121) unary_parameter -> . dict_literal
    (122) unary_parameter -> . COPEN expr RBRACE
    (123) unary_parameter -> . LIST
    (124) unary_parameter -> . UP
    (73) symbol -> . ATOM
    (65) literal -> . NUMBER
    (66) literal -> . HEXNUMBER
    (67) literal -> . BINNUMBER
    (68) literal -> . OCTNUMBER
    (69) literal -> . STRING
    (70) literal -> . TRUE
    (71) literal -> . FALSE
    (72) literal -> . NULL
    (55) array_literal -> . LBRACKET RBRACKET
    (56) array_literal -> . LBRACKET expr_list RBRACKET
    (57) dict_literal -> . LBRACE RBRACE
    (58) dict_literal -> . LBRACE NEWLINE RBRACE
    (59) dict_literal -> . LBRACE dict_pair_list RBRACE

    error           shift and go to state 77
    ATOM            shift and go to state 74
    COPEN           shift and go to state 80
    LIST            shift and go to state 76
    UP              shift and go to state 73
    NUMBER          shift and go to state 43
    HEXNUMBER       shift and go to state 57
    BINNUMBER       shift and go to state 58
    OCTNUMBER       shift and go to state 54
    STRING          shift and go to state 44
    TRUE            shift and go to state 46
    FALSE           shift and go to state 51
    NULL            shift and go to state 56
    LBRACKET        shift and go to state 52
    LBRACE          shift and go to state 47

    dict_literal                   shift and go to state 75
    array_literal                  shift and go to state 70
    set_parameter                  shift and go to state 78
    symbol                         shift and go to state 71
    unary_parameter                shift and go to state 79
    parameter                      shift and go to state 193
    binary_parameter               shift and go to state 69
    literal                        shift and go to state 72

state 141

    (116) set_parameter -> unary_parameter COMMA . set_parameter
    (117) set_parameter -> unary_parameter COMMA . error
    (115) set_parameter -> . unary_parameter
    (116) set_parameter -> . unary_parameter COMMA set_parameter
    (117) set_parameter -> . unary_parameter COMMA error
    (118) unary_parameter -> . symbol
    (119) unary_parameter -> . literal
    (120) unary_parameter -> . array_literal
    (121) unary_parameter -> . dict_literal
    (122) unary_parameter -> . COPEN expr RBRACE
    (123) unary_parameter -> . LIST
    (124) unary_parameter -> . UP
    (73) symbol -> . ATOM
    (65) literal -> . NUMBER
    (66) literal -> . HEXNUMBER
    (67) literal -> . BINNUMBER
    (68) literal -> . OCTNUMBER
    (69) literal -> . STRING
    (70) literal -> . TRUE
    (71) literal -> . FALSE
    (72) literal -> . NULL
    (55) array_literal -> . LBRACKET RBRACKET
    (56) array_literal -> . LBRACKET expr_list RBRACKET
    (57) dict_literal -> . LBRACE RBRACE
    (58) dict_literal -> . LBRACE NEWLINE RBRACE
    (59) dict_literal -> . LBRACE dict_pair_list RBRACE

    error           shift and go to state 194
    COPEN           shift and go to state 80
    LIST            shift and go to state 76
    UP              shift and go to state 73
    ATOM            shift and go to state 119
    NUMBER          shift and go to state 43
    HEXNUMBER       shift and go to state 57
    BINNUMBER       shift and go to state 58
    OCTNUMBER       shift and go to state 54
    STRING          shift and go to state 44
    TRUE            shift and go to state 46
    FALSE           shift and go to state 51
    NULL            shift and go to state 56
    LBRACKET        shift and go to state 52
    LBRACE          shift and go to state 47

    array_literal                  shift and go to state 70
    set_parameter                  shift and go to state 195
    symbol                         shift and go to state 71
    unary_parameter                shift and go to state 79
    literal                        shift and go to state 72
    dict_literal                   shift and go to state 75

state 142

    (122) unary_parameter -> COPEN expr . RBRACE
    (85) binary_expr -> expr . EQ expr
    (86) binary_expr -> expr . NE expr
    (87) binary_expr -> expr . GT expr
    (88) binary_expr -> expr . GE expr
    (89) binary_expr -> expr . LT expr
    (90) binary_expr -> expr . LE expr
    (91) binary_expr -> expr . PLUS expr
    (92) binary_expr -> expr . MINUS expr
    (93) binary_expr -> expr . MUL expr
    (94) binary_expr -> expr . DIV expr
    (95) binary_expr -> expr . REGEX expr
    (96) binary_expr -> expr . AND expr
    (97) binary_expr -> expr . OR expr
    (98) binary_expr -> expr . NOT expr
    (99) binary_expr -> expr . MOD expr
    (78) subscript_expr -> expr . LBRACKET expr RBRACKET

    RBRACE          shift and go to state 196
    EQ              shift and go to state 99
    NE              shift and go to state 100
    GT              shift and go to state 103
    GE              shift and go to state 108
    LT              shift and go to state 109
    LE              shift and go to state 105
    PLUS            shift and go to state 114
    MINUS           shift and go to state 106
    MUL             shift and go to state 101
    DIV             shift and go to state 102
    REGEX           shift and go to state 113
    AND             shift and go to state 111
    OR              shift and go to state 107
    NOT             shift and go to state 104
    MOD             shift and go to state 112
    LBRACKET        shift and go to state 110


state 143

    (103) command -> command_item parameter_list PIPE . command
    (100) command -> . command_item
    (101) command -> . command_item parameter_list
    (102) command -> . command_item PIPE command
    (103) command -> . command_item parameter_list PIPE command
    (104) command_item -> . LIST
    (105) command_item -> . NUMBER
    (106) command_item -> . UP
    (107) command_item -> . symbol
    (108) command_item -> . COPEN expr RBRACE
    (109) command_item -> . STRING
    (73) symbol -> . ATOM

    LIST            shift and go to state 8
    NUMBER          shift and go to state 26
    UP              shift and go to state 7
    COPEN           shift and go to state 31
    STRING          shift and go to state 19
    ATOM            shift and go to state 119

    command_item                   shift and go to state 18
    symbol                         shift and go to state 121
    command                        shift and go to state 197

state 144

    (102) command -> command_item PIPE command .

    REDIRECT        reduce using rule 102 (command -> command_item PIPE command .)
    NEWLINE         reduce using rule 102 (command -> command_item PIPE command .)
    $end            reduce using rule 102 (command -> command_item PIPE command .)
    RBRACE          reduce using rule 102 (command -> command_item PIPE command .)
    RPAREN          reduce using rule 102 (command -> command_item PIPE command .)


state 145

    (7) stmt_redirect -> stmt REDIRECT STRING .

    NEWLINE         reduce using rule 7 (stmt_redirect -> stmt REDIRECT STRING .)
    RBRACE          reduce using rule 7 (stmt_redirect -> stmt REDIRECT STRING .)
    $end            reduce using rule 7 (stmt_redirect -> stmt REDIRECT STRING .)


state 146

    (6) stmt_redirect -> stmt REDIRECT ATOM .

    NEWLINE         reduce using rule 6 (stmt_redirect -> stmt REDIRECT ATOM .)
    RBRACE          reduce using rule 6 (stmt_redirect -> stmt REDIRECT ATOM .)
    $end            reduce using rule 6 (stmt_redirect -> stmt REDIRECT ATOM .)


state 147

    (77) subscript_left -> symbol LBRACKET expr . RBRACKET
    (85) binary_expr -> expr . EQ expr
    (86) binary_expr -> expr . NE expr
    (87) binary_expr -> expr . GT expr
    (88) binary_expr -> expr . GE expr
    (89) binary_expr -> expr . LT expr
    (90) binary_expr -> expr . LE expr
    (91) binary_expr -> expr . PLUS expr
    (92) binary_expr -> expr . MINUS expr
    (93) binary_expr -> expr . MUL expr
    (94) binary_expr -> expr . DIV expr
    (95) binary_expr -> expr . REGEX expr
    (96) binary_expr -> expr . AND expr
    (97) binary_expr -> expr . OR expr
    (98) binary_expr -> expr . NOT expr
    (99) binary_expr -> expr . MOD expr
    (78) subscript_expr -> expr . LBRACKET expr RBRACKET

    RBRACKET        shift and go to state 198
    EQ              shift and go to state 99
    NE              shift and go to state 100
    GT              shift and go to state 103
    GE              shift and go to state 108
    LT              shift and go to state 109
    LE              shift and go to state 105
    PLUS            shift and go to state 114
    MINUS           shift and go to state 106
    MUL             shift and go to state 101
    DIV             shift and go to state 102
    REGEX           shift and go to state 113
    AND             shift and go to state 111
    OR              shift and go to state 107
    NOT             shift and go to state 104
    MOD             shift and go to state 112
    LBRACKET        shift and go to state 110


state 148

    (30) function_definition_stmt -> FUNCTION ATOM LPAREN . RPAREN block
    (31) function_definition_stmt -> FUNCTION ATOM LPAREN . function_argument_list RPAREN block
    (32) function_definition_stmt -> FUNCTION ATOM LPAREN . RPAREN NEWLINE block
    (33) function_definition_stmt -> FUNCTION ATOM LPAREN . function_argument_list RPAREN NEWLINE block
    (34) function_argument_list -> . ATOM
    (35) function_argument_list -> . ATOM COMMA function_argument_list

    RPAREN          shift and go to state 200
    ATOM            shift and go to state 177

    function_argument_list         shift and go to state 199

state 149

    (25) for_stmt -> FOR LPAREN ATOM . IN expr RPAREN block
    (26) for_stmt -> FOR LPAREN ATOM . COMMA ATOM IN expr RPAREN block

    IN              shift and go to state 201
    COMMA           shift and go to state 202


state 150

    (27) while_stmt -> WHILE LPAREN expr . RPAREN block
    (85) binary_expr -> expr . EQ expr
    (86) binary_expr -> expr . NE expr
    (87) binary_expr -> expr . GT expr
    (88) binary_expr -> expr . GE expr
    (89) binary_expr -> expr . LT expr
    (90) binary_expr -> expr . LE expr
    (91) binary_expr -> expr . PLUS expr
    (92) binary_expr -> expr . MINUS expr
    (93) binary_expr -> expr . MUL expr
    (94) binary_expr -> expr . DIV expr
    (95) binary_expr -> expr . REGEX expr
    (96) binary_expr -> expr . AND expr
    (97) binary_expr -> expr . OR expr
    (98) binary_expr -> expr . NOT expr
    (99) binary_expr -> expr . MOD expr
    (78) subscript_expr -> expr . LBRACKET expr RBRACKET

    RPAREN          shift and go to state 203
    EQ              shift and go to state 99
    NE              shift and go to state 100
    GT              shift and go to state 103
    GE              shift and go to state 108
    LT              shift and go to state 109
    LE              shift and go to state 105
    PLUS            shift and go to state 114
    MINUS           shift and go to state 106
    MUL             shift and go to state 101
    DIV             shift and go to state 102
    REGEX           shift and go to state 113
    AND             shift and go to state 111
    OR              shift and go to state 107
    NOT             shift and go to state 104
    MOD             shift and go to state 112
    LBRACKET        shift and go to state 110


state 151

    (108) command_item -> COPEN expr RBRACE .

    PIPE            reduce using rule 108 (command_item -> COPEN expr RBRACE .)
    error           reduce using rule 108 (command_item -> COPEN expr RBRACE .)
    ATOM            reduce using rule 108 (command_item -> COPEN expr RBRACE .)
    COPEN           reduce using rule 108 (command_item -> COPEN expr RBRACE .)
    LIST            reduce using rule 108 (command_item -> COPEN expr RBRACE .)
    UP              reduce using rule 108 (command_item -> COPEN expr RBRACE .)
    NUMBER          reduce using rule 108 (command_item -> COPEN expr RBRACE .)
    HEXNUMBER       reduce using rule 108 (command_item -> COPEN expr RBRACE .)
    BINNUMBER       reduce using rule 108 (command_item -> COPEN expr RBRACE .)
    OCTNUMBER       reduce using rule 108 (command_item -> COPEN expr RBRACE .)
    STRING          reduce using rule 108 (command_item -> COPEN expr RBRACE .)
    TRUE            reduce using rule 108 (command_item -> COPEN expr RBRACE .)
    FALSE           reduce using rule 108 (command_item -> COPEN expr RBRACE .)
    NULL            reduce using rule 108 (command_item -> COPEN expr RBRACE .)
    LBRACKET        reduce using rule 108 (command_item -> COPEN expr RBRACE .)
    LBRACE          reduce using rule 108 (command_item -> COPEN expr RBRACE .)
    REDIRECT        reduce using rule 108 (command_item -> COPEN expr RBRACE .)
    NEWLINE         reduce using rule 108 (command_item -> COPEN expr RBRACE .)
    $end            reduce using rule 108 (command_item -> COPEN expr RBRACE .)
    RBRACE          reduce using rule 108 (command_item -> COPEN expr RBRACE .)
    RPAREN          reduce using rule 108 (command_item -> COPEN expr RBRACE .)


state 152

    (52) expr -> LPAREN expr RPAREN .

    EQ              reduce using rule 52 (expr -> LPAREN expr RPAREN .)
    NE              reduce using rule 52 (expr -> LPAREN expr RPAREN .)
    GT              reduce using rule 52 (expr -> LPAREN expr RPAREN .)
    GE              reduce using rule 52 (expr -> LPAREN expr RPAREN .)
    LT              reduce using rule 52 (expr -> LPAREN expr RPAREN .)
    LE              reduce using rule 52 (expr -> LPAREN expr RPAREN .)
    PLUS            reduce using rule 52 (expr -> LPAREN expr RPAREN .)
    MINUS           reduce using rule 52 (expr -> LPAREN expr RPAREN .)
    MUL             reduce using rule 52 (expr -> LPAREN expr RPAREN .)
    DIV             reduce using rule 52 (expr -> LPAREN expr RPAREN .)
    REGEX           reduce using rule 52 (expr -> LPAREN expr RPAREN .)
    AND             reduce using rule 52 (expr -> LPAREN expr RPAREN .)
    OR              reduce using rule 52 (expr -> LPAREN expr RPAREN .)
    NOT             reduce using rule 52 (expr -> LPAREN expr RPAREN .)
    MOD             reduce using rule 52 (expr -> LPAREN expr RPAREN .)
    LBRACKET        reduce using rule 52 (expr -> LPAREN expr RPAREN .)
    REDIRECT        reduce using rule 52 (expr -> LPAREN expr RPAREN .)
    NEWLINE         reduce using rule 52 (expr -> LPAREN expr RPAREN .)
    $end            reduce using rule 52 (expr -> LPAREN expr RPAREN .)
    RBRACE          reduce using rule 52 (expr -> LPAREN expr RPAREN .)
    RPAREN          reduce using rule 52 (expr -> LPAREN expr RPAREN .)
    COLON           reduce using rule 52 (expr -> LPAREN expr RPAREN .)
    COMMA           reduce using rule 52 (expr -> LPAREN expr RPAREN .)
    RBRACKET        reduce using rule 52 (expr -> LPAREN expr RPAREN .)


state 153

    (59) dict_literal -> LBRACE dict_pair_list RBRACE .

    EQ              reduce using rule 59 (dict_literal -> LBRACE dict_pair_list RBRACE .)
    NE              reduce using rule 59 (dict_literal -> LBRACE dict_pair_list RBRACE .)
    GT              reduce using rule 59 (dict_literal -> LBRACE dict_pair_list RBRACE .)
    GE              reduce using rule 59 (dict_literal -> LBRACE dict_pair_list RBRACE .)
    LT              reduce using rule 59 (dict_literal -> LBRACE dict_pair_list RBRACE .)
    LE              reduce using rule 59 (dict_literal -> LBRACE dict_pair_list RBRACE .)
    PLUS            reduce using rule 59 (dict_literal -> LBRACE dict_pair_list RBRACE .)
    MINUS           reduce using rule 59 (dict_literal -> LBRACE dict_pair_list RBRACE .)
    MUL             reduce using rule 59 (dict_literal -> LBRACE dict_pair_list RBRACE .)
    DIV             reduce using rule 59 (dict_literal -> LBRACE dict_pair_list RBRACE .)
    REGEX           reduce using rule 59 (dict_literal -> LBRACE dict_pair_list RBRACE .)
    AND             reduce using rule 59 (dict_literal -> LBRACE dict_pair_list RBRACE .)
    OR              reduce using rule 59 (dict_literal -> LBRACE dict_pair_list RBRACE .)
    NOT             reduce using rule 59 (dict_literal -> LBRACE dict_pair_list RBRACE .)
    MOD             reduce using rule 59 (dict_literal -> LBRACE dict_pair_list RBRACE .)
    LBRACKET        reduce using rule 59 (dict_literal -> LBRACE dict_pair_list RBRACE .)
    REDIRECT        reduce using rule 59 (dict_literal -> LBRACE dict_pair_list RBRACE .)
    NEWLINE         reduce using rule 59 (dict_literal -> LBRACE dict_pair_list RBRACE .)
    $end            reduce using rule 59 (dict_literal -> LBRACE dict_pair_list RBRACE .)
    RBRACE          reduce using rule 59 (dict_literal -> LBRACE dict_pair_list RBRACE .)
    RPAREN          reduce using rule 59 (dict_literal -> LBRACE dict_pair_list RBRACE .)
    COLON           reduce using rule 59 (dict_literal -> LBRACE dict_pair_list RBRACE .)
    COMMA           reduce using rule 59 (dict_literal -> LBRACE dict_pair_list RBRACE .)
    RBRACKET        reduce using rule 59 (dict_literal -> LBRACE dict_pair_list RBRACE .)
    error           reduce using rule 59 (dict_literal -> LBRACE dict_pair_list RBRACE .)
    ATOM            reduce using rule 59 (dict_literal -> LBRACE dict_pair_list RBRACE .)
    COPEN           reduce using rule 59 (dict_literal -> LBRACE dict_pair_list RBRACE .)
    LIST            reduce using rule 59 (dict_literal -> LBRACE dict_pair_list RBRACE .)
    UP              reduce using rule 59 (dict_literal -> LBRACE dict_pair_list RBRACE .)
    NUMBER          reduce using rule 59 (dict_literal -> LBRACE dict_pair_list RBRACE .)
    HEXNUMBER       reduce using rule 59 (dict_literal -> LBRACE dict_pair_list RBRACE .)
    BINNUMBER       reduce using rule 59 (dict_literal -> LBRACE dict_pair_list RBRACE .)
    OCTNUMBER       reduce using rule 59 (dict_literal -> LBRACE dict_pair_list RBRACE .)
    STRING          reduce using rule 59 (dict_literal -> LBRACE dict_pair_list RBRACE .)
    TRUE            reduce using rule 59 (dict_literal -> LBRACE dict_pair_list RBRACE .)
    FALSE           reduce using rule 59 (dict_literal -> LBRACE dict_pair_list RBRACE .)
    NULL            reduce using rule 59 (dict_literal -> LBRACE dict_pair_list RBRACE .)
    LBRACE          reduce using rule 59 (dict_literal -> LBRACE dict_pair_list RBRACE .)
    PIPE            reduce using rule 59 (dict_literal -> LBRACE dict_pair_list RBRACE .)


state 154

    (62) dict_pair -> expr COLON . expr
    (42) expr -> . symbol
    (43) expr -> . literal
    (44) expr -> . array_literal
    (45) expr -> . dict_literal
    (46) expr -> . unary_expr
    (47) expr -> . binary_expr
    (48) expr -> . call
    (49) expr -> . subscript_expr
    (50) expr -> . anon_function_expr
    (51) expr -> . expr_expansion
    (52) expr -> . LPAREN expr RPAREN
    (53) expr -> . COPEN expr RBRACE
    (73) symbol -> . ATOM
    (65) literal -> . NUMBER
    (66) literal -> . HEXNUMBER
    (67) literal -> . BINNUMBER
    (68) literal -> . OCTNUMBER
    (69) literal -> . STRING
    (70) literal -> . TRUE
    (71) literal -> . FALSE
    (72) literal -> . NULL
    (55) array_literal -> . LBRACKET RBRACKET
    (56) array_literal -> . LBRACKET expr_list RBRACKET
    (57) dict_literal -> . LBRACE RBRACE
    (58) dict_literal -> . LBRACE NEWLINE RBRACE
    (59) dict_literal -> . LBRACE dict_pair_list RBRACE
    (83) unary_expr -> . MINUS expr
    (84) unary_expr -> . NOT expr
    (85) binary_expr -> . expr EQ expr
    (86) binary_expr -> . expr NE expr
    (87) binary_expr -> . expr GT expr
    (88) binary_expr -> . expr GE expr
    (89) binary_expr -> . expr LT expr
    (90) binary_expr -> . expr LE expr
    (91) binary_expr -> . expr PLUS expr
    (92) binary_expr -> . expr MINUS expr
    (93) binary_expr -> . expr MUL expr
    (94) binary_expr -> . expr DIV expr
    (95) binary_expr -> . expr REGEX expr
    (96) binary_expr -> . expr AND expr
    (97) binary_expr -> . expr OR expr
    (98) binary_expr -> . expr NOT expr
    (99) binary_expr -> . expr MOD expr
    (74) call -> . ATOM LPAREN RPAREN
    (75) call -> . ATOM LPAREN expr_list RPAREN
    (78) subscript_expr -> . expr LBRACKET expr RBRACKET
    (79) anon_function_expr -> . FUNCTION LPAREN RPAREN block
    (80) anon_function_expr -> . FUNCTION LPAREN RPAREN NEWLINE block
    (81) anon_function_expr -> . FUNCTION LPAREN function_argument_list RPAREN block
    (82) anon_function_expr -> . FUNCTION LPAREN function_argument_list RPAREN NEWLINE block
    (54) expr_expansion -> . EOPEN command RPAREN

    LPAREN          shift and go to state 35
    COPEN           shift and go to state 60
    ATOM            shift and go to state 38
    NUMBER          shift and go to state 43
    HEXNUMBER       shift and go to state 57
    BINNUMBER       shift and go to state 58
    OCTNUMBER       shift and go to state 54
    STRING          shift and go to state 44
    TRUE            shift and go to state 46
    FALSE           shift and go to state 51
    NULL            shift and go to state 56
    LBRACKET        shift and go to state 52
    LBRACE          shift and go to state 47
    MINUS           shift and go to state 40
    NOT             shift and go to state 45
    FUNCTION        shift and go to state 53
    EOPEN           shift and go to state 55

    binary_expr                    shift and go to state 33
    expr_expansion                 shift and go to state 39
    literal                        shift and go to state 34
    expr                           shift and go to state 204
    array_literal                  shift and go to state 49
    subscript_expr                 shift and go to state 59
    symbol                         shift and go to state 50
    anon_function_expr             shift and go to state 41
    call                           shift and go to state 36
    dict_literal                   shift and go to state 37
    unary_expr                     shift and go to state 42

state 155

    (58) dict_literal -> LBRACE NEWLINE RBRACE .

    EQ              reduce using rule 58 (dict_literal -> LBRACE NEWLINE RBRACE .)
    NE              reduce using rule 58 (dict_literal -> LBRACE NEWLINE RBRACE .)
    GT              reduce using rule 58 (dict_literal -> LBRACE NEWLINE RBRACE .)
    GE              reduce using rule 58 (dict_literal -> LBRACE NEWLINE RBRACE .)
    LT              reduce using rule 58 (dict_literal -> LBRACE NEWLINE RBRACE .)
    LE              reduce using rule 58 (dict_literal -> LBRACE NEWLINE RBRACE .)
    PLUS            reduce using rule 58 (dict_literal -> LBRACE NEWLINE RBRACE .)
    MINUS           reduce using rule 58 (dict_literal -> LBRACE NEWLINE RBRACE .)
    MUL             reduce using rule 58 (dict_literal -> LBRACE NEWLINE RBRACE .)
    DIV             reduce using rule 58 (dict_literal -> LBRACE NEWLINE RBRACE .)
    REGEX           reduce using rule 58 (dict_literal -> LBRACE NEWLINE RBRACE .)
    AND             reduce using rule 58 (dict_literal -> LBRACE NEWLINE RBRACE .)
    OR              reduce using rule 58 (dict_literal -> LBRACE NEWLINE RBRACE .)
    NOT             reduce using rule 58 (dict_literal -> LBRACE NEWLINE RBRACE .)
    MOD             reduce using rule 58 (dict_literal -> LBRACE NEWLINE RBRACE .)
    LBRACKET        reduce using rule 58 (dict_literal -> LBRACE NEWLINE RBRACE .)
    REDIRECT        reduce using rule 58 (dict_literal -> LBRACE NEWLINE RBRACE .)
    NEWLINE         reduce using rule 58 (dict_literal -> LBRACE NEWLINE RBRACE .)
    $end            reduce using rule 58 (dict_literal -> LBRACE NEWLINE RBRACE .)
    RBRACE          reduce using rule 58 (dict_literal -> LBRACE NEWLINE RBRACE .)
    RPAREN          reduce using rule 58 (dict_literal -> LBRACE NEWLINE RBRACE .)
    COLON           reduce using rule 58 (dict_literal -> LBRACE NEWLINE RBRACE .)
    COMMA           reduce using rule 58 (dict_literal -> LBRACE NEWLINE RBRACE .)
    RBRACKET        reduce using rule 58 (dict_literal -> LBRACE NEWLINE RBRACE .)
    error           reduce using rule 58 (dict_literal -> LBRACE NEWLINE RBRACE .)
    ATOM            reduce using rule 58 (dict_literal -> LBRACE NEWLINE RBRACE .)
    COPEN           reduce using rule 58 (dict_literal -> LBRACE NEWLINE RBRACE .)
    LIST            reduce using rule 58 (dict_literal -> LBRACE NEWLINE RBRACE .)
    UP              reduce using rule 58 (dict_literal -> LBRACE NEWLINE RBRACE .)
    NUMBER          reduce using rule 58 (dict_literal -> LBRACE NEWLINE RBRACE .)
    HEXNUMBER       reduce using rule 58 (dict_literal -> LBRACE NEWLINE RBRACE .)
    BINNUMBER       reduce using rule 58 (dict_literal -> LBRACE NEWLINE RBRACE .)
    OCTNUMBER       reduce using rule 58 (dict_literal -> LBRACE NEWLINE RBRACE .)
    STRING          reduce using rule 58 (dict_literal -> LBRACE NEWLINE RBRACE .)
    TRUE            reduce using rule 58 (dict_literal -> LBRACE NEWLINE RBRACE .)
    FALSE           reduce using rule 58 (dict_literal -> LBRACE NEWLINE RBRACE .)
    NULL            reduce using rule 58 (dict_literal -> LBRACE NEWLINE RBRACE .)
    LBRACE          reduce using rule 58 (dict_literal -> LBRACE NEWLINE RBRACE .)
    PIPE            reduce using rule 58 (dict_literal -> LBRACE NEWLINE RBRACE .)


state 156

    (63) dict_pair -> NEWLINE expr . COLON expr
    (64) dict_pair -> NEWLINE expr . COLON expr NEWLINE
    (85) binary_expr -> expr . EQ expr
    (86) binary_expr -> expr . NE expr
    (87) binary_expr -> expr . GT expr
    (88) binary_expr -> expr . GE expr
    (89) binary_expr -> expr . LT expr
    (90) binary_expr -> expr . LE expr
    (91) binary_expr -> expr . PLUS expr
    (92) binary_expr -> expr . MINUS expr
    (93) binary_expr -> expr . MUL expr
    (94) binary_expr -> expr . DIV expr
    (95) binary_expr -> expr . REGEX expr
    (96) binary_expr -> expr . AND expr
    (97) binary_expr -> expr . OR expr
    (98) binary_expr -> expr . NOT expr
    (99) binary_expr -> expr . MOD expr
    (78) subscript_expr -> expr . LBRACKET expr RBRACKET

    COLON           shift and go to state 205
    EQ              shift and go to state 99
    NE              shift and go to state 100
    GT              shift and go to state 103
    GE              shift and go to state 108
    LT              shift and go to state 109
    LE              shift and go to state 105
    PLUS            shift and go to state 114
    MINUS           shift and go to state 106
    MUL             shift and go to state 101
    DIV             shift and go to state 102
    REGEX           shift and go to state 113
    AND             shift and go to state 111
    OR              shift and go to state 107
    NOT             shift and go to state 104
    MOD             shift and go to state 112
    LBRACKET        shift and go to state 110


state 157

    (61) dict_pair_list -> dict_pair COMMA . dict_pair_list
    (60) dict_pair_list -> . dict_pair
    (61) dict_pair_list -> . dict_pair COMMA dict_pair_list
    (62) dict_pair -> . expr COLON expr
    (63) dict_pair -> . NEWLINE expr COLON expr
    (64) dict_pair -> . NEWLINE expr COLON expr NEWLINE
    (42) expr -> . symbol
    (43) expr -> . literal
    (44) expr -> . array_literal
    (45) expr -> . dict_literal
    (46) expr -> . unary_expr
    (47) expr -> . binary_expr
    (48) expr -> . call
    (49) expr -> . subscript_expr
    (50) expr -> . anon_function_expr
    (51) expr -> . expr_expansion
    (52) expr -> . LPAREN expr RPAREN
    (53) expr -> . COPEN expr RBRACE
    (73) symbol -> . ATOM
    (65) literal -> . NUMBER
    (66) literal -> . HEXNUMBER
    (67) literal -> . BINNUMBER
    (68) literal -> . OCTNUMBER
    (69) literal -> . STRING
    (70) literal -> . TRUE
    (71) literal -> . FALSE
    (72) literal -> . NULL
    (55) array_literal -> . LBRACKET RBRACKET
    (56) array_literal -> . LBRACKET expr_list RBRACKET
    (57) dict_literal -> . LBRACE RBRACE
    (58) dict_literal -> . LBRACE NEWLINE RBRACE
    (59) dict_literal -> . LBRACE dict_pair_list RBRACE
    (83) unary_expr -> . MINUS expr
    (84) unary_expr -> . NOT expr
    (85) binary_expr -> . expr EQ expr
    (86) binary_expr -> . expr NE expr
    (87) binary_expr -> . expr GT expr
    (88) binary_expr -> . expr GE expr
    (89) binary_expr -> . expr LT expr
    (90) binary_expr -> . expr LE expr
    (91) binary_expr -> . expr PLUS expr
    (92) binary_expr -> . expr MINUS expr
    (93) binary_expr -> . expr MUL expr
    (94) binary_expr -> . expr DIV expr
    (95) binary_expr -> . expr REGEX expr
    (96) binary_expr -> . expr AND expr
    (97) binary_expr -> . expr OR expr
    (98) binary_expr -> . expr NOT expr
    (99) binary_expr -> . expr MOD expr
    (74) call -> . ATOM LPAREN RPAREN
    (75) call -> . ATOM LPAREN expr_list RPAREN
    (78) subscript_expr -> . expr LBRACKET expr RBRACKET
    (79) anon_function_expr -> . FUNCTION LPAREN RPAREN block
    (80) anon_function_expr -> . FUNCTION LPAREN RPAREN NEWLINE block
    (81) anon_function_expr -> . FUNCTION LPAREN function_argument_list RPAREN block
    (82) anon_function_expr -> . FUNCTION LPAREN function_argument_list RPAREN NEWLINE block
    (54) expr_expansion -> . EOPEN command RPAREN

    NEWLINE         shift and go to state 207
    LPAREN          shift and go to state 35
    COPEN           shift and go to state 60
    ATOM            shift and go to state 38
    NUMBER          shift and go to state 43
    HEXNUMBER       shift and go to state 57
    BINNUMBER       shift and go to state 58
    OCTNUMBER       shift and go to state 54
    STRING          shift and go to state 44
    TRUE            shift and go to state 46
    FALSE           shift and go to state 51
    NULL            shift and go to state 56
    LBRACKET        shift and go to state 52
    LBRACE          shift and go to state 47
    MINUS           shift and go to state 40
    NOT             shift and go to state 45
    FUNCTION        shift and go to state 53
    EOPEN           shift and go to state 55

    expr_expansion                 shift and go to state 39
    binary_expr                    shift and go to state 33
    unary_expr                     shift and go to state 42
    literal                        shift and go to state 34
    expr                           shift and go to state 96
    array_literal                  shift and go to state 49
    subscript_expr                 shift and go to state 59
    anon_function_expr             shift and go to state 41
    dict_pair                      shift and go to state 98
    symbol                         shift and go to state 50
    call                           shift and go to state 36
    dict_pair_list                 shift and go to state 206
    dict_literal                   shift and go to state 37

state 158

    (85) binary_expr -> expr EQ expr .
    (85) binary_expr -> expr . EQ expr
    (86) binary_expr -> expr . NE expr
    (87) binary_expr -> expr . GT expr
    (88) binary_expr -> expr . GE expr
    (89) binary_expr -> expr . LT expr
    (90) binary_expr -> expr . LE expr
    (91) binary_expr -> expr . PLUS expr
    (92) binary_expr -> expr . MINUS expr
    (93) binary_expr -> expr . MUL expr
    (94) binary_expr -> expr . DIV expr
    (95) binary_expr -> expr . REGEX expr
    (96) binary_expr -> expr . AND expr
    (97) binary_expr -> expr . OR expr
    (98) binary_expr -> expr . NOT expr
    (99) binary_expr -> expr . MOD expr
    (78) subscript_expr -> expr . LBRACKET expr RBRACKET

    EQ              reduce using rule 85 (binary_expr -> expr EQ expr .)
    NE              reduce using rule 85 (binary_expr -> expr EQ expr .)
    GT              reduce using rule 85 (binary_expr -> expr EQ expr .)
    GE              reduce using rule 85 (binary_expr -> expr EQ expr .)
    LT              reduce using rule 85 (binary_expr -> expr EQ expr .)
    LE              reduce using rule 85 (binary_expr -> expr EQ expr .)
    AND             reduce using rule 85 (binary_expr -> expr EQ expr .)
    OR              reduce using rule 85 (binary_expr -> expr EQ expr .)
    NOT             reduce using rule 85 (binary_expr -> expr EQ expr .)
    REDIRECT        reduce using rule 85 (binary_expr -> expr EQ expr .)
    NEWLINE         reduce using rule 85 (binary_expr -> expr EQ expr .)
    $end            reduce using rule 85 (binary_expr -> expr EQ expr .)
    RBRACE          reduce using rule 85 (binary_expr -> expr EQ expr .)
    RPAREN          reduce using rule 85 (binary_expr -> expr EQ expr .)
    COLON           reduce using rule 85 (binary_expr -> expr EQ expr .)
    COMMA           reduce using rule 85 (binary_expr -> expr EQ expr .)
    RBRACKET        reduce using rule 85 (binary_expr -> expr EQ expr .)
    PLUS            shift and go to state 114
    MINUS           shift and go to state 106
    MUL             shift and go to state 101
    DIV             shift and go to state 102
    REGEX           shift and go to state 113
    MOD             shift and go to state 112
    LBRACKET        shift and go to state 110

  ! PLUS            [ reduce using rule 85 (binary_expr -> expr EQ expr .) ]
  ! MINUS           [ reduce using rule 85 (binary_expr -> expr EQ expr .) ]
  ! MUL             [ reduce using rule 85 (binary_expr -> expr EQ expr .) ]
  ! DIV             [ reduce using rule 85 (binary_expr -> expr EQ expr .) ]
  ! REGEX           [ reduce using rule 85 (binary_expr -> expr EQ expr .) ]
  ! MOD             [ reduce using rule 85 (binary_expr -> expr EQ expr .) ]
  ! LBRACKET        [ reduce using rule 85 (binary_expr -> expr EQ expr .) ]
  ! EQ              [ shift and go to state 99 ]
  ! NE              [ shift and go to state 100 ]
  ! GT              [ shift and go to state 103 ]
  ! GE              [ shift and go to state 108 ]
  ! LT              [ shift and go to state 109 ]
  ! LE              [ shift and go to state 105 ]
  ! AND             [ shift and go to state 111 ]
  ! OR              [ shift and go to state 107 ]
  ! NOT             [ shift and go to state 104 ]


state 159

    (86) binary_expr -> expr NE expr .
    (85) binary_expr -> expr . EQ expr
    (86) binary_expr -> expr . NE expr
    (87) binary_expr -> expr . GT expr
    (88) binary_expr -> expr . GE expr
    (89) binary_expr -> expr . LT expr
    (90) binary_expr -> expr . LE expr
    (91) binary_expr -> expr . PLUS expr
    (92) binary_expr -> expr . MINUS expr
    (93) binary_expr -> expr . MUL expr
    (94) binary_expr -> expr . DIV expr
    (95) binary_expr -> expr . REGEX expr
    (96) binary_expr -> expr . AND expr
    (97) binary_expr -> expr . OR expr
    (98) binary_expr -> expr . NOT expr
    (99) binary_expr -> expr . MOD expr
    (78) subscript_expr -> expr . LBRACKET expr RBRACKET

    EQ              reduce using rule 86 (binary_expr -> expr NE expr .)
    NE              reduce using rule 86 (binary_expr -> expr NE expr .)
    GT              reduce using rule 86 (binary_expr -> expr NE expr .)
    GE              reduce using rule 86 (binary_expr -> expr NE expr .)
    LT              reduce using rule 86 (binary_expr -> expr NE expr .)
    LE              reduce using rule 86 (binary_expr -> expr NE expr .)
    AND             reduce using rule 86 (binary_expr -> expr NE expr .)
    OR              reduce using rule 86 (binary_expr -> expr NE expr .)
    NOT             reduce using rule 86 (binary_expr -> expr NE expr .)
    REDIRECT        reduce using rule 86 (binary_expr -> expr NE expr .)
    NEWLINE         reduce using rule 86 (binary_expr -> expr NE expr .)
    $end            reduce using rule 86 (binary_expr -> expr NE expr .)
    RBRACE          reduce using rule 86 (binary_expr -> expr NE expr .)
    RPAREN          reduce using rule 86 (binary_expr -> expr NE expr .)
    COLON           reduce using rule 86 (binary_expr -> expr NE expr .)
    COMMA           reduce using rule 86 (binary_expr -> expr NE expr .)
    RBRACKET        reduce using rule 86 (binary_expr -> expr NE expr .)
    PLUS            shift and go to state 114
    MINUS           shift and go to state 106
    MUL             shift and go to state 101
    DIV             shift and go to state 102
    REGEX           shift and go to state 113
    MOD             shift and go to state 112
    LBRACKET        shift and go to state 110

  ! PLUS            [ reduce using rule 86 (binary_expr -> expr NE expr .) ]
  ! MINUS           [ reduce using rule 86 (binary_expr -> expr NE expr .) ]
  ! MUL             [ reduce using rule 86 (binary_expr -> expr NE expr .) ]
  ! DIV             [ reduce using rule 86 (binary_expr -> expr NE expr .) ]
  ! REGEX           [ reduce using rule 86 (binary_expr -> expr NE expr .) ]
  ! MOD             [ reduce using rule 86 (binary_expr -> expr NE expr .) ]
  ! LBRACKET        [ reduce using rule 86 (binary_expr -> expr NE expr .) ]
  ! EQ              [ shift and go to state 99 ]
  ! NE              [ shift and go to state 100 ]
  ! GT              [ shift and go to state 103 ]
  ! GE              [ shift and go to state 108 ]
  ! LT              [ shift and go to state 109 ]
  ! LE              [ shift and go to state 105 ]
  ! AND             [ shift and go to state 111 ]
  ! OR              [ shift and go to state 107 ]
  ! NOT             [ shift and go to state 104 ]


state 160

    (93) binary_expr -> expr MUL expr .
    (85) binary_expr -> expr . EQ expr
    (86) binary_expr -> expr . NE expr
    (87) binary_expr -> expr . GT expr
    (88) binary_expr -> expr . GE expr
    (89) binary_expr -> expr . LT expr
    (90) binary_expr -> expr . LE expr
    (91) binary_expr -> expr . PLUS expr
    (92) binary_expr -> expr . MINUS expr
    (93) binary_expr -> expr . MUL expr
    (94) binary_expr -> expr . DIV expr
    (95) binary_expr -> expr . REGEX expr
    (96) binary_expr -> expr . AND expr
    (97) binary_expr -> expr . OR expr
    (98) binary_expr -> expr . NOT expr
    (99) binary_expr -> expr . MOD expr
    (78) subscript_expr -> expr . LBRACKET expr RBRACKET

    EQ              reduce using rule 93 (binary_expr -> expr MUL expr .)
    NE              reduce using rule 93 (binary_expr -> expr MUL expr .)
    GT              reduce using rule 93 (binary_expr -> expr MUL expr .)
    GE              reduce using rule 93 (binary_expr -> expr MUL expr .)
    LT              reduce using rule 93 (binary_expr -> expr MUL expr .)
    LE              reduce using rule 93 (binary_expr -> expr MUL expr .)
    PLUS            reduce using rule 93 (binary_expr -> expr MUL expr .)
    MINUS           reduce using rule 93 (binary_expr -> expr MUL expr .)
    MUL             reduce using rule 93 (binary_expr -> expr MUL expr .)
    DIV             reduce using rule 93 (binary_expr -> expr MUL expr .)
    AND             reduce using rule 93 (binary_expr -> expr MUL expr .)
    OR              reduce using rule 93 (binary_expr -> expr MUL expr .)
    NOT             reduce using rule 93 (binary_expr -> expr MUL expr .)
    MOD             reduce using rule 93 (binary_expr -> expr MUL expr .)
    REDIRECT        reduce using rule 93 (binary_expr -> expr MUL expr .)
    NEWLINE         reduce using rule 93 (binary_expr -> expr MUL expr .)
    $end            reduce using rule 93 (binary_expr -> expr MUL expr .)
    RBRACE          reduce using rule 93 (binary_expr -> expr MUL expr .)
    RPAREN          reduce using rule 93 (binary_expr -> expr MUL expr .)
    COLON           reduce using rule 93 (binary_expr -> expr MUL expr .)
    COMMA           reduce using rule 93 (binary_expr -> expr MUL expr .)
    RBRACKET        reduce using rule 93 (binary_expr -> expr MUL expr .)
    REGEX           shift and go to state 113
    LBRACKET        shift and go to state 110

  ! REGEX           [ reduce using rule 93 (binary_expr -> expr MUL expr .) ]
  ! LBRACKET        [ reduce using rule 93 (binary_expr -> expr MUL expr .) ]
  ! EQ              [ shift and go to state 99 ]
  ! NE              [ shift and go to state 100 ]
  ! GT              [ shift and go to state 103 ]
  ! GE              [ shift and go to state 108 ]
  ! LT              [ shift and go to state 109 ]
  ! LE              [ shift and go to state 105 ]
  ! PLUS            [ shift and go to state 114 ]
  ! MINUS           [ shift and go to state 106 ]
  ! MUL             [ shift and go to state 101 ]
  ! DIV             [ shift and go to state 102 ]
  ! AND             [ shift and go to state 111 ]
  ! OR              [ shift and go to state 107 ]
  ! NOT             [ shift and go to state 104 ]
  ! MOD             [ shift and go to state 112 ]


state 161

    (94) binary_expr -> expr DIV expr .
    (85) binary_expr -> expr . EQ expr
    (86) binary_expr -> expr . NE expr
    (87) binary_expr -> expr . GT expr
    (88) binary_expr -> expr . GE expr
    (89) binary_expr -> expr . LT expr
    (90) binary_expr -> expr . LE expr
    (91) binary_expr -> expr . PLUS expr
    (92) binary_expr -> expr . MINUS expr
    (93) binary_expr -> expr . MUL expr
    (94) binary_expr -> expr . DIV expr
    (95) binary_expr -> expr . REGEX expr
    (96) binary_expr -> expr . AND expr
    (97) binary_expr -> expr . OR expr
    (98) binary_expr -> expr . NOT expr
    (99) binary_expr -> expr . MOD expr
    (78) subscript_expr -> expr . LBRACKET expr RBRACKET

    EQ              reduce using rule 94 (binary_expr -> expr DIV expr .)
    NE              reduce using rule 94 (binary_expr -> expr DIV expr .)
    GT              reduce using rule 94 (binary_expr -> expr DIV expr .)
    GE              reduce using rule 94 (binary_expr -> expr DIV expr .)
    LT              reduce using rule 94 (binary_expr -> expr DIV expr .)
    LE              reduce using rule 94 (binary_expr -> expr DIV expr .)
    PLUS            reduce using rule 94 (binary_expr -> expr DIV expr .)
    MINUS           reduce using rule 94 (binary_expr -> expr DIV expr .)
    MUL             reduce using rule 94 (binary_expr -> expr DIV expr .)
    DIV             reduce using rule 94 (binary_expr -> expr DIV expr .)
    AND             reduce using rule 94 (binary_expr -> expr DIV expr .)
    OR              reduce using rule 94 (binary_expr -> expr DIV expr .)
    NOT             reduce using rule 94 (binary_expr -> expr DIV expr .)
    MOD             reduce using rule 94 (binary_expr -> expr DIV expr .)
    REDIRECT        reduce using rule 94 (binary_expr -> expr DIV expr .)
    NEWLINE         reduce using rule 94 (binary_expr -> expr DIV expr .)
    $end            reduce using rule 94 (binary_expr -> expr DIV expr .)
    RBRACE          reduce using rule 94 (binary_expr -> expr DIV expr .)
    RPAREN          reduce using rule 94 (binary_expr -> expr DIV expr .)
    COLON           reduce using rule 94 (binary_expr -> expr DIV expr .)
    COMMA           reduce using rule 94 (binary_expr -> expr DIV expr .)
    RBRACKET        reduce using rule 94 (binary_expr -> expr DIV expr .)
    REGEX           shift and go to state 113
    LBRACKET        shift and go to state 110

  ! REGEX           [ reduce using rule 94 (binary_expr -> expr DIV expr .) ]
  ! LBRACKET        [ reduce using rule 94 (binary_expr -> expr DIV expr .) ]
  ! EQ              [ shift and go to state 99 ]
  ! NE              [ shift and go to state 100 ]
  ! GT              [ shift and go to state 103 ]
  ! GE              [ shift and go to state 108 ]
  ! LT              [ shift and go to state 109 ]
  ! LE              [ shift and go to state 105 ]
  ! PLUS            [ shift and go to state 114 ]
  ! MINUS           [ shift and go to state 106 ]
  ! MUL             [ shift and go to state 101 ]
  ! DIV             [ shift and go to state 102 ]
  ! AND             [ shift and go to state 111 ]
  ! OR              [ shift and go to state 107 ]
  ! NOT             [ shift and go to state 104 ]
  ! MOD             [ shift and go to state 112 ]


state 162

    (87) binary_expr -> expr GT expr .
    (85) binary_expr -> expr . EQ expr
    (86) binary_expr -> expr . NE expr
    (87) binary_expr -> expr . GT expr
    (88) binary_expr -> expr . GE expr
    (89) binary_expr -> expr . LT expr
    (90) binary_expr -> expr . LE expr
    (91) binary_expr -> expr . PLUS expr
    (92) binary_expr -> expr . MINUS expr
    (93) binary_expr -> expr . MUL expr
    (94) binary_expr -> expr . DIV expr
    (95) binary_expr -> expr . REGEX expr
    (96) binary_expr -> expr . AND expr
    (97) binary_expr -> expr . OR expr
    (98) binary_expr -> expr . NOT expr
    (99) binary_expr -> expr . MOD expr
    (78) subscript_expr -> expr . LBRACKET expr RBRACKET

    GT              reduce using rule 87 (binary_expr -> expr GT expr .)
    LT              reduce using rule 87 (binary_expr -> expr GT expr .)
    AND             reduce using rule 87 (binary_expr -> expr GT expr .)
    OR              reduce using rule 87 (binary_expr -> expr GT expr .)
    NOT             reduce using rule 87 (binary_expr -> expr GT expr .)
    REDIRECT        reduce using rule 87 (binary_expr -> expr GT expr .)
    NEWLINE         reduce using rule 87 (binary_expr -> expr GT expr .)
    $end            reduce using rule 87 (binary_expr -> expr GT expr .)
    RBRACE          reduce using rule 87 (binary_expr -> expr GT expr .)
    RPAREN          reduce using rule 87 (binary_expr -> expr GT expr .)
    COLON           reduce using rule 87 (binary_expr -> expr GT expr .)
    COMMA           reduce using rule 87 (binary_expr -> expr GT expr .)
    RBRACKET        reduce using rule 87 (binary_expr -> expr GT expr .)
    EQ              shift and go to state 99
    NE              shift and go to state 100
    GE              shift and go to state 108
    LE              shift and go to state 105
    PLUS            shift and go to state 114
    MINUS           shift and go to state 106
    MUL             shift and go to state 101
    DIV             shift and go to state 102
    REGEX           shift and go to state 113
    MOD             shift and go to state 112
    LBRACKET        shift and go to state 110

  ! EQ              [ reduce using rule 87 (binary_expr -> expr GT expr .) ]
  ! NE              [ reduce using rule 87 (binary_expr -> expr GT expr .) ]
  ! GE              [ reduce using rule 87 (binary_expr -> expr GT expr .) ]
  ! LE              [ reduce using rule 87 (binary_expr -> expr GT expr .) ]
  ! PLUS            [ reduce using rule 87 (binary_expr -> expr GT expr .) ]
  ! MINUS           [ reduce using rule 87 (binary_expr -> expr GT expr .) ]
  ! MUL             [ reduce using rule 87 (binary_expr -> expr GT expr .) ]
  ! DIV             [ reduce using rule 87 (binary_expr -> expr GT expr .) ]
  ! REGEX           [ reduce using rule 87 (binary_expr -> expr GT expr .) ]
  ! MOD             [ reduce using rule 87 (binary_expr -> expr GT expr .) ]
  ! LBRACKET        [ reduce using rule 87 (binary_expr -> expr GT expr .) ]
  ! GT              [ shift and go to state 103 ]
  ! LT              [ shift and go to state 109 ]
  ! AND             [ shift and go to state 111 ]
  ! OR              [ shift and go to state 107 ]
  ! NOT             [ shift and go to state 104 ]


state 163

    (98) binary_expr -> expr NOT expr .
    (85) binary_expr -> expr . EQ expr
    (86) binary_expr -> expr . NE expr
    (87) binary_expr -> expr . GT expr
    (88) binary_expr -> expr . GE expr
    (89) binary_expr -> expr . LT expr
    (90) binary_expr -> expr . LE expr
    (91) binary_expr -> expr . PLUS expr
    (92) binary_expr -> expr . MINUS expr
    (93) binary_expr -> expr . MUL expr
    (94) binary_expr -> expr . DIV expr
    (95) binary_expr -> expr . REGEX expr
    (96) binary_expr -> expr . AND expr
    (97) binary_expr -> expr . OR expr
    (98) binary_expr -> expr . NOT expr
    (99) binary_expr -> expr . MOD expr
    (78) subscript_expr -> expr . LBRACKET expr RBRACKET

    AND             reduce using rule 98 (binary_expr -> expr NOT expr .)
    OR              reduce using rule 98 (binary_expr -> expr NOT expr .)
    REDIRECT        reduce using rule 98 (binary_expr -> expr NOT expr .)
    NEWLINE         reduce using rule 98 (binary_expr -> expr NOT expr .)
    $end            reduce using rule 98 (binary_expr -> expr NOT expr .)
    RBRACE          reduce using rule 98 (binary_expr -> expr NOT expr .)
    RPAREN          reduce using rule 98 (binary_expr -> expr NOT expr .)
    COLON           reduce using rule 98 (binary_expr -> expr NOT expr .)
    COMMA           reduce using rule 98 (binary_expr -> expr NOT expr .)
    RBRACKET        reduce using rule 98 (binary_expr -> expr NOT expr .)
    EQ              shift and go to state 99
    NE              shift and go to state 100
    GT              shift and go to state 103
    GE              shift and go to state 108
    LT              shift and go to state 109
    LE              shift and go to state 105
    PLUS            shift and go to state 114
    MINUS           shift and go to state 106
    MUL             shift and go to state 101
    DIV             shift and go to state 102
    REGEX           shift and go to state 113
    NOT             shift and go to state 104
    MOD             shift and go to state 112
    LBRACKET        shift and go to state 110

  ! EQ              [ reduce using rule 98 (binary_expr -> expr NOT expr .) ]
  ! NE              [ reduce using rule 98 (binary_expr -> expr NOT expr .) ]
  ! GT              [ reduce using rule 98 (binary_expr -> expr NOT expr .) ]
  ! GE              [ reduce using rule 98 (binary_expr -> expr NOT expr .) ]
  ! LT              [ reduce using rule 98 (binary_expr -> expr NOT expr .) ]
  ! LE              [ reduce using rule 98 (binary_expr -> expr NOT expr .) ]
  ! PLUS            [ reduce using rule 98 (binary_expr -> expr NOT expr .) ]
  ! MINUS           [ reduce using rule 98 (binary_expr -> expr NOT expr .) ]
  ! MUL             [ reduce using rule 98 (binary_expr -> expr NOT expr .) ]
  ! DIV             [ reduce using rule 98 (binary_expr -> expr NOT expr .) ]
  ! REGEX           [ reduce using rule 98 (binary_expr -> expr NOT expr .) ]
  ! NOT             [ reduce using rule 98 (binary_expr -> expr NOT expr .) ]
  ! MOD             [ reduce using rule 98 (binary_expr -> expr NOT expr .) ]
  ! LBRACKET        [ reduce using rule 98 (binary_expr -> expr NOT expr .) ]
  ! AND             [ shift and go to state 111 ]
  ! OR              [ shift and go to state 107 ]


state 164

    (90) binary_expr -> expr LE expr .
    (85) binary_expr -> expr . EQ expr
    (86) binary_expr -> expr . NE expr
    (87) binary_expr -> expr . GT expr
    (88) binary_expr -> expr . GE expr
    (89) binary_expr -> expr . LT expr
    (90) binary_expr -> expr . LE expr
    (91) binary_expr -> expr . PLUS expr
    (92) binary_expr -> expr . MINUS expr
    (93) binary_expr -> expr . MUL expr
    (94) binary_expr -> expr . DIV expr
    (95) binary_expr -> expr . REGEX expr
    (96) binary_expr -> expr . AND expr
    (97) binary_expr -> expr . OR expr
    (98) binary_expr -> expr . NOT expr
    (99) binary_expr -> expr . MOD expr
    (78) subscript_expr -> expr . LBRACKET expr RBRACKET

    GT              reduce using rule 90 (binary_expr -> expr LE expr .)
    GE              reduce using rule 90 (binary_expr -> expr LE expr .)
    LT              reduce using rule 90 (binary_expr -> expr LE expr .)
    LE              reduce using rule 90 (binary_expr -> expr LE expr .)
    AND             reduce using rule 90 (binary_expr -> expr LE expr .)
    OR              reduce using rule 90 (binary_expr -> expr LE expr .)
    NOT             reduce using rule 90 (binary_expr -> expr LE expr .)
    REDIRECT        reduce using rule 90 (binary_expr -> expr LE expr .)
    NEWLINE         reduce using rule 90 (binary_expr -> expr LE expr .)
    $end            reduce using rule 90 (binary_expr -> expr LE expr .)
    RBRACE          reduce using rule 90 (binary_expr -> expr LE expr .)
    RPAREN          reduce using rule 90 (binary_expr -> expr LE expr .)
    COLON           reduce using rule 90 (binary_expr -> expr LE expr .)
    COMMA           reduce using rule 90 (binary_expr -> expr LE expr .)
    RBRACKET        reduce using rule 90 (binary_expr -> expr LE expr .)
    EQ              shift and go to state 99
    NE              shift and go to state 100
    PLUS            shift and go to state 114
    MINUS           shift and go to state 106
    MUL             shift and go to state 101
    DIV             shift and go to state 102
    REGEX           shift and go to state 113
    MOD             shift and go to state 112
    LBRACKET        shift and go to state 110

  ! EQ              [ reduce using rule 90 (binary_expr -> expr LE expr .) ]
  ! NE              [ reduce using rule 90 (binary_expr -> expr LE expr .) ]
  ! PLUS            [ reduce using rule 90 (binary_expr -> expr LE expr .) ]
  ! MINUS           [ reduce using rule 90 (binary_expr -> expr LE expr .) ]
  ! MUL             [ reduce using rule 90 (binary_expr -> expr LE expr .) ]
  ! DIV             [ reduce using rule 90 (binary_expr -> expr LE expr .) ]
  ! REGEX           [ reduce using rule 90 (binary_expr -> expr LE expr .) ]
  ! MOD             [ reduce using rule 90 (binary_expr -> expr LE expr .) ]
  ! LBRACKET        [ reduce using rule 90 (binary_expr -> expr LE expr .) ]
  ! GT              [ shift and go to state 103 ]
  ! GE              [ shift and go to state 108 ]
  ! LT              [ shift and go to state 109 ]
  ! LE              [ shift and go to state 105 ]
  ! AND             [ shift and go to state 111 ]
  ! OR              [ shift and go to state 107 ]
  ! NOT             [ shift and go to state 104 ]


state 165

    (92) binary_expr -> expr MINUS expr .
    (85) binary_expr -> expr . EQ expr
    (86) binary_expr -> expr . NE expr
    (87) binary_expr -> expr . GT expr
    (88) binary_expr -> expr . GE expr
    (89) binary_expr -> expr . LT expr
    (90) binary_expr -> expr . LE expr
    (91) binary_expr -> expr . PLUS expr
    (92) binary_expr -> expr . MINUS expr
    (93) binary_expr -> expr . MUL expr
    (94) binary_expr -> expr . DIV expr
    (95) binary_expr -> expr . REGEX expr
    (96) binary_expr -> expr . AND expr
    (97) binary_expr -> expr . OR expr
    (98) binary_expr -> expr . NOT expr
    (99) binary_expr -> expr . MOD expr
    (78) subscript_expr -> expr . LBRACKET expr RBRACKET

    EQ              reduce using rule 92 (binary_expr -> expr MINUS expr .)
    NE              reduce using rule 92 (binary_expr -> expr MINUS expr .)
    GT              reduce using rule 92 (binary_expr -> expr MINUS expr .)
    GE              reduce using rule 92 (binary_expr -> expr MINUS expr .)
    LT              reduce using rule 92 (binary_expr -> expr MINUS expr .)
    LE              reduce using rule 92 (binary_expr -> expr MINUS expr .)
    PLUS            reduce using rule 92 (binary_expr -> expr MINUS expr .)
    MINUS           reduce using rule 92 (binary_expr -> expr MINUS expr .)
    AND             reduce using rule 92 (binary_expr -> expr MINUS expr .)
    OR              reduce using rule 92 (binary_expr -> expr MINUS expr .)
    NOT             reduce using rule 92 (binary_expr -> expr MINUS expr .)
    REDIRECT        reduce using rule 92 (binary_expr -> expr MINUS expr .)
    NEWLINE         reduce using rule 92 (binary_expr -> expr MINUS expr .)
    $end            reduce using rule 92 (binary_expr -> expr MINUS expr .)
    RBRACE          reduce using rule 92 (binary_expr -> expr MINUS expr .)
    RPAREN          reduce using rule 92 (binary_expr -> expr MINUS expr .)
    COLON           reduce using rule 92 (binary_expr -> expr MINUS expr .)
    COMMA           reduce using rule 92 (binary_expr -> expr MINUS expr .)
    RBRACKET        reduce using rule 92 (binary_expr -> expr MINUS expr .)
    MUL             shift and go to state 101
    DIV             shift and go to state 102
    REGEX           shift and go to state 113
    MOD             shift and go to state 112
    LBRACKET        shift and go to state 110

  ! MUL             [ reduce using rule 92 (binary_expr -> expr MINUS expr .) ]
  ! DIV             [ reduce using rule 92 (binary_expr -> expr MINUS expr .) ]
  ! REGEX           [ reduce using rule 92 (binary_expr -> expr MINUS expr .) ]
  ! MOD             [ reduce using rule 92 (binary_expr -> expr MINUS expr .) ]
  ! LBRACKET        [ reduce using rule 92 (binary_expr -> expr MINUS expr .) ]
  ! EQ              [ shift and go to state 99 ]
  ! NE              [ shift and go to state 100 ]
  ! GT              [ shift and go to state 103 ]
  ! GE              [ shift and go to state 108 ]
  ! LT              [ shift and go to state 109 ]
  ! LE              [ shift and go to state 105 ]
  ! PLUS            [ shift and go to state 114 ]
  ! MINUS           [ shift and go to state 106 ]
  ! AND             [ shift and go to state 111 ]
  ! OR              [ shift and go to state 107 ]
  ! NOT             [ shift and go to state 104 ]


state 166

    (97) binary_expr -> expr OR expr .
    (85) binary_expr -> expr . EQ expr
    (86) binary_expr -> expr . NE expr
    (87) binary_expr -> expr . GT expr
    (88) binary_expr -> expr . GE expr
    (89) binary_expr -> expr . LT expr
    (90) binary_expr -> expr . LE expr
    (91) binary_expr -> expr . PLUS expr
    (92) binary_expr -> expr . MINUS expr
    (93) binary_expr -> expr . MUL expr
    (94) binary_expr -> expr . DIV expr
    (95) binary_expr -> expr . REGEX expr
    (96) binary_expr -> expr . AND expr
    (97) binary_expr -> expr . OR expr
    (98) binary_expr -> expr . NOT expr
    (99) binary_expr -> expr . MOD expr
    (78) subscript_expr -> expr . LBRACKET expr RBRACKET

    AND             reduce using rule 97 (binary_expr -> expr OR expr .)
    OR              reduce using rule 97 (binary_expr -> expr OR expr .)
    REDIRECT        reduce using rule 97 (binary_expr -> expr OR expr .)
    NEWLINE         reduce using rule 97 (binary_expr -> expr OR expr .)
    $end            reduce using rule 97 (binary_expr -> expr OR expr .)
    RBRACE          reduce using rule 97 (binary_expr -> expr OR expr .)
    RPAREN          reduce using rule 97 (binary_expr -> expr OR expr .)
    COLON           reduce using rule 97 (binary_expr -> expr OR expr .)
    COMMA           reduce using rule 97 (binary_expr -> expr OR expr .)
    RBRACKET        reduce using rule 97 (binary_expr -> expr OR expr .)
    EQ              shift and go to state 99
    NE              shift and go to state 100
    GT              shift and go to state 103
    GE              shift and go to state 108
    LT              shift and go to state 109
    LE              shift and go to state 105
    PLUS            shift and go to state 114
    MINUS           shift and go to state 106
    MUL             shift and go to state 101
    DIV             shift and go to state 102
    REGEX           shift and go to state 113
    NOT             shift and go to state 104
    MOD             shift and go to state 112
    LBRACKET        shift and go to state 110

  ! EQ              [ reduce using rule 97 (binary_expr -> expr OR expr .) ]
  ! NE              [ reduce using rule 97 (binary_expr -> expr OR expr .) ]
  ! GT              [ reduce using rule 97 (binary_expr -> expr OR expr .) ]
  ! GE              [ reduce using rule 97 (binary_expr -> expr OR expr .) ]
  ! LT              [ reduce using rule 97 (binary_expr -> expr OR expr .) ]
  ! LE              [ reduce using rule 97 (binary_expr -> expr OR expr .) ]
  ! PLUS            [ reduce using rule 97 (binary_expr -> expr OR expr .) ]
  ! MINUS           [ reduce using rule 97 (binary_expr -> expr OR expr .) ]
  ! MUL             [ reduce using rule 97 (binary_expr -> expr OR expr .) ]
  ! DIV             [ reduce using rule 97 (binary_expr -> expr OR expr .) ]
  ! REGEX           [ reduce using rule 97 (binary_expr -> expr OR expr .) ]
  ! NOT             [ reduce using rule 97 (binary_expr -> expr OR expr .) ]
  ! MOD             [ reduce using rule 97 (binary_expr -> expr OR expr .) ]
  ! LBRACKET        [ reduce using rule 97 (binary_expr -> expr OR expr .) ]
  ! AND             [ shift and go to state 111 ]
  ! OR              [ shift and go to state 107 ]


state 167

    (88) binary_expr -> expr GE expr .
    (85) binary_expr -> expr . EQ expr
    (86) binary_expr -> expr . NE expr
    (87) binary_expr -> expr . GT expr
    (88) binary_expr -> expr . GE expr
    (89) binary_expr -> expr . LT expr
    (90) binary_expr -> expr . LE expr
    (91) binary_expr -> expr . PLUS expr
    (92) binary_expr -> expr . MINUS expr
    (93) binary_expr -> expr . MUL expr
    (94) binary_expr -> expr . DIV expr
    (95) binary_expr -> expr . REGEX expr
    (96) binary_expr -> expr . AND expr
    (97) binary_expr -> expr . OR expr
    (98) binary_expr -> expr . NOT expr
    (99) binary_expr -> expr . MOD expr
    (78) subscript_expr -> expr . LBRACKET expr RBRACKET

    GT              reduce using rule 88 (binary_expr -> expr GE expr .)
    GE              reduce using rule 88 (binary_expr -> expr GE expr .)
    LT              reduce using rule 88 (binary_expr -> expr GE expr .)
    LE              reduce using rule 88 (binary_expr -> expr GE expr .)
    AND             reduce using rule 88 (binary_expr -> expr GE expr .)
    OR              reduce using rule 88 (binary_expr -> expr GE expr .)
    NOT             reduce using rule 88 (binary_expr -> expr GE expr .)
    REDIRECT        reduce using rule 88 (binary_expr -> expr GE expr .)
    NEWLINE         reduce using rule 88 (binary_expr -> expr GE expr .)
    $end            reduce using rule 88 (binary_expr -> expr GE expr .)
    RBRACE          reduce using rule 88 (binary_expr -> expr GE expr .)
    RPAREN          reduce using rule 88 (binary_expr -> expr GE expr .)
    COLON           reduce using rule 88 (binary_expr -> expr GE expr .)
    COMMA           reduce using rule 88 (binary_expr -> expr GE expr .)
    RBRACKET        reduce using rule 88 (binary_expr -> expr GE expr .)
    EQ              shift and go to state 99
    NE              shift and go to state 100
    PLUS            shift and go to state 114
    MINUS           shift and go to state 106
    MUL             shift and go to state 101
    DIV             shift and go to state 102
    REGEX           shift and go to state 113
    MOD             shift and go to state 112
    LBRACKET        shift and go to state 110

  ! EQ              [ reduce using rule 88 (binary_expr -> expr GE expr .) ]
  ! NE              [ reduce using rule 88 (binary_expr -> expr GE expr .) ]
  ! PLUS            [ reduce using rule 88 (binary_expr -> expr GE expr .) ]
  ! MINUS           [ reduce using rule 88 (binary_expr -> expr GE expr .) ]
  ! MUL             [ reduce using rule 88 (binary_expr -> expr GE expr .) ]
  ! DIV             [ reduce using rule 88 (binary_expr -> expr GE expr .) ]
  ! REGEX           [ reduce using rule 88 (binary_expr -> expr GE expr .) ]
  ! MOD             [ reduce using rule 88 (binary_expr -> expr GE expr .) ]
  ! LBRACKET        [ reduce using rule 88 (binary_expr -> expr GE expr .) ]
  ! GT              [ shift and go to state 103 ]
  ! GE              [ shift and go to state 108 ]
  ! LT              [ shift and go to state 109 ]
  ! LE              [ shift and go to state 105 ]
  ! AND             [ shift and go to state 111 ]
  ! OR              [ shift and go to state 107 ]
  ! NOT             [ shift and go to state 104 ]


state 168

    (89) binary_expr -> expr LT expr .
    (85) binary_expr -> expr . EQ expr
    (86) binary_expr -> expr . NE expr
    (87) binary_expr -> expr . GT expr
    (88) binary_expr -> expr . GE expr
    (89) binary_expr -> expr . LT expr
    (90) binary_expr -> expr . LE expr
    (91) binary_expr -> expr . PLUS expr
    (92) binary_expr -> expr . MINUS expr
    (93) binary_expr -> expr . MUL expr
    (94) binary_expr -> expr . DIV expr
    (95) binary_expr -> expr . REGEX expr
    (96) binary_expr -> expr . AND expr
    (97) binary_expr -> expr . OR expr
    (98) binary_expr -> expr . NOT expr
    (99) binary_expr -> expr . MOD expr
    (78) subscript_expr -> expr . LBRACKET expr RBRACKET

    GT              reduce using rule 89 (binary_expr -> expr LT expr .)
    LT              reduce using rule 89 (binary_expr -> expr LT expr .)
    AND             reduce using rule 89 (binary_expr -> expr LT expr .)
    OR              reduce using rule 89 (binary_expr -> expr LT expr .)
    NOT             reduce using rule 89 (binary_expr -> expr LT expr .)
    REDIRECT        reduce using rule 89 (binary_expr -> expr LT expr .)
    NEWLINE         reduce using rule 89 (binary_expr -> expr LT expr .)
    $end            reduce using rule 89 (binary_expr -> expr LT expr .)
    RBRACE          reduce using rule 89 (binary_expr -> expr LT expr .)
    RPAREN          reduce using rule 89 (binary_expr -> expr LT expr .)
    COLON           reduce using rule 89 (binary_expr -> expr LT expr .)
    COMMA           reduce using rule 89 (binary_expr -> expr LT expr .)
    RBRACKET        reduce using rule 89 (binary_expr -> expr LT expr .)
    EQ              shift and go to state 99
    NE              shift and go to state 100
    GE              shift and go to state 108
    LE              shift and go to state 105
    PLUS            shift and go to state 114
    MINUS           shift and go to state 106
    MUL             shift and go to state 101
    DIV             shift and go to state 102
    REGEX           shift and go to state 113
    MOD             shift and go to state 112
    LBRACKET        shift and go to state 110

  ! EQ              [ reduce using rule 89 (binary_expr -> expr LT expr .) ]
  ! NE              [ reduce using rule 89 (binary_expr -> expr LT expr .) ]
  ! GE              [ reduce using rule 89 (binary_expr -> expr LT expr .) ]
  ! LE              [ reduce using rule 89 (binary_expr -> expr LT expr .) ]
  ! PLUS            [ reduce using rule 89 (binary_expr -> expr LT expr .) ]
  ! MINUS           [ reduce using rule 89 (binary_expr -> expr LT expr .) ]
  ! MUL             [ reduce using rule 89 (binary_expr -> expr LT expr .) ]
  ! DIV             [ reduce using rule 89 (binary_expr -> expr LT expr .) ]
  ! REGEX           [ reduce using rule 89 (binary_expr -> expr LT expr .) ]
  ! MOD             [ reduce using rule 89 (binary_expr -> expr LT expr .) ]
  ! LBRACKET        [ reduce using rule 89 (binary_expr -> expr LT expr .) ]
  ! GT              [ shift and go to state 103 ]
  ! LT              [ shift and go to state 109 ]
  ! AND             [ shift and go to state 111 ]
  ! OR              [ shift and go to state 107 ]
  ! NOT             [ shift and go to state 104 ]


state 169

    (78) subscript_expr -> expr LBRACKET expr . RBRACKET
    (85) binary_expr -> expr . EQ expr
    (86) binary_expr -> expr . NE expr
    (87) binary_expr -> expr . GT expr
    (88) binary_expr -> expr . GE expr
    (89) binary_expr -> expr . LT expr
    (90) binary_expr -> expr . LE expr
    (91) binary_expr -> expr . PLUS expr
    (92) binary_expr -> expr . MINUS expr
    (93) binary_expr -> expr . MUL expr
    (94) binary_expr -> expr . DIV expr
    (95) binary_expr -> expr . REGEX expr
    (96) binary_expr -> expr . AND expr
    (97) binary_expr -> expr . OR expr
    (98) binary_expr -> expr . NOT expr
    (99) binary_expr -> expr . MOD expr
    (78) subscript_expr -> expr . LBRACKET expr RBRACKET

    RBRACKET        shift and go to state 208
    EQ              shift and go to state 99
    NE              shift and go to state 100
    GT              shift and go to state 103
    GE              shift and go to state 108
    LT              shift and go to state 109
    LE              shift and go to state 105
    PLUS            shift and go to state 114
    MINUS           shift and go to state 106
    MUL             shift and go to state 101
    DIV             shift and go to state 102
    REGEX           shift and go to state 113
    AND             shift and go to state 111
    OR              shift and go to state 107
    NOT             shift and go to state 104
    MOD             shift and go to state 112
    LBRACKET        shift and go to state 110


state 170

    (96) binary_expr -> expr AND expr .
    (85) binary_expr -> expr . EQ expr
    (86) binary_expr -> expr . NE expr
    (87) binary_expr -> expr . GT expr
    (88) binary_expr -> expr . GE expr
    (89) binary_expr -> expr . LT expr
    (90) binary_expr -> expr . LE expr
    (91) binary_expr -> expr . PLUS expr
    (92) binary_expr -> expr . MINUS expr
    (93) binary_expr -> expr . MUL expr
    (94) binary_expr -> expr . DIV expr
    (95) binary_expr -> expr . REGEX expr
    (96) binary_expr -> expr . AND expr
    (97) binary_expr -> expr . OR expr
    (98) binary_expr -> expr . NOT expr
    (99) binary_expr -> expr . MOD expr
    (78) subscript_expr -> expr . LBRACKET expr RBRACKET

    AND             reduce using rule 96 (binary_expr -> expr AND expr .)
    OR              reduce using rule 96 (binary_expr -> expr AND expr .)
    REDIRECT        reduce using rule 96 (binary_expr -> expr AND expr .)
    NEWLINE         reduce using rule 96 (binary_expr -> expr AND expr .)
    $end            reduce using rule 96 (binary_expr -> expr AND expr .)
    RBRACE          reduce using rule 96 (binary_expr -> expr AND expr .)
    RPAREN          reduce using rule 96 (binary_expr -> expr AND expr .)
    COLON           reduce using rule 96 (binary_expr -> expr AND expr .)
    COMMA           reduce using rule 96 (binary_expr -> expr AND expr .)
    RBRACKET        reduce using rule 96 (binary_expr -> expr AND expr .)
    EQ              shift and go to state 99
    NE              shift and go to state 100
    GT              shift and go to state 103
    GE              shift and go to state 108
    LT              shift and go to state 109
    LE              shift and go to state 105
    PLUS            shift and go to state 114
    MINUS           shift and go to state 106
    MUL             shift and go to state 101
    DIV             shift and go to state 102
    REGEX           shift and go to state 113
    NOT             shift and go to state 104
    MOD             shift and go to state 112
    LBRACKET        shift and go to state 110

  ! EQ              [ reduce using rule 96 (binary_expr -> expr AND expr .) ]
  ! NE              [ reduce using rule 96 (binary_expr -> expr AND expr .) ]
  ! GT              [ reduce using rule 96 (binary_expr -> expr AND expr .) ]
  ! GE              [ reduce using rule 96 (binary_expr -> expr AND expr .) ]
  ! LT              [ reduce using rule 96 (binary_expr -> expr AND expr .) ]
  ! LE              [ reduce using rule 96 (binary_expr -> expr AND expr .) ]
  ! PLUS            [ reduce using rule 96 (binary_expr -> expr AND expr .) ]
  ! MINUS           [ reduce using rule 96 (binary_expr -> expr AND expr .) ]
  ! MUL             [ reduce using rule 96 (binary_expr -> expr AND expr .) ]
  ! DIV             [ reduce using rule 96 (binary_expr -> expr AND expr .) ]
  ! REGEX           [ reduce using rule 96 (binary_expr -> expr AND expr .) ]
  ! NOT             [ reduce using rule 96 (binary_expr -> expr AND expr .) ]
  ! MOD             [ reduce using rule 96 (binary_expr -> expr AND expr .) ]
  ! LBRACKET        [ reduce using rule 96 (binary_expr -> expr AND expr .) ]
  ! AND             [ shift and go to state 111 ]
  ! OR              [ shift and go to state 107 ]


state 171

    (99) binary_expr -> expr MOD expr .
    (85) binary_expr -> expr . EQ expr
    (86) binary_expr -> expr . NE expr
    (87) binary_expr -> expr . GT expr
    (88) binary_expr -> expr . GE expr
    (89) binary_expr -> expr . LT expr
    (90) binary_expr -> expr . LE expr
    (91) binary_expr -> expr . PLUS expr
    (92) binary_expr -> expr . MINUS expr
    (93) binary_expr -> expr . MUL expr
    (94) binary_expr -> expr . DIV expr
    (95) binary_expr -> expr . REGEX expr
    (96) binary_expr -> expr . AND expr
    (97) binary_expr -> expr . OR expr
    (98) binary_expr -> expr . NOT expr
    (99) binary_expr -> expr . MOD expr
    (78) subscript_expr -> expr . LBRACKET expr RBRACKET

    EQ              reduce using rule 99 (binary_expr -> expr MOD expr .)
    NE              reduce using rule 99 (binary_expr -> expr MOD expr .)
    GT              reduce using rule 99 (binary_expr -> expr MOD expr .)
    GE              reduce using rule 99 (binary_expr -> expr MOD expr .)
    LT              reduce using rule 99 (binary_expr -> expr MOD expr .)
    LE              reduce using rule 99 (binary_expr -> expr MOD expr .)
    PLUS            reduce using rule 99 (binary_expr -> expr MOD expr .)
    MINUS           reduce using rule 99 (binary_expr -> expr MOD expr .)
    MUL             reduce using rule 99 (binary_expr -> expr MOD expr .)
    DIV             reduce using rule 99 (binary_expr -> expr MOD expr .)
    AND             reduce using rule 99 (binary_expr -> expr MOD expr .)
    OR              reduce using rule 99 (binary_expr -> expr MOD expr .)
    NOT             reduce using rule 99 (binary_expr -> expr MOD expr .)
    MOD             reduce using rule 99 (binary_expr -> expr MOD expr .)
    REDIRECT        reduce using rule 99 (binary_expr -> expr MOD expr .)
    NEWLINE         reduce using rule 99 (binary_expr -> expr MOD expr .)
    $end            reduce using rule 99 (binary_expr -> expr MOD expr .)
    RBRACE          reduce using rule 99 (binary_expr -> expr MOD expr .)
    RPAREN          reduce using rule 99 (binary_expr -> expr MOD expr .)
    COLON           reduce using rule 99 (binary_expr -> expr MOD expr .)
    COMMA           reduce using rule 99 (binary_expr -> expr MOD expr .)
    RBRACKET        reduce using rule 99 (binary_expr -> expr MOD expr .)
    REGEX           shift and go to state 113
    LBRACKET        shift and go to state 110

  ! REGEX           [ reduce using rule 99 (binary_expr -> expr MOD expr .) ]
  ! LBRACKET        [ reduce using rule 99 (binary_expr -> expr MOD expr .) ]
  ! EQ              [ shift and go to state 99 ]
  ! NE              [ shift and go to state 100 ]
  ! GT              [ shift and go to state 103 ]
  ! GE              [ shift and go to state 108 ]
  ! LT              [ shift and go to state 109 ]
  ! LE              [ shift and go to state 105 ]
  ! PLUS            [ shift and go to state 114 ]
  ! MINUS           [ shift and go to state 106 ]
  ! MUL             [ shift and go to state 101 ]
  ! DIV             [ shift and go to state 102 ]
  ! AND             [ shift and go to state 111 ]
  ! OR              [ shift and go to state 107 ]
  ! NOT             [ shift and go to state 104 ]
  ! MOD             [ shift and go to state 112 ]


state 172

    (95) binary_expr -> expr REGEX expr .
    (85) binary_expr -> expr . EQ expr
    (86) binary_expr -> expr . NE expr
    (87) binary_expr -> expr . GT expr
    (88) binary_expr -> expr . GE expr
    (89) binary_expr -> expr . LT expr
    (90) binary_expr -> expr . LE expr
    (91) binary_expr -> expr . PLUS expr
    (92) binary_expr -> expr . MINUS expr
    (93) binary_expr -> expr . MUL expr
    (94) binary_expr -> expr . DIV expr
    (95) binary_expr -> expr . REGEX expr
    (96) binary_expr -> expr . AND expr
    (97) binary_expr -> expr . OR expr
    (98) binary_expr -> expr . NOT expr
    (99) binary_expr -> expr . MOD expr
    (78) subscript_expr -> expr . LBRACKET expr RBRACKET

    EQ              reduce using rule 95 (binary_expr -> expr REGEX expr .)
    NE              reduce using rule 95 (binary_expr -> expr REGEX expr .)
    GT              reduce using rule 95 (binary_expr -> expr REGEX expr .)
    GE              reduce using rule 95 (binary_expr -> expr REGEX expr .)
    LT              reduce using rule 95 (binary_expr -> expr REGEX expr .)
    LE              reduce using rule 95 (binary_expr -> expr REGEX expr .)
    PLUS            reduce using rule 95 (binary_expr -> expr REGEX expr .)
    MINUS           reduce using rule 95 (binary_expr -> expr REGEX expr .)
    MUL             reduce using rule 95 (binary_expr -> expr REGEX expr .)
    DIV             reduce using rule 95 (binary_expr -> expr REGEX expr .)
    REGEX           reduce using rule 95 (binary_expr -> expr REGEX expr .)
    AND             reduce using rule 95 (binary_expr -> expr REGEX expr .)
    OR              reduce using rule 95 (binary_expr -> expr REGEX expr .)
    NOT             reduce using rule 95 (binary_expr -> expr REGEX expr .)
    MOD             reduce using rule 95 (binary_expr -> expr REGEX expr .)
    REDIRECT        reduce using rule 95 (binary_expr -> expr REGEX expr .)
    NEWLINE         reduce using rule 95 (binary_expr -> expr REGEX expr .)
    $end            reduce using rule 95 (binary_expr -> expr REGEX expr .)
    RBRACE          reduce using rule 95 (binary_expr -> expr REGEX expr .)
    RPAREN          reduce using rule 95 (binary_expr -> expr REGEX expr .)
    COLON           reduce using rule 95 (binary_expr -> expr REGEX expr .)
    COMMA           reduce using rule 95 (binary_expr -> expr REGEX expr .)
    RBRACKET        reduce using rule 95 (binary_expr -> expr REGEX expr .)
    LBRACKET        shift and go to state 110

  ! LBRACKET        [ reduce using rule 95 (binary_expr -> expr REGEX expr .) ]
  ! EQ              [ shift and go to state 99 ]
  ! NE              [ shift and go to state 100 ]
  ! GT              [ shift and go to state 103 ]
  ! GE              [ shift and go to state 108 ]
  ! LT              [ shift and go to state 109 ]
  ! LE              [ shift and go to state 105 ]
  ! PLUS            [ shift and go to state 114 ]
  ! MINUS           [ shift and go to state 106 ]
  ! MUL             [ shift and go to state 101 ]
  ! DIV             [ shift and go to state 102 ]
  ! REGEX           [ shift and go to state 113 ]
  ! AND             [ shift and go to state 111 ]
  ! OR              [ shift and go to state 107 ]
  ! NOT             [ shift and go to state 104 ]
  ! MOD             [ shift and go to state 112 ]


state 173

    (91) binary_expr -> expr PLUS expr .
    (85) binary_expr -> expr . EQ expr
    (86) binary_expr -> expr . NE expr
    (87) binary_expr -> expr . GT expr
    (88) binary_expr -> expr . GE expr
    (89) binary_expr -> expr . LT expr
    (90) binary_expr -> expr . LE expr
    (91) binary_expr -> expr . PLUS expr
    (92) binary_expr -> expr . MINUS expr
    (93) binary_expr -> expr . MUL expr
    (94) binary_expr -> expr . DIV expr
    (95) binary_expr -> expr . REGEX expr
    (96) binary_expr -> expr . AND expr
    (97) binary_expr -> expr . OR expr
    (98) binary_expr -> expr . NOT expr
    (99) binary_expr -> expr . MOD expr
    (78) subscript_expr -> expr . LBRACKET expr RBRACKET

    EQ              reduce using rule 91 (binary_expr -> expr PLUS expr .)
    NE              reduce using rule 91 (binary_expr -> expr PLUS expr .)
    GT              reduce using rule 91 (binary_expr -> expr PLUS expr .)
    GE              reduce using rule 91 (binary_expr -> expr PLUS expr .)
    LT              reduce using rule 91 (binary_expr -> expr PLUS expr .)
    LE              reduce using rule 91 (binary_expr -> expr PLUS expr .)
    PLUS            reduce using rule 91 (binary_expr -> expr PLUS expr .)
    MINUS           reduce using rule 91 (binary_expr -> expr PLUS expr .)
    AND             reduce using rule 91 (binary_expr -> expr PLUS expr .)
    OR              reduce using rule 91 (binary_expr -> expr PLUS expr .)
    NOT             reduce using rule 91 (binary_expr -> expr PLUS expr .)
    REDIRECT        reduce using rule 91 (binary_expr -> expr PLUS expr .)
    NEWLINE         reduce using rule 91 (binary_expr -> expr PLUS expr .)
    $end            reduce using rule 91 (binary_expr -> expr PLUS expr .)
    RBRACE          reduce using rule 91 (binary_expr -> expr PLUS expr .)
    RPAREN          reduce using rule 91 (binary_expr -> expr PLUS expr .)
    COLON           reduce using rule 91 (binary_expr -> expr PLUS expr .)
    COMMA           reduce using rule 91 (binary_expr -> expr PLUS expr .)
    RBRACKET        reduce using rule 91 (binary_expr -> expr PLUS expr .)
    MUL             shift and go to state 101
    DIV             shift and go to state 102
    REGEX           shift and go to state 113
    MOD             shift and go to state 112
    LBRACKET        shift and go to state 110

  ! MUL             [ reduce using rule 91 (binary_expr -> expr PLUS expr .) ]
  ! DIV             [ reduce using rule 91 (binary_expr -> expr PLUS expr .) ]
  ! REGEX           [ reduce using rule 91 (binary_expr -> expr PLUS expr .) ]
  ! MOD             [ reduce using rule 91 (binary_expr -> expr PLUS expr .) ]
  ! LBRACKET        [ reduce using rule 91 (binary_expr -> expr PLUS expr .) ]
  ! EQ              [ shift and go to state 99 ]
  ! NE              [ shift and go to state 100 ]
  ! GT              [ shift and go to state 103 ]
  ! GE              [ shift and go to state 108 ]
  ! LT              [ shift and go to state 109 ]
  ! LE              [ shift and go to state 105 ]
  ! PLUS            [ shift and go to state 114 ]
  ! MINUS           [ shift and go to state 106 ]
  ! AND             [ shift and go to state 111 ]
  ! OR              [ shift and go to state 107 ]
  ! NOT             [ shift and go to state 104 ]


state 174

    (56) array_literal -> LBRACKET expr_list RBRACKET .

    COMMA           reduce using rule 56 (array_literal -> LBRACKET expr_list RBRACKET .)
    error           reduce using rule 56 (array_literal -> LBRACKET expr_list RBRACKET .)
    ATOM            reduce using rule 56 (array_literal -> LBRACKET expr_list RBRACKET .)
    COPEN           reduce using rule 56 (array_literal -> LBRACKET expr_list RBRACKET .)
    LIST            reduce using rule 56 (array_literal -> LBRACKET expr_list RBRACKET .)
    UP              reduce using rule 56 (array_literal -> LBRACKET expr_list RBRACKET .)
    NUMBER          reduce using rule 56 (array_literal -> LBRACKET expr_list RBRACKET .)
    HEXNUMBER       reduce using rule 56 (array_literal -> LBRACKET expr_list RBRACKET .)
    BINNUMBER       reduce using rule 56 (array_literal -> LBRACKET expr_list RBRACKET .)
    OCTNUMBER       reduce using rule 56 (array_literal -> LBRACKET expr_list RBRACKET .)
    STRING          reduce using rule 56 (array_literal -> LBRACKET expr_list RBRACKET .)
    TRUE            reduce using rule 56 (array_literal -> LBRACKET expr_list RBRACKET .)
    FALSE           reduce using rule 56 (array_literal -> LBRACKET expr_list RBRACKET .)
    NULL            reduce using rule 56 (array_literal -> LBRACKET expr_list RBRACKET .)
    LBRACKET        reduce using rule 56 (array_literal -> LBRACKET expr_list RBRACKET .)
    LBRACE          reduce using rule 56 (array_literal -> LBRACKET expr_list RBRACKET .)
    REDIRECT        reduce using rule 56 (array_literal -> LBRACKET expr_list RBRACKET .)
    NEWLINE         reduce using rule 56 (array_literal -> LBRACKET expr_list RBRACKET .)
    $end            reduce using rule 56 (array_literal -> LBRACKET expr_list RBRACKET .)
    RBRACE          reduce using rule 56 (array_literal -> LBRACKET expr_list RBRACKET .)
    PIPE            reduce using rule 56 (array_literal -> LBRACKET expr_list RBRACKET .)
    RPAREN          reduce using rule 56 (array_literal -> LBRACKET expr_list RBRACKET .)
    COLON           reduce using rule 56 (array_literal -> LBRACKET expr_list RBRACKET .)
    EQ              reduce using rule 56 (array_literal -> LBRACKET expr_list RBRACKET .)
    NE              reduce using rule 56 (array_literal -> LBRACKET expr_list RBRACKET .)
    GT              reduce using rule 56 (array_literal -> LBRACKET expr_list RBRACKET .)
    GE              reduce using rule 56 (array_literal -> LBRACKET expr_list RBRACKET .)
    LT              reduce using rule 56 (array_literal -> LBRACKET expr_list RBRACKET .)
    LE              reduce using rule 56 (array_literal -> LBRACKET expr_list RBRACKET .)
    PLUS            reduce using rule 56 (array_literal -> LBRACKET expr_list RBRACKET .)
    MINUS           reduce using rule 56 (array_literal -> LBRACKET expr_list RBRACKET .)
    MUL             reduce using rule 56 (array_literal -> LBRACKET expr_list RBRACKET .)
    DIV             reduce using rule 56 (array_literal -> LBRACKET expr_list RBRACKET .)
    REGEX           reduce using rule 56 (array_literal -> LBRACKET expr_list RBRACKET .)
    AND             reduce using rule 56 (array_literal -> LBRACKET expr_list RBRACKET .)
    OR              reduce using rule 56 (array_literal -> LBRACKET expr_list RBRACKET .)
    NOT             reduce using rule 56 (array_literal -> LBRACKET expr_list RBRACKET .)
    MOD             reduce using rule 56 (array_literal -> LBRACKET expr_list RBRACKET .)
    RBRACKET        reduce using rule 56 (array_literal -> LBRACKET expr_list RBRACKET .)


state 175

    (41) expr_list -> expr COMMA . expr_list
    (40) expr_list -> . expr
    (41) expr_list -> . expr COMMA expr_list
    (42) expr -> . symbol
    (43) expr -> . literal
    (44) expr -> . array_literal
    (45) expr -> . dict_literal
    (46) expr -> . unary_expr
    (47) expr -> . binary_expr
    (48) expr -> . call
    (49) expr -> . subscript_expr
    (50) expr -> . anon_function_expr
    (51) expr -> . expr_expansion
    (52) expr -> . LPAREN expr RPAREN
    (53) expr -> . COPEN expr RBRACE
    (73) symbol -> . ATOM
    (65) literal -> . NUMBER
    (66) literal -> . HEXNUMBER
    (67) literal -> . BINNUMBER
    (68) literal -> . OCTNUMBER
    (69) literal -> . STRING
    (70) literal -> . TRUE
    (71) literal -> . FALSE
    (72) literal -> . NULL
    (55) array_literal -> . LBRACKET RBRACKET
    (56) array_literal -> . LBRACKET expr_list RBRACKET
    (57) dict_literal -> . LBRACE RBRACE
    (58) dict_literal -> . LBRACE NEWLINE RBRACE
    (59) dict_literal -> . LBRACE dict_pair_list RBRACE
    (83) unary_expr -> . MINUS expr
    (84) unary_expr -> . NOT expr
    (85) binary_expr -> . expr EQ expr
    (86) binary_expr -> . expr NE expr
    (87) binary_expr -> . expr GT expr
    (88) binary_expr -> . expr GE expr
    (89) binary_expr -> . expr LT expr
    (90) binary_expr -> . expr LE expr
    (91) binary_expr -> . expr PLUS expr
    (92) binary_expr -> . expr MINUS expr
    (93) binary_expr -> . expr MUL expr
    (94) binary_expr -> . expr DIV expr
    (95) binary_expr -> . expr REGEX expr
    (96) binary_expr -> . expr AND expr
    (97) binary_expr -> . expr OR expr
    (98) binary_expr -> . expr NOT expr
    (99) binary_expr -> . expr MOD expr
    (74) call -> . ATOM LPAREN RPAREN
    (75) call -> . ATOM LPAREN expr_list RPAREN
    (78) subscript_expr -> . expr LBRACKET expr RBRACKET
    (79) anon_function_expr -> . FUNCTION LPAREN RPAREN block
    (80) anon_function_expr -> . FUNCTION LPAREN RPAREN NEWLINE block
    (81) anon_function_expr -> . FUNCTION LPAREN function_argument_list RPAREN block
    (82) anon_function_expr -> . FUNCTION LPAREN function_argument_list RPAREN NEWLINE block
    (54) expr_expansion -> . EOPEN command RPAREN

    LPAREN          shift and go to state 35
    COPEN           shift and go to state 60
    ATOM            shift and go to state 38
    NUMBER          shift and go to state 43
    HEXNUMBER       shift and go to state 57
    BINNUMBER       shift and go to state 58
    OCTNUMBER       shift and go to state 54
    STRING          shift and go to state 44
    TRUE            shift and go to state 46
    FALSE           shift and go to state 51
    NULL            shift and go to state 56
    LBRACKET        shift and go to state 52
    LBRACE          shift and go to state 47
    MINUS           shift and go to state 40
    NOT             shift and go to state 45
    FUNCTION        shift and go to state 53
    EOPEN           shift and go to state 55

    expr_expansion                 shift and go to state 39
    binary_expr                    shift and go to state 33
    unary_expr                     shift and go to state 42
    literal                        shift and go to state 34
    expr                           shift and go to state 117
    expr_list                      shift and go to state 209
    array_literal                  shift and go to state 49
    subscript_expr                 shift and go to state 59
    symbol                         shift and go to state 50
    anon_function_expr             shift and go to state 41
    call                           shift and go to state 36
    dict_literal                   shift and go to state 37

state 176

    (81) anon_function_expr -> FUNCTION LPAREN function_argument_list . RPAREN block
    (82) anon_function_expr -> FUNCTION LPAREN function_argument_list . RPAREN NEWLINE block

    RPAREN          shift and go to state 210


state 177

    (34) function_argument_list -> ATOM .
    (35) function_argument_list -> ATOM . COMMA function_argument_list

    RPAREN          reduce using rule 34 (function_argument_list -> ATOM .)
    COMMA           shift and go to state 211


state 178

    (79) anon_function_expr -> FUNCTION LPAREN RPAREN . block
    (80) anon_function_expr -> FUNCTION LPAREN RPAREN . NEWLINE block
    (19) block -> . LBRACE stmt_list RBRACE
    (20) block -> . LBRACE NEWLINE stmt_list RBRACE
    (21) block -> . LBRACE NEWLINE RBRACE
    (22) block -> . LBRACE RBRACE

    NEWLINE         shift and go to state 213
    LBRACE          shift and go to state 214

    block                          shift and go to state 212

state 179

    (54) expr_expansion -> EOPEN command RPAREN .

    RPAREN          reduce using rule 54 (expr_expansion -> EOPEN command RPAREN .)
    EQ              reduce using rule 54 (expr_expansion -> EOPEN command RPAREN .)
    NE              reduce using rule 54 (expr_expansion -> EOPEN command RPAREN .)
    GT              reduce using rule 54 (expr_expansion -> EOPEN command RPAREN .)
    GE              reduce using rule 54 (expr_expansion -> EOPEN command RPAREN .)
    LT              reduce using rule 54 (expr_expansion -> EOPEN command RPAREN .)
    LE              reduce using rule 54 (expr_expansion -> EOPEN command RPAREN .)
    PLUS            reduce using rule 54 (expr_expansion -> EOPEN command RPAREN .)
    MINUS           reduce using rule 54 (expr_expansion -> EOPEN command RPAREN .)
    MUL             reduce using rule 54 (expr_expansion -> EOPEN command RPAREN .)
    DIV             reduce using rule 54 (expr_expansion -> EOPEN command RPAREN .)
    REGEX           reduce using rule 54 (expr_expansion -> EOPEN command RPAREN .)
    AND             reduce using rule 54 (expr_expansion -> EOPEN command RPAREN .)
    OR              reduce using rule 54 (expr_expansion -> EOPEN command RPAREN .)
    NOT             reduce using rule 54 (expr_expansion -> EOPEN command RPAREN .)
    MOD             reduce using rule 54 (expr_expansion -> EOPEN command RPAREN .)
    LBRACKET        reduce using rule 54 (expr_expansion -> EOPEN command RPAREN .)
    REDIRECT        reduce using rule 54 (expr_expansion -> EOPEN command RPAREN .)
    NEWLINE         reduce using rule 54 (expr_expansion -> EOPEN command RPAREN .)
    $end            reduce using rule 54 (expr_expansion -> EOPEN command RPAREN .)
    RBRACE          reduce using rule 54 (expr_expansion -> EOPEN command RPAREN .)
    COLON           reduce using rule 54 (expr_expansion -> EOPEN command RPAREN .)
    COMMA           reduce using rule 54 (expr_expansion -> EOPEN command RPAREN .)
    RBRACKET        reduce using rule 54 (expr_expansion -> EOPEN command RPAREN .)


state 180

    (53) expr -> COPEN expr RBRACE .

    EQ              reduce using rule 53 (expr -> COPEN expr RBRACE .)
    NE              reduce using rule 53 (expr -> COPEN expr RBRACE .)
    GT              reduce using rule 53 (expr -> COPEN expr RBRACE .)
    GE              reduce using rule 53 (expr -> COPEN expr RBRACE .)
    LT              reduce using rule 53 (expr -> COPEN expr RBRACE .)
    LE              reduce using rule 53 (expr -> COPEN expr RBRACE .)
    PLUS            reduce using rule 53 (expr -> COPEN expr RBRACE .)
    MINUS           reduce using rule 53 (expr -> COPEN expr RBRACE .)
    MUL             reduce using rule 53 (expr -> COPEN expr RBRACE .)
    DIV             reduce using rule 53 (expr -> COPEN expr RBRACE .)
    REGEX           reduce using rule 53 (expr -> COPEN expr RBRACE .)
    AND             reduce using rule 53 (expr -> COPEN expr RBRACE .)
    OR              reduce using rule 53 (expr -> COPEN expr RBRACE .)
    NOT             reduce using rule 53 (expr -> COPEN expr RBRACE .)
    MOD             reduce using rule 53 (expr -> COPEN expr RBRACE .)
    LBRACKET        reduce using rule 53 (expr -> COPEN expr RBRACE .)
    REDIRECT        reduce using rule 53 (expr -> COPEN expr RBRACE .)
    NEWLINE         reduce using rule 53 (expr -> COPEN expr RBRACE .)
    $end            reduce using rule 53 (expr -> COPEN expr RBRACE .)
    RBRACE          reduce using rule 53 (expr -> COPEN expr RBRACE .)
    RPAREN          reduce using rule 53 (expr -> COPEN expr RBRACE .)
    COLON           reduce using rule 53 (expr -> COPEN expr RBRACE .)
    COMMA           reduce using rule 53 (expr -> COPEN expr RBRACE .)
    RBRACKET        reduce using rule 53 (expr -> COPEN expr RBRACE .)


state 181

    (76) subscript_left -> subscript_left LBRACKET expr RBRACKET .

    ASSIGN          reduce using rule 76 (subscript_left -> subscript_left LBRACKET expr RBRACKET .)
    LBRACKET        reduce using rule 76 (subscript_left -> subscript_left LBRACKET expr RBRACKET .)


state 182

    (75) call -> ATOM LPAREN expr_list RPAREN .

    RBRACE          reduce using rule 75 (call -> ATOM LPAREN expr_list RPAREN .)
    EQ              reduce using rule 75 (call -> ATOM LPAREN expr_list RPAREN .)
    NE              reduce using rule 75 (call -> ATOM LPAREN expr_list RPAREN .)
    GT              reduce using rule 75 (call -> ATOM LPAREN expr_list RPAREN .)
    GE              reduce using rule 75 (call -> ATOM LPAREN expr_list RPAREN .)
    LT              reduce using rule 75 (call -> ATOM LPAREN expr_list RPAREN .)
    LE              reduce using rule 75 (call -> ATOM LPAREN expr_list RPAREN .)
    PLUS            reduce using rule 75 (call -> ATOM LPAREN expr_list RPAREN .)
    MINUS           reduce using rule 75 (call -> ATOM LPAREN expr_list RPAREN .)
    MUL             reduce using rule 75 (call -> ATOM LPAREN expr_list RPAREN .)
    DIV             reduce using rule 75 (call -> ATOM LPAREN expr_list RPAREN .)
    REGEX           reduce using rule 75 (call -> ATOM LPAREN expr_list RPAREN .)
    AND             reduce using rule 75 (call -> ATOM LPAREN expr_list RPAREN .)
    OR              reduce using rule 75 (call -> ATOM LPAREN expr_list RPAREN .)
    NOT             reduce using rule 75 (call -> ATOM LPAREN expr_list RPAREN .)
    MOD             reduce using rule 75 (call -> ATOM LPAREN expr_list RPAREN .)
    LBRACKET        reduce using rule 75 (call -> ATOM LPAREN expr_list RPAREN .)
    REDIRECT        reduce using rule 75 (call -> ATOM LPAREN expr_list RPAREN .)
    NEWLINE         reduce using rule 75 (call -> ATOM LPAREN expr_list RPAREN .)
    $end            reduce using rule 75 (call -> ATOM LPAREN expr_list RPAREN .)
    RPAREN          reduce using rule 75 (call -> ATOM LPAREN expr_list RPAREN .)
    COLON           reduce using rule 75 (call -> ATOM LPAREN expr_list RPAREN .)
    COMMA           reduce using rule 75 (call -> ATOM LPAREN expr_list RPAREN .)
    RBRACKET        reduce using rule 75 (call -> ATOM LPAREN expr_list RPAREN .)


state 183

    (23) if_stmt -> IF LPAREN expr RPAREN . block
    (24) if_stmt -> IF LPAREN expr RPAREN . block ELSE block
    (19) block -> . LBRACE stmt_list RBRACE
    (20) block -> . LBRACE NEWLINE stmt_list RBRACE
    (21) block -> . LBRACE NEWLINE RBRACE
    (22) block -> . LBRACE RBRACE

    LBRACE          shift and go to state 214

    block                          shift and go to state 215

state 184

    (126) binary_parameter -> ATOM EQ parameter .

    error           reduce using rule 126 (binary_parameter -> ATOM EQ parameter .)
    ATOM            reduce using rule 126 (binary_parameter -> ATOM EQ parameter .)
    COPEN           reduce using rule 126 (binary_parameter -> ATOM EQ parameter .)
    LIST            reduce using rule 126 (binary_parameter -> ATOM EQ parameter .)
    UP              reduce using rule 126 (binary_parameter -> ATOM EQ parameter .)
    NUMBER          reduce using rule 126 (binary_parameter -> ATOM EQ parameter .)
    HEXNUMBER       reduce using rule 126 (binary_parameter -> ATOM EQ parameter .)
    BINNUMBER       reduce using rule 126 (binary_parameter -> ATOM EQ parameter .)
    OCTNUMBER       reduce using rule 126 (binary_parameter -> ATOM EQ parameter .)
    STRING          reduce using rule 126 (binary_parameter -> ATOM EQ parameter .)
    TRUE            reduce using rule 126 (binary_parameter -> ATOM EQ parameter .)
    FALSE           reduce using rule 126 (binary_parameter -> ATOM EQ parameter .)
    NULL            reduce using rule 126 (binary_parameter -> ATOM EQ parameter .)
    LBRACKET        reduce using rule 126 (binary_parameter -> ATOM EQ parameter .)
    LBRACE          reduce using rule 126 (binary_parameter -> ATOM EQ parameter .)
    REDIRECT        reduce using rule 126 (binary_parameter -> ATOM EQ parameter .)
    NEWLINE         reduce using rule 126 (binary_parameter -> ATOM EQ parameter .)
    $end            reduce using rule 126 (binary_parameter -> ATOM EQ parameter .)
    RBRACE          reduce using rule 126 (binary_parameter -> ATOM EQ parameter .)
    PIPE            reduce using rule 126 (binary_parameter -> ATOM EQ parameter .)
    RPAREN          reduce using rule 126 (binary_parameter -> ATOM EQ parameter .)


state 185

    (127) binary_parameter -> ATOM NE parameter .

    error           reduce using rule 127 (binary_parameter -> ATOM NE parameter .)
    ATOM            reduce using rule 127 (binary_parameter -> ATOM NE parameter .)
    COPEN           reduce using rule 127 (binary_parameter -> ATOM NE parameter .)
    LIST            reduce using rule 127 (binary_parameter -> ATOM NE parameter .)
    UP              reduce using rule 127 (binary_parameter -> ATOM NE parameter .)
    NUMBER          reduce using rule 127 (binary_parameter -> ATOM NE parameter .)
    HEXNUMBER       reduce using rule 127 (binary_parameter -> ATOM NE parameter .)
    BINNUMBER       reduce using rule 127 (binary_parameter -> ATOM NE parameter .)
    OCTNUMBER       reduce using rule 127 (binary_parameter -> ATOM NE parameter .)
    STRING          reduce using rule 127 (binary_parameter -> ATOM NE parameter .)
    TRUE            reduce using rule 127 (binary_parameter -> ATOM NE parameter .)
    FALSE           reduce using rule 127 (binary_parameter -> ATOM NE parameter .)
    NULL            reduce using rule 127 (binary_parameter -> ATOM NE parameter .)
    LBRACKET        reduce using rule 127 (binary_parameter -> ATOM NE parameter .)
    LBRACE          reduce using rule 127 (binary_parameter -> ATOM NE parameter .)
    REDIRECT        reduce using rule 127 (binary_parameter -> ATOM NE parameter .)
    NEWLINE         reduce using rule 127 (binary_parameter -> ATOM NE parameter .)
    $end            reduce using rule 127 (binary_parameter -> ATOM NE parameter .)
    RBRACE          reduce using rule 127 (binary_parameter -> ATOM NE parameter .)
    PIPE            reduce using rule 127 (binary_parameter -> ATOM NE parameter .)
    RPAREN          reduce using rule 127 (binary_parameter -> ATOM NE parameter .)


state 186

    (133) binary_parameter -> ATOM INC parameter .

    error           reduce using rule 133 (binary_parameter -> ATOM INC parameter .)
    ATOM            reduce using rule 133 (binary_parameter -> ATOM INC parameter .)
    COPEN           reduce using rule 133 (binary_parameter -> ATOM INC parameter .)
    LIST            reduce using rule 133 (binary_parameter -> ATOM INC parameter .)
    UP              reduce using rule 133 (binary_parameter -> ATOM INC parameter .)
    NUMBER          reduce using rule 133 (binary_parameter -> ATOM INC parameter .)
    HEXNUMBER       reduce using rule 133 (binary_parameter -> ATOM INC parameter .)
    BINNUMBER       reduce using rule 133 (binary_parameter -> ATOM INC parameter .)
    OCTNUMBER       reduce using rule 133 (binary_parameter -> ATOM INC parameter .)
    STRING          reduce using rule 133 (binary_parameter -> ATOM INC parameter .)
    TRUE            reduce using rule 133 (binary_parameter -> ATOM INC parameter .)
    FALSE           reduce using rule 133 (binary_parameter -> ATOM INC parameter .)
    NULL            reduce using rule 133 (binary_parameter -> ATOM INC parameter .)
    LBRACKET        reduce using rule 133 (binary_parameter -> ATOM INC parameter .)
    LBRACE          reduce using rule 133 (binary_parameter -> ATOM INC parameter .)
    REDIRECT        reduce using rule 133 (binary_parameter -> ATOM INC parameter .)
    NEWLINE         reduce using rule 133 (binary_parameter -> ATOM INC parameter .)
    $end            reduce using rule 133 (binary_parameter -> ATOM INC parameter .)
    RBRACE          reduce using rule 133 (binary_parameter -> ATOM INC parameter .)
    PIPE            reduce using rule 133 (binary_parameter -> ATOM INC parameter .)
    RPAREN          reduce using rule 133 (binary_parameter -> ATOM INC parameter .)


state 187

    (128) binary_parameter -> ATOM GT parameter .

    error           reduce using rule 128 (binary_parameter -> ATOM GT parameter .)
    ATOM            reduce using rule 128 (binary_parameter -> ATOM GT parameter .)
    COPEN           reduce using rule 128 (binary_parameter -> ATOM GT parameter .)
    LIST            reduce using rule 128 (binary_parameter -> ATOM GT parameter .)
    UP              reduce using rule 128 (binary_parameter -> ATOM GT parameter .)
    NUMBER          reduce using rule 128 (binary_parameter -> ATOM GT parameter .)
    HEXNUMBER       reduce using rule 128 (binary_parameter -> ATOM GT parameter .)
    BINNUMBER       reduce using rule 128 (binary_parameter -> ATOM GT parameter .)
    OCTNUMBER       reduce using rule 128 (binary_parameter -> ATOM GT parameter .)
    STRING          reduce using rule 128 (binary_parameter -> ATOM GT parameter .)
    TRUE            reduce using rule 128 (binary_parameter -> ATOM GT parameter .)
    FALSE           reduce using rule 128 (binary_parameter -> ATOM GT parameter .)
    NULL            reduce using rule 128 (binary_parameter -> ATOM GT parameter .)
    LBRACKET        reduce using rule 128 (binary_parameter -> ATOM GT parameter .)
    LBRACE          reduce using rule 128 (binary_parameter -> ATOM GT parameter .)
    REDIRECT        reduce using rule 128 (binary_parameter -> ATOM GT parameter .)
    NEWLINE         reduce using rule 128 (binary_parameter -> ATOM GT parameter .)
    $end            reduce using rule 128 (binary_parameter -> ATOM GT parameter .)
    RBRACE          reduce using rule 128 (binary_parameter -> ATOM GT parameter .)
    PIPE            reduce using rule 128 (binary_parameter -> ATOM GT parameter .)
    RPAREN          reduce using rule 128 (binary_parameter -> ATOM GT parameter .)


state 188

    (125) binary_parameter -> ATOM ASSIGN parameter .

    error           reduce using rule 125 (binary_parameter -> ATOM ASSIGN parameter .)
    ATOM            reduce using rule 125 (binary_parameter -> ATOM ASSIGN parameter .)
    COPEN           reduce using rule 125 (binary_parameter -> ATOM ASSIGN parameter .)
    LIST            reduce using rule 125 (binary_parameter -> ATOM ASSIGN parameter .)
    UP              reduce using rule 125 (binary_parameter -> ATOM ASSIGN parameter .)
    NUMBER          reduce using rule 125 (binary_parameter -> ATOM ASSIGN parameter .)
    HEXNUMBER       reduce using rule 125 (binary_parameter -> ATOM ASSIGN parameter .)
    BINNUMBER       reduce using rule 125 (binary_parameter -> ATOM ASSIGN parameter .)
    OCTNUMBER       reduce using rule 125 (binary_parameter -> ATOM ASSIGN parameter .)
    STRING          reduce using rule 125 (binary_parameter -> ATOM ASSIGN parameter .)
    TRUE            reduce using rule 125 (binary_parameter -> ATOM ASSIGN parameter .)
    FALSE           reduce using rule 125 (binary_parameter -> ATOM ASSIGN parameter .)
    NULL            reduce using rule 125 (binary_parameter -> ATOM ASSIGN parameter .)
    LBRACKET        reduce using rule 125 (binary_parameter -> ATOM ASSIGN parameter .)
    LBRACE          reduce using rule 125 (binary_parameter -> ATOM ASSIGN parameter .)
    REDIRECT        reduce using rule 125 (binary_parameter -> ATOM ASSIGN parameter .)
    NEWLINE         reduce using rule 125 (binary_parameter -> ATOM ASSIGN parameter .)
    $end            reduce using rule 125 (binary_parameter -> ATOM ASSIGN parameter .)
    RBRACE          reduce using rule 125 (binary_parameter -> ATOM ASSIGN parameter .)
    PIPE            reduce using rule 125 (binary_parameter -> ATOM ASSIGN parameter .)
    RPAREN          reduce using rule 125 (binary_parameter -> ATOM ASSIGN parameter .)


state 189

    (131) binary_parameter -> ATOM LE parameter .

    error           reduce using rule 131 (binary_parameter -> ATOM LE parameter .)
    ATOM            reduce using rule 131 (binary_parameter -> ATOM LE parameter .)
    COPEN           reduce using rule 131 (binary_parameter -> ATOM LE parameter .)
    LIST            reduce using rule 131 (binary_parameter -> ATOM LE parameter .)
    UP              reduce using rule 131 (binary_parameter -> ATOM LE parameter .)
    NUMBER          reduce using rule 131 (binary_parameter -> ATOM LE parameter .)
    HEXNUMBER       reduce using rule 131 (binary_parameter -> ATOM LE parameter .)
    BINNUMBER       reduce using rule 131 (binary_parameter -> ATOM LE parameter .)
    OCTNUMBER       reduce using rule 131 (binary_parameter -> ATOM LE parameter .)
    STRING          reduce using rule 131 (binary_parameter -> ATOM LE parameter .)
    TRUE            reduce using rule 131 (binary_parameter -> ATOM LE parameter .)
    FALSE           reduce using rule 131 (binary_parameter -> ATOM LE parameter .)
    NULL            reduce using rule 131 (binary_parameter -> ATOM LE parameter .)
    LBRACKET        reduce using rule 131 (binary_parameter -> ATOM LE parameter .)
    LBRACE          reduce using rule 131 (binary_parameter -> ATOM LE parameter .)
    REDIRECT        reduce using rule 131 (binary_parameter -> ATOM LE parameter .)
    NEWLINE         reduce using rule 131 (binary_parameter -> ATOM LE parameter .)
    $end            reduce using rule 131 (binary_parameter -> ATOM LE parameter .)
    RBRACE          reduce using rule 131 (binary_parameter -> ATOM LE parameter .)
    PIPE            reduce using rule 131 (binary_parameter -> ATOM LE parameter .)
    RPAREN          reduce using rule 131 (binary_parameter -> ATOM LE parameter .)


state 190

    (129) binary_parameter -> ATOM GE parameter .

    error           reduce using rule 129 (binary_parameter -> ATOM GE parameter .)
    ATOM            reduce using rule 129 (binary_parameter -> ATOM GE parameter .)
    COPEN           reduce using rule 129 (binary_parameter -> ATOM GE parameter .)
    LIST            reduce using rule 129 (binary_parameter -> ATOM GE parameter .)
    UP              reduce using rule 129 (binary_parameter -> ATOM GE parameter .)
    NUMBER          reduce using rule 129 (binary_parameter -> ATOM GE parameter .)
    HEXNUMBER       reduce using rule 129 (binary_parameter -> ATOM GE parameter .)
    BINNUMBER       reduce using rule 129 (binary_parameter -> ATOM GE parameter .)
    OCTNUMBER       reduce using rule 129 (binary_parameter -> ATOM GE parameter .)
    STRING          reduce using rule 129 (binary_parameter -> ATOM GE parameter .)
    TRUE            reduce using rule 129 (binary_parameter -> ATOM GE parameter .)
    FALSE           reduce using rule 129 (binary_parameter -> ATOM GE parameter .)
    NULL            reduce using rule 129 (binary_parameter -> ATOM GE parameter .)
    LBRACKET        reduce using rule 129 (binary_parameter -> ATOM GE parameter .)
    LBRACE          reduce using rule 129 (binary_parameter -> ATOM GE parameter .)
    REDIRECT        reduce using rule 129 (binary_parameter -> ATOM GE parameter .)
    NEWLINE         reduce using rule 129 (binary_parameter -> ATOM GE parameter .)
    $end            reduce using rule 129 (binary_parameter -> ATOM GE parameter .)
    RBRACE          reduce using rule 129 (binary_parameter -> ATOM GE parameter .)
    PIPE            reduce using rule 129 (binary_parameter -> ATOM GE parameter .)
    RPAREN          reduce using rule 129 (binary_parameter -> ATOM GE parameter .)


state 191

    (130) binary_parameter -> ATOM LT parameter .

    error           reduce using rule 130 (binary_parameter -> ATOM LT parameter .)
    ATOM            reduce using rule 130 (binary_parameter -> ATOM LT parameter .)
    COPEN           reduce using rule 130 (binary_parameter -> ATOM LT parameter .)
    LIST            reduce using rule 130 (binary_parameter -> ATOM LT parameter .)
    UP              reduce using rule 130 (binary_parameter -> ATOM LT parameter .)
    NUMBER          reduce using rule 130 (binary_parameter -> ATOM LT parameter .)
    HEXNUMBER       reduce using rule 130 (binary_parameter -> ATOM LT parameter .)
    BINNUMBER       reduce using rule 130 (binary_parameter -> ATOM LT parameter .)
    OCTNUMBER       reduce using rule 130 (binary_parameter -> ATOM LT parameter .)
    STRING          reduce using rule 130 (binary_parameter -> ATOM LT parameter .)
    TRUE            reduce using rule 130 (binary_parameter -> ATOM LT parameter .)
    FALSE           reduce using rule 130 (binary_parameter -> ATOM LT parameter .)
    NULL            reduce using rule 130 (binary_parameter -> ATOM LT parameter .)
    LBRACKET        reduce using rule 130 (binary_parameter -> ATOM LT parameter .)
    LBRACE          reduce using rule 130 (binary_parameter -> ATOM LT parameter .)
    REDIRECT        reduce using rule 130 (binary_parameter -> ATOM LT parameter .)
    NEWLINE         reduce using rule 130 (binary_parameter -> ATOM LT parameter .)
    $end            reduce using rule 130 (binary_parameter -> ATOM LT parameter .)
    RBRACE          reduce using rule 130 (binary_parameter -> ATOM LT parameter .)
    PIPE            reduce using rule 130 (binary_parameter -> ATOM LT parameter .)
    RPAREN          reduce using rule 130 (binary_parameter -> ATOM LT parameter .)


state 192

    (134) binary_parameter -> ATOM DEC parameter .

    error           reduce using rule 134 (binary_parameter -> ATOM DEC parameter .)
    ATOM            reduce using rule 134 (binary_parameter -> ATOM DEC parameter .)
    COPEN           reduce using rule 134 (binary_parameter -> ATOM DEC parameter .)
    LIST            reduce using rule 134 (binary_parameter -> ATOM DEC parameter .)
    UP              reduce using rule 134 (binary_parameter -> ATOM DEC parameter .)
    NUMBER          reduce using rule 134 (binary_parameter -> ATOM DEC parameter .)
    HEXNUMBER       reduce using rule 134 (binary_parameter -> ATOM DEC parameter .)
    BINNUMBER       reduce using rule 134 (binary_parameter -> ATOM DEC parameter .)
    OCTNUMBER       reduce using rule 134 (binary_parameter -> ATOM DEC parameter .)
    STRING          reduce using rule 134 (binary_parameter -> ATOM DEC parameter .)
    TRUE            reduce using rule 134 (binary_parameter -> ATOM DEC parameter .)
    FALSE           reduce using rule 134 (binary_parameter -> ATOM DEC parameter .)
    NULL            reduce using rule 134 (binary_parameter -> ATOM DEC parameter .)
    LBRACKET        reduce using rule 134 (binary_parameter -> ATOM DEC parameter .)
    LBRACE          reduce using rule 134 (binary_parameter -> ATOM DEC parameter .)
    REDIRECT        reduce using rule 134 (binary_parameter -> ATOM DEC parameter .)
    NEWLINE         reduce using rule 134 (binary_parameter -> ATOM DEC parameter .)
    $end            reduce using rule 134 (binary_parameter -> ATOM DEC parameter .)
    RBRACE          reduce using rule 134 (binary_parameter -> ATOM DEC parameter .)
    PIPE            reduce using rule 134 (binary_parameter -> ATOM DEC parameter .)
    RPAREN          reduce using rule 134 (binary_parameter -> ATOM DEC parameter .)


state 193

    (132) binary_parameter -> ATOM REGEX parameter .

    error           reduce using rule 132 (binary_parameter -> ATOM REGEX parameter .)
    ATOM            reduce using rule 132 (binary_parameter -> ATOM REGEX parameter .)
    COPEN           reduce using rule 132 (binary_parameter -> ATOM REGEX parameter .)
    LIST            reduce using rule 132 (binary_parameter -> ATOM REGEX parameter .)
    UP              reduce using rule 132 (binary_parameter -> ATOM REGEX parameter .)
    NUMBER          reduce using rule 132 (binary_parameter -> ATOM REGEX parameter .)
    HEXNUMBER       reduce using rule 132 (binary_parameter -> ATOM REGEX parameter .)
    BINNUMBER       reduce using rule 132 (binary_parameter -> ATOM REGEX parameter .)
    OCTNUMBER       reduce using rule 132 (binary_parameter -> ATOM REGEX parameter .)
    STRING          reduce using rule 132 (binary_parameter -> ATOM REGEX parameter .)
    TRUE            reduce using rule 132 (binary_parameter -> ATOM REGEX parameter .)
    FALSE           reduce using rule 132 (binary_parameter -> ATOM REGEX parameter .)
    NULL            reduce using rule 132 (binary_parameter -> ATOM REGEX parameter .)
    LBRACKET        reduce using rule 132 (binary_parameter -> ATOM REGEX parameter .)
    LBRACE          reduce using rule 132 (binary_parameter -> ATOM REGEX parameter .)
    REDIRECT        reduce using rule 132 (binary_parameter -> ATOM REGEX parameter .)
    NEWLINE         reduce using rule 132 (binary_parameter -> ATOM REGEX parameter .)
    $end            reduce using rule 132 (binary_parameter -> ATOM REGEX parameter .)
    RBRACE          reduce using rule 132 (binary_parameter -> ATOM REGEX parameter .)
    PIPE            reduce using rule 132 (binary_parameter -> ATOM REGEX parameter .)
    RPAREN          reduce using rule 132 (binary_parameter -> ATOM REGEX parameter .)


state 194

    (117) set_parameter -> unary_parameter COMMA error .

    error           reduce using rule 117 (set_parameter -> unary_parameter COMMA error .)
    ATOM            reduce using rule 117 (set_parameter -> unary_parameter COMMA error .)
    COPEN           reduce using rule 117 (set_parameter -> unary_parameter COMMA error .)
    LIST            reduce using rule 117 (set_parameter -> unary_parameter COMMA error .)
    UP              reduce using rule 117 (set_parameter -> unary_parameter COMMA error .)
    NUMBER          reduce using rule 117 (set_parameter -> unary_parameter COMMA error .)
    HEXNUMBER       reduce using rule 117 (set_parameter -> unary_parameter COMMA error .)
    BINNUMBER       reduce using rule 117 (set_parameter -> unary_parameter COMMA error .)
    OCTNUMBER       reduce using rule 117 (set_parameter -> unary_parameter COMMA error .)
    STRING          reduce using rule 117 (set_parameter -> unary_parameter COMMA error .)
    TRUE            reduce using rule 117 (set_parameter -> unary_parameter COMMA error .)
    FALSE           reduce using rule 117 (set_parameter -> unary_parameter COMMA error .)
    NULL            reduce using rule 117 (set_parameter -> unary_parameter COMMA error .)
    LBRACKET        reduce using rule 117 (set_parameter -> unary_parameter COMMA error .)
    LBRACE          reduce using rule 117 (set_parameter -> unary_parameter COMMA error .)
    REDIRECT        reduce using rule 117 (set_parameter -> unary_parameter COMMA error .)
    NEWLINE         reduce using rule 117 (set_parameter -> unary_parameter COMMA error .)
    $end            reduce using rule 117 (set_parameter -> unary_parameter COMMA error .)
    RBRACE          reduce using rule 117 (set_parameter -> unary_parameter COMMA error .)
    PIPE            reduce using rule 117 (set_parameter -> unary_parameter COMMA error .)
    RPAREN          reduce using rule 117 (set_parameter -> unary_parameter COMMA error .)


state 195

    (116) set_parameter -> unary_parameter COMMA set_parameter .

    error           reduce using rule 116 (set_parameter -> unary_parameter COMMA set_parameter .)
    ATOM            reduce using rule 116 (set_parameter -> unary_parameter COMMA set_parameter .)
    COPEN           reduce using rule 116 (set_parameter -> unary_parameter COMMA set_parameter .)
    LIST            reduce using rule 116 (set_parameter -> unary_parameter COMMA set_parameter .)
    UP              reduce using rule 116 (set_parameter -> unary_parameter COMMA set_parameter .)
    NUMBER          reduce using rule 116 (set_parameter -> unary_parameter COMMA set_parameter .)
    HEXNUMBER       reduce using rule 116 (set_parameter -> unary_parameter COMMA set_parameter .)
    BINNUMBER       reduce using rule 116 (set_parameter -> unary_parameter COMMA set_parameter .)
    OCTNUMBER       reduce using rule 116 (set_parameter -> unary_parameter COMMA set_parameter .)
    STRING          reduce using rule 116 (set_parameter -> unary_parameter COMMA set_parameter .)
    TRUE            reduce using rule 116 (set_parameter -> unary_parameter COMMA set_parameter .)
    FALSE           reduce using rule 116 (set_parameter -> unary_parameter COMMA set_parameter .)
    NULL            reduce using rule 116 (set_parameter -> unary_parameter COMMA set_parameter .)
    LBRACKET        reduce using rule 116 (set_parameter -> unary_parameter COMMA set_parameter .)
    LBRACE          reduce using rule 116 (set_parameter -> unary_parameter COMMA set_parameter .)
    REDIRECT        reduce using rule 116 (set_parameter -> unary_parameter COMMA set_parameter .)
    NEWLINE         reduce using rule 116 (set_parameter -> unary_parameter COMMA set_parameter .)
    $end            reduce using rule 116 (set_parameter -> unary_parameter COMMA set_parameter .)
    RBRACE          reduce using rule 116 (set_parameter -> unary_parameter COMMA set_parameter .)
    PIPE            reduce using rule 116 (set_parameter -> unary_parameter COMMA set_parameter .)
    RPAREN          reduce using rule 116 (set_parameter -> unary_parameter COMMA set_parameter .)


state 196

    (122) unary_parameter -> COPEN expr RBRACE .

    COMMA           reduce using rule 122 (unary_parameter -> COPEN expr RBRACE .)
    error           reduce using rule 122 (unary_parameter -> COPEN expr RBRACE .)
    ATOM            reduce using rule 122 (unary_parameter -> COPEN expr RBRACE .)
    COPEN           reduce using rule 122 (unary_parameter -> COPEN expr RBRACE .)
    LIST            reduce using rule 122 (unary_parameter -> COPEN expr RBRACE .)
    UP              reduce using rule 122 (unary_parameter -> COPEN expr RBRACE .)
    NUMBER          reduce using rule 122 (unary_parameter -> COPEN expr RBRACE .)
    HEXNUMBER       reduce using rule 122 (unary_parameter -> COPEN expr RBRACE .)
    BINNUMBER       reduce using rule 122 (unary_parameter -> COPEN expr RBRACE .)
    OCTNUMBER       reduce using rule 122 (unary_parameter -> COPEN expr RBRACE .)
    STRING          reduce using rule 122 (unary_parameter -> COPEN expr RBRACE .)
    TRUE            reduce using rule 122 (unary_parameter -> COPEN expr RBRACE .)
    FALSE           reduce using rule 122 (unary_parameter -> COPEN expr RBRACE .)
    NULL            reduce using rule 122 (unary_parameter -> COPEN expr RBRACE .)
    LBRACKET        reduce using rule 122 (unary_parameter -> COPEN expr RBRACE .)
    LBRACE          reduce using rule 122 (unary_parameter -> COPEN expr RBRACE .)
    REDIRECT        reduce using rule 122 (unary_parameter -> COPEN expr RBRACE .)
    NEWLINE         reduce using rule 122 (unary_parameter -> COPEN expr RBRACE .)
    $end            reduce using rule 122 (unary_parameter -> COPEN expr RBRACE .)
    RBRACE          reduce using rule 122 (unary_parameter -> COPEN expr RBRACE .)
    PIPE            reduce using rule 122 (unary_parameter -> COPEN expr RBRACE .)
    RPAREN          reduce using rule 122 (unary_parameter -> COPEN expr RBRACE .)


state 197

    (103) command -> command_item parameter_list PIPE command .

    REDIRECT        reduce using rule 103 (command -> command_item parameter_list PIPE command .)
    NEWLINE         reduce using rule 103 (command -> command_item parameter_list PIPE command .)
    $end            reduce using rule 103 (command -> command_item parameter_list PIPE command .)
    RBRACE          reduce using rule 103 (command -> command_item parameter_list PIPE command .)
    RPAREN          reduce using rule 103 (command -> command_item parameter_list PIPE command .)


state 198

    (77) subscript_left -> symbol LBRACKET expr RBRACKET .

    ASSIGN          reduce using rule 77 (subscript_left -> symbol LBRACKET expr RBRACKET .)
    LBRACKET        reduce using rule 77 (subscript_left -> symbol LBRACKET expr RBRACKET .)


state 199

    (31) function_definition_stmt -> FUNCTION ATOM LPAREN function_argument_list . RPAREN block
    (33) function_definition_stmt -> FUNCTION ATOM LPAREN function_argument_list . RPAREN NEWLINE block

    RPAREN          shift and go to state 216


state 200

    (30) function_definition_stmt -> FUNCTION ATOM LPAREN RPAREN . block
    (32) function_definition_stmt -> FUNCTION ATOM LPAREN RPAREN . NEWLINE block
    (19) block -> . LBRACE stmt_list RBRACE
    (20) block -> . LBRACE NEWLINE stmt_list RBRACE
    (21) block -> . LBRACE NEWLINE RBRACE
    (22) block -> . LBRACE RBRACE

    NEWLINE         shift and go to state 217
    LBRACE          shift and go to state 214

    block                          shift and go to state 218

state 201

    (25) for_stmt -> FOR LPAREN ATOM IN . expr RPAREN block
    (42) expr -> . symbol
    (43) expr -> . literal
    (44) expr -> . array_literal
    (45) expr -> . dict_literal
    (46) expr -> . unary_expr
    (47) expr -> . binary_expr
    (48) expr -> . call
    (49) expr -> . subscript_expr
    (50) expr -> . anon_function_expr
    (51) expr -> . expr_expansion
    (52) expr -> . LPAREN expr RPAREN
    (53) expr -> . COPEN expr RBRACE
    (73) symbol -> . ATOM
    (65) literal -> . NUMBER
    (66) literal -> . HEXNUMBER
    (67) literal -> . BINNUMBER
    (68) literal -> . OCTNUMBER
    (69) literal -> . STRING
    (70) literal -> . TRUE
    (71) literal -> . FALSE
    (72) literal -> . NULL
    (55) array_literal -> . LBRACKET RBRACKET
    (56) array_literal -> . LBRACKET expr_list RBRACKET
    (57) dict_literal -> . LBRACE RBRACE
    (58) dict_literal -> . LBRACE NEWLINE RBRACE
    (59) dict_literal -> . LBRACE dict_pair_list RBRACE
    (83) unary_expr -> . MINUS expr
    (84) unary_expr -> . NOT expr
    (85) binary_expr -> . expr EQ expr
    (86) binary_expr -> . expr NE expr
    (87) binary_expr -> . expr GT expr
    (88) binary_expr -> . expr GE expr
    (89) binary_expr -> . expr LT expr
    (90) binary_expr -> . expr LE expr
    (91) binary_expr -> . expr PLUS expr
    (92) binary_expr -> . expr MINUS expr
    (93) binary_expr -> . expr MUL expr
    (94) binary_expr -> . expr DIV expr
    (95) binary_expr -> . expr REGEX expr
    (96) binary_expr -> . expr AND expr
    (97) binary_expr -> . expr OR expr
    (98) binary_expr -> . expr NOT expr
    (99) binary_expr -> . expr MOD expr
    (74) call -> . ATOM LPAREN RPAREN
    (75) call -> . ATOM LPAREN expr_list RPAREN
    (78) subscript_expr -> . expr LBRACKET expr RBRACKET
    (79) anon_function_expr -> . FUNCTION LPAREN RPAREN block
    (80) anon_function_expr -> . FUNCTION LPAREN RPAREN NEWLINE block
    (81) anon_function_expr -> . FUNCTION LPAREN function_argument_list RPAREN block
    (82) anon_function_expr -> . FUNCTION LPAREN function_argument_list RPAREN NEWLINE block
    (54) expr_expansion -> . EOPEN command RPAREN

    LPAREN          shift and go to state 35
    COPEN           shift and go to state 60
    ATOM            shift and go to state 38
    NUMBER          shift and go to state 43
    HEXNUMBER       shift and go to state 57
    BINNUMBER       shift and go to state 58
    OCTNUMBER       shift and go to state 54
    STRING          shift and go to state 44
    TRUE            shift and go to state 46
    FALSE           shift and go to state 51
    NULL            shift and go to state 56
    LBRACKET        shift and go to state 52
    LBRACE          shift and go to state 47
    MINUS           shift and go to state 40
    NOT             shift and go to state 45
    FUNCTION        shift and go to state 53
    EOPEN           shift and go to state 55

    expr_expansion                 shift and go to state 39
    unary_expr                     shift and go to state 42
    literal                        shift and go to state 34
    expr                           shift and go to state 219
    array_literal                  shift and go to state 49
    subscript_expr                 shift and go to state 59
    symbol                         shift and go to state 50
    anon_function_expr             shift and go to state 41
    binary_expr                    shift and go to state 33
    call                           shift and go to state 36
    dict_literal                   shift and go to state 37

state 202

    (26) for_stmt -> FOR LPAREN ATOM COMMA . ATOM IN expr RPAREN block

    ATOM            shift and go to state 220


state 203

    (27) while_stmt -> WHILE LPAREN expr RPAREN . block
    (19) block -> . LBRACE stmt_list RBRACE
    (20) block -> . LBRACE NEWLINE stmt_list RBRACE
    (21) block -> . LBRACE NEWLINE RBRACE
    (22) block -> . LBRACE RBRACE

    LBRACE          shift and go to state 214

    block                          shift and go to state 221

state 204

    (62) dict_pair -> expr COLON expr .
    (85) binary_expr -> expr . EQ expr
    (86) binary_expr -> expr . NE expr
    (87) binary_expr -> expr . GT expr
    (88) binary_expr -> expr . GE expr
    (89) binary_expr -> expr . LT expr
    (90) binary_expr -> expr . LE expr
    (91) binary_expr -> expr . PLUS expr
    (92) binary_expr -> expr . MINUS expr
    (93) binary_expr -> expr . MUL expr
    (94) binary_expr -> expr . DIV expr
    (95) binary_expr -> expr . REGEX expr
    (96) binary_expr -> expr . AND expr
    (97) binary_expr -> expr . OR expr
    (98) binary_expr -> expr . NOT expr
    (99) binary_expr -> expr . MOD expr
    (78) subscript_expr -> expr . LBRACKET expr RBRACKET

    COMMA           reduce using rule 62 (dict_pair -> expr COLON expr .)
    RBRACE          reduce using rule 62 (dict_pair -> expr COLON expr .)
    EQ              shift and go to state 99
    NE              shift and go to state 100
    GT              shift and go to state 103
    GE              shift and go to state 108
    LT              shift and go to state 109
    LE              shift and go to state 105
    PLUS            shift and go to state 114
    MINUS           shift and go to state 106
    MUL             shift and go to state 101
    DIV             shift and go to state 102
    REGEX           shift and go to state 113
    AND             shift and go to state 111
    OR              shift and go to state 107
    NOT             shift and go to state 104
    MOD             shift and go to state 112
    LBRACKET        shift and go to state 110


state 205

    (63) dict_pair -> NEWLINE expr COLON . expr
    (64) dict_pair -> NEWLINE expr COLON . expr NEWLINE
    (42) expr -> . symbol
    (43) expr -> . literal
    (44) expr -> . array_literal
    (45) expr -> . dict_literal
    (46) expr -> . unary_expr
    (47) expr -> . binary_expr
    (48) expr -> . call
    (49) expr -> . subscript_expr
    (50) expr -> . anon_function_expr
    (51) expr -> . expr_expansion
    (52) expr -> . LPAREN expr RPAREN
    (53) expr -> . COPEN expr RBRACE
    (73) symbol -> . ATOM
    (65) literal -> . NUMBER
    (66) literal -> . HEXNUMBER
    (67) literal -> . BINNUMBER
    (68) literal -> . OCTNUMBER
    (69) literal -> . STRING
    (70) literal -> . TRUE
    (71) literal -> . FALSE
    (72) literal -> . NULL
    (55) array_literal -> . LBRACKET RBRACKET
    (56) array_literal -> . LBRACKET expr_list RBRACKET
    (57) dict_literal -> . LBRACE RBRACE
    (58) dict_literal -> . LBRACE NEWLINE RBRACE
    (59) dict_literal -> . LBRACE dict_pair_list RBRACE
    (83) unary_expr -> . MINUS expr
    (84) unary_expr -> . NOT expr
    (85) binary_expr -> . expr EQ expr
    (86) binary_expr -> . expr NE expr
    (87) binary_expr -> . expr GT expr
    (88) binary_expr -> . expr GE expr
    (89) binary_expr -> . expr LT expr
    (90) binary_expr -> . expr LE expr
    (91) binary_expr -> . expr PLUS expr
    (92) binary_expr -> . expr MINUS expr
    (93) binary_expr -> . expr MUL expr
    (94) binary_expr -> . expr DIV expr
    (95) binary_expr -> . expr REGEX expr
    (96) binary_expr -> . expr AND expr
    (97) binary_expr -> . expr OR expr
    (98) binary_expr -> . expr NOT expr
    (99) binary_expr -> . expr MOD expr
    (74) call -> . ATOM LPAREN RPAREN
    (75) call -> . ATOM LPAREN expr_list RPAREN
    (78) subscript_expr -> . expr LBRACKET expr RBRACKET
    (79) anon_function_expr -> . FUNCTION LPAREN RPAREN block
    (80) anon_function_expr -> . FUNCTION LPAREN RPAREN NEWLINE block
    (81) anon_function_expr -> . FUNCTION LPAREN function_argument_list RPAREN block
    (82) anon_function_expr -> . FUNCTION LPAREN function_argument_list RPAREN NEWLINE block
    (54) expr_expansion -> . EOPEN command RPAREN

    LPAREN          shift and go to state 35
    COPEN           shift and go to state 60
    ATOM            shift and go to state 38
    NUMBER          shift and go to state 43
    HEXNUMBER       shift and go to state 57
    BINNUMBER       shift and go to state 58
    OCTNUMBER       shift and go to state 54
    STRING          shift and go to state 44
    TRUE            shift and go to state 46
    FALSE           shift and go to state 51
    NULL            shift and go to state 56
    LBRACKET        shift and go to state 52
    LBRACE          shift and go to state 47
    MINUS           shift and go to state 40
    NOT             shift and go to state 45
    FUNCTION        shift and go to state 53
    EOPEN           shift and go to state 55

    binary_expr                    shift and go to state 33
    expr_expansion                 shift and go to state 39
    literal                        shift and go to state 34
    expr                           shift and go to state 222
    array_literal                  shift and go to state 49
    subscript_expr                 shift and go to state 59
    symbol                         shift and go to state 50
    anon_function_expr             shift and go to state 41
    call                           shift and go to state 36
    dict_literal                   shift and go to state 37
    unary_expr                     shift and go to state 42

state 206

    (61) dict_pair_list -> dict_pair COMMA dict_pair_list .

    RBRACE          reduce using rule 61 (dict_pair_list -> dict_pair COMMA dict_pair_list .)


state 207

    (63) dict_pair -> NEWLINE . expr COLON expr
    (64) dict_pair -> NEWLINE . expr COLON expr NEWLINE
    (42) expr -> . symbol
    (43) expr -> . literal
    (44) expr -> . array_literal
    (45) expr -> . dict_literal
    (46) expr -> . unary_expr
    (47) expr -> . binary_expr
    (48) expr -> . call
    (49) expr -> . subscript_expr
    (50) expr -> . anon_function_expr
    (51) expr -> . expr_expansion
    (52) expr -> . LPAREN expr RPAREN
    (53) expr -> . COPEN expr RBRACE
    (73) symbol -> . ATOM
    (65) literal -> . NUMBER
    (66) literal -> . HEXNUMBER
    (67) literal -> . BINNUMBER
    (68) literal -> . OCTNUMBER
    (69) literal -> . STRING
    (70) literal -> . TRUE
    (71) literal -> . FALSE
    (72) literal -> . NULL
    (55) array_literal -> . LBRACKET RBRACKET
    (56) array_literal -> . LBRACKET expr_list RBRACKET
    (57) dict_literal -> . LBRACE RBRACE
    (58) dict_literal -> . LBRACE NEWLINE RBRACE
    (59) dict_literal -> . LBRACE dict_pair_list RBRACE
    (83) unary_expr -> . MINUS expr
    (84) unary_expr -> . NOT expr
    (85) binary_expr -> . expr EQ expr
    (86) binary_expr -> . expr NE expr
    (87) binary_expr -> . expr GT expr
    (88) binary_expr -> . expr GE expr
    (89) binary_expr -> . expr LT expr
    (90) binary_expr -> . expr LE expr
    (91) binary_expr -> . expr PLUS expr
    (92) binary_expr -> . expr MINUS expr
    (93) binary_expr -> . expr MUL expr
    (94) binary_expr -> . expr DIV expr
    (95) binary_expr -> . expr REGEX expr
    (96) binary_expr -> . expr AND expr
    (97) binary_expr -> . expr OR expr
    (98) binary_expr -> . expr NOT expr
    (99) binary_expr -> . expr MOD expr
    (74) call -> . ATOM LPAREN RPAREN
    (75) call -> . ATOM LPAREN expr_list RPAREN
    (78) subscript_expr -> . expr LBRACKET expr RBRACKET
    (79) anon_function_expr -> . FUNCTION LPAREN RPAREN block
    (80) anon_function_expr -> . FUNCTION LPAREN RPAREN NEWLINE block
    (81) anon_function_expr -> . FUNCTION LPAREN function_argument_list RPAREN block
    (82) anon_function_expr -> . FUNCTION LPAREN function_argument_list RPAREN NEWLINE block
    (54) expr_expansion -> . EOPEN command RPAREN

    LPAREN          shift and go to state 35
    COPEN           shift and go to state 60
    ATOM            shift and go to state 38
    NUMBER          shift and go to state 43
    HEXNUMBER       shift and go to state 57
    BINNUMBER       shift and go to state 58
    OCTNUMBER       shift and go to state 54
    STRING          shift and go to state 44
    TRUE            shift and go to state 46
    FALSE           shift and go to state 51
    NULL            shift and go to state 56
    LBRACKET        shift and go to state 52
    LBRACE          shift and go to state 47
    MINUS           shift and go to state 40
    NOT             shift and go to state 45
    FUNCTION        shift and go to state 53
    EOPEN           shift and go to state 55

    binary_expr                    shift and go to state 33
    expr_expansion                 shift and go to state 39
    literal                        shift and go to state 34
    expr                           shift and go to state 156
    array_literal                  shift and go to state 49
    subscript_expr                 shift and go to state 59
    symbol                         shift and go to state 50
    anon_function_expr             shift and go to state 41
    call                           shift and go to state 36
    dict_literal                   shift and go to state 37
    unary_expr                     shift and go to state 42

state 208

    (78) subscript_expr -> expr LBRACKET expr RBRACKET .

    EQ              reduce using rule 78 (subscript_expr -> expr LBRACKET expr RBRACKET .)
    NE              reduce using rule 78 (subscript_expr -> expr LBRACKET expr RBRACKET .)
    GT              reduce using rule 78 (subscript_expr -> expr LBRACKET expr RBRACKET .)
    GE              reduce using rule 78 (subscript_expr -> expr LBRACKET expr RBRACKET .)
    LT              reduce using rule 78 (subscript_expr -> expr LBRACKET expr RBRACKET .)
    LE              reduce using rule 78 (subscript_expr -> expr LBRACKET expr RBRACKET .)
    PLUS            reduce using rule 78 (subscript_expr -> expr LBRACKET expr RBRACKET .)
    MINUS           reduce using rule 78 (subscript_expr -> expr LBRACKET expr RBRACKET .)
    MUL             reduce using rule 78 (subscript_expr -> expr LBRACKET expr RBRACKET .)
    DIV             reduce using rule 78 (subscript_expr -> expr LBRACKET expr RBRACKET .)
    REGEX           reduce using rule 78 (subscript_expr -> expr LBRACKET expr RBRACKET .)
    AND             reduce using rule 78 (subscript_expr -> expr LBRACKET expr RBRACKET .)
    OR              reduce using rule 78 (subscript_expr -> expr LBRACKET expr RBRACKET .)
    NOT             reduce using rule 78 (subscript_expr -> expr LBRACKET expr RBRACKET .)
    MOD             reduce using rule 78 (subscript_expr -> expr LBRACKET expr RBRACKET .)
    LBRACKET        reduce using rule 78 (subscript_expr -> expr LBRACKET expr RBRACKET .)
    REDIRECT        reduce using rule 78 (subscript_expr -> expr LBRACKET expr RBRACKET .)
    NEWLINE         reduce using rule 78 (subscript_expr -> expr LBRACKET expr RBRACKET .)
    $end            reduce using rule 78 (subscript_expr -> expr LBRACKET expr RBRACKET .)
    RBRACE          reduce using rule 78 (subscript_expr -> expr LBRACKET expr RBRACKET .)
    RPAREN          reduce using rule 78 (subscript_expr -> expr LBRACKET expr RBRACKET .)
    COLON           reduce using rule 78 (subscript_expr -> expr LBRACKET expr RBRACKET .)
    COMMA           reduce using rule 78 (subscript_expr -> expr LBRACKET expr RBRACKET .)
    RBRACKET        reduce using rule 78 (subscript_expr -> expr LBRACKET expr RBRACKET .)


state 209

    (41) expr_list -> expr COMMA expr_list .

    RBRACKET        reduce using rule 41 (expr_list -> expr COMMA expr_list .)
    RPAREN          reduce using rule 41 (expr_list -> expr COMMA expr_list .)


state 210

    (81) anon_function_expr -> FUNCTION LPAREN function_argument_list RPAREN . block
    (82) anon_function_expr -> FUNCTION LPAREN function_argument_list RPAREN . NEWLINE block
    (19) block -> . LBRACE stmt_list RBRACE
    (20) block -> . LBRACE NEWLINE stmt_list RBRACE
    (21) block -> . LBRACE NEWLINE RBRACE
    (22) block -> . LBRACE RBRACE

    NEWLINE         shift and go to state 224
    LBRACE          shift and go to state 214

    block                          shift and go to state 223

state 211

    (35) function_argument_list -> ATOM COMMA . function_argument_list
    (34) function_argument_list -> . ATOM
    (35) function_argument_list -> . ATOM COMMA function_argument_list

    ATOM            shift and go to state 177

    function_argument_list         shift and go to state 225

state 212

    (79) anon_function_expr -> FUNCTION LPAREN RPAREN block .

    EQ              reduce using rule 79 (anon_function_expr -> FUNCTION LPAREN RPAREN block .)
    NE              reduce using rule 79 (anon_function_expr -> FUNCTION LPAREN RPAREN block .)
    GT              reduce using rule 79 (anon_function_expr -> FUNCTION LPAREN RPAREN block .)
    GE              reduce using rule 79 (anon_function_expr -> FUNCTION LPAREN RPAREN block .)
    LT              reduce using rule 79 (anon_function_expr -> FUNCTION LPAREN RPAREN block .)
    LE              reduce using rule 79 (anon_function_expr -> FUNCTION LPAREN RPAREN block .)
    PLUS            reduce using rule 79 (anon_function_expr -> FUNCTION LPAREN RPAREN block .)
    MINUS           reduce using rule 79 (anon_function_expr -> FUNCTION LPAREN RPAREN block .)
    MUL             reduce using rule 79 (anon_function_expr -> FUNCTION LPAREN RPAREN block .)
    DIV             reduce using rule 79 (anon_function_expr -> FUNCTION LPAREN RPAREN block .)
    REGEX           reduce using rule 79 (anon_function_expr -> FUNCTION LPAREN RPAREN block .)
    AND             reduce using rule 79 (anon_function_expr -> FUNCTION LPAREN RPAREN block .)
    OR              reduce using rule 79 (anon_function_expr -> FUNCTION LPAREN RPAREN block .)
    NOT             reduce using rule 79 (anon_function_expr -> FUNCTION LPAREN RPAREN block .)
    MOD             reduce using rule 79 (anon_function_expr -> FUNCTION LPAREN RPAREN block .)
    LBRACKET        reduce using rule 79 (anon_function_expr -> FUNCTION LPAREN RPAREN block .)
    REDIRECT        reduce using rule 79 (anon_function_expr -> FUNCTION LPAREN RPAREN block .)
    NEWLINE         reduce using rule 79 (anon_function_expr -> FUNCTION LPAREN RPAREN block .)
    $end            reduce using rule 79 (anon_function_expr -> FUNCTION LPAREN RPAREN block .)
    RBRACE          reduce using rule 79 (anon_function_expr -> FUNCTION LPAREN RPAREN block .)
    RPAREN          reduce using rule 79 (anon_function_expr -> FUNCTION LPAREN RPAREN block .)
    COLON           reduce using rule 79 (anon_function_expr -> FUNCTION LPAREN RPAREN block .)
    COMMA           reduce using rule 79 (anon_function_expr -> FUNCTION LPAREN RPAREN block .)
    RBRACKET        reduce using rule 79 (anon_function_expr -> FUNCTION LPAREN RPAREN block .)


state 213

    (80) anon_function_expr -> FUNCTION LPAREN RPAREN NEWLINE . block
    (19) block -> . LBRACE stmt_list RBRACE
    (20) block -> . LBRACE NEWLINE stmt_list RBRACE
    (21) block -> . LBRACE NEWLINE RBRACE
    (22) block -> . LBRACE RBRACE

    LBRACE          shift and go to state 214

    block                          shift and go to state 226

state 214

    (19) block -> LBRACE . stmt_list RBRACE
    (20) block -> LBRACE . NEWLINE stmt_list RBRACE
    (21) block -> LBRACE . NEWLINE RBRACE
    (22) block -> LBRACE . RBRACE
    (1) stmt_list -> . stmt_redirect
    (2) stmt_list -> . stmt_redirect NEWLINE
    (3) stmt_list -> . stmt_redirect NEWLINE stmt_list
    (4) stmt_list -> . NEWLINE stmt_list
    (5) stmt_redirect -> . stmt
    (6) stmt_redirect -> . stmt REDIRECT ATOM
    (7) stmt_redirect -> . stmt REDIRECT STRING
    (8) stmt -> . if_stmt
    (9) stmt -> . for_stmt
    (10) stmt -> . while_stmt
    (11) stmt -> . assignment_stmt
    (12) stmt -> . function_definition_stmt
    (13) stmt -> . return_stmt
    (14) stmt -> . break_stmt
    (15) stmt -> . undef_stmt
    (16) stmt -> . command
    (17) stmt -> . call
    (18) stmt -> . shell
    (23) if_stmt -> . IF LPAREN expr RPAREN block
    (24) if_stmt -> . IF LPAREN expr RPAREN block ELSE block
    (25) for_stmt -> . FOR LPAREN ATOM IN expr RPAREN block
    (26) for_stmt -> . FOR LPAREN ATOM COMMA ATOM IN expr RPAREN block
    (27) while_stmt -> . WHILE LPAREN expr RPAREN block
    (28) assignment_stmt -> . ATOM ASSIGN expr
    (29) assignment_stmt -> . subscript_left ASSIGN expr
    (30) function_definition_stmt -> . FUNCTION ATOM LPAREN RPAREN block
    (31) function_definition_stmt -> . FUNCTION ATOM LPAREN function_argument_list RPAREN block
    (32) function_definition_stmt -> . FUNCTION ATOM LPAREN RPAREN NEWLINE block
    (33) function_definition_stmt -> . FUNCTION ATOM LPAREN function_argument_list RPAREN NEWLINE block
    (36) return_stmt -> . RETURN
    (37) return_stmt -> . RETURN expr
    (38) break_stmt -> . BREAK
    (39) undef_stmt -> . UNDEF ATOM
    (100) command -> . command_item
    (101) command -> . command_item parameter_list
    (102) command -> . command_item PIPE command
    (103) command -> . command_item parameter_list PIPE command
    (74) call -> . ATOM LPAREN RPAREN
    (75) call -> . ATOM LPAREN expr_list RPAREN
    (135) shell -> . SHELL
    (136) shell -> . SHELL parameter_list
    (76) subscript_left -> . subscript_left LBRACKET expr RBRACKET
    (77) subscript_left -> . symbol LBRACKET expr RBRACKET
    (104) command_item -> . LIST
    (105) command_item -> . NUMBER
    (106) command_item -> . UP
    (107) command_item -> . symbol
    (108) command_item -> . COPEN expr RBRACE
    (109) command_item -> . STRING
    (73) symbol -> . ATOM

    NEWLINE         shift and go to state 229
    RBRACE          shift and go to state 227
    IF              shift and go to state 13
    FOR             shift and go to state 28
    WHILE           shift and go to state 30
    ATOM            shift and go to state 11
    FUNCTION        shift and go to state 27
    RETURN          shift and go to state 3
    BREAK           shift and go to state 32
    UNDEF           shift and go to state 16
    SHELL           shift and go to state 15
    LIST            shift and go to state 8
    NUMBER          shift and go to state 26
    UP              shift and go to state 7
    COPEN           shift and go to state 31
    STRING          shift and go to state 19

    command_item                   shift and go to state 18
    shell                          shift and go to state 1
    for_stmt                       shift and go to state 2
    break_stmt                     shift and go to state 4
    if_stmt                        shift and go to state 20
    command                        shift and go to state 21
    stmt_redirect                  shift and go to state 6
    undef_stmt                     shift and go to state 5
    stmt                           shift and go to state 23
    symbol                         shift and go to state 24
    call                           shift and go to state 9
    subscript_left                 shift and go to state 10
    stmt_list                      shift and go to state 228
    while_stmt                     shift and go to state 12
    assignment_stmt                shift and go to state 29
    return_stmt                    shift and go to state 14
    function_definition_stmt       shift and go to state 17

state 215

    (23) if_stmt -> IF LPAREN expr RPAREN block .
    (24) if_stmt -> IF LPAREN expr RPAREN block . ELSE block

    REDIRECT        reduce using rule 23 (if_stmt -> IF LPAREN expr RPAREN block .)
    NEWLINE         reduce using rule 23 (if_stmt -> IF LPAREN expr RPAREN block .)
    RBRACE          reduce using rule 23 (if_stmt -> IF LPAREN expr RPAREN block .)
    $end            reduce using rule 23 (if_stmt -> IF LPAREN expr RPAREN block .)
    ELSE            shift and go to state 230


state 216

    (31) function_definition_stmt -> FUNCTION ATOM LPAREN function_argument_list RPAREN . block
    (33) function_definition_stmt -> FUNCTION ATOM LPAREN function_argument_list RPAREN . NEWLINE block
    (19) block -> . LBRACE stmt_list RBRACE
    (20) block -> . LBRACE NEWLINE stmt_list RBRACE
    (21) block -> . LBRACE NEWLINE RBRACE
    (22) block -> . LBRACE RBRACE

    NEWLINE         shift and go to state 232
    LBRACE          shift and go to state 214

    block                          shift and go to state 231

state 217

    (32) function_definition_stmt -> FUNCTION ATOM LPAREN RPAREN NEWLINE . block
    (19) block -> . LBRACE stmt_list RBRACE
    (20) block -> . LBRACE NEWLINE stmt_list RBRACE
    (21) block -> . LBRACE NEWLINE RBRACE
    (22) block -> . LBRACE RBRACE

    LBRACE          shift and go to state 214

    block                          shift and go to state 233

state 218

    (30) function_definition_stmt -> FUNCTION ATOM LPAREN RPAREN block .

    REDIRECT        reduce using rule 30 (function_definition_stmt -> FUNCTION ATOM LPAREN RPAREN block .)
    NEWLINE         reduce using rule 30 (function_definition_stmt -> FUNCTION ATOM LPAREN RPAREN block .)
    $end            reduce using rule 30 (function_definition_stmt -> FUNCTION ATOM LPAREN RPAREN block .)
    RBRACE          reduce using rule 30 (function_definition_stmt -> FUNCTION ATOM LPAREN RPAREN block .)


state 219

    (25) for_stmt -> FOR LPAREN ATOM IN expr . RPAREN block
    (85) binary_expr -> expr . EQ expr
    (86) binary_expr -> expr . NE expr
    (87) binary_expr -> expr . GT expr
    (88) binary_expr -> expr . GE expr
    (89) binary_expr -> expr . LT expr
    (90) binary_expr -> expr . LE expr
    (91) binary_expr -> expr . PLUS expr
    (92) binary_expr -> expr . MINUS expr
    (93) binary_expr -> expr . MUL expr
    (94) binary_expr -> expr . DIV expr
    (95) binary_expr -> expr . REGEX expr
    (96) binary_expr -> expr . AND expr
    (97) binary_expr -> expr . OR expr
    (98) binary_expr -> expr . NOT expr
    (99) binary_expr -> expr . MOD expr
    (78) subscript_expr -> expr . LBRACKET expr RBRACKET

    RPAREN          shift and go to state 234
    EQ              shift and go to state 99
    NE              shift and go to state 100
    GT              shift and go to state 103
    GE              shift and go to state 108
    LT              shift and go to state 109
    LE              shift and go to state 105
    PLUS            shift and go to state 114
    MINUS           shift and go to state 106
    MUL             shift and go to state 101
    DIV             shift and go to state 102
    REGEX           shift and go to state 113
    AND             shift and go to state 111
    OR              shift and go to state 107
    NOT             shift and go to state 104
    MOD             shift and go to state 112
    LBRACKET        shift and go to state 110


state 220

    (26) for_stmt -> FOR LPAREN ATOM COMMA ATOM . IN expr RPAREN block

    IN              shift and go to state 235


state 221

    (27) while_stmt -> WHILE LPAREN expr RPAREN block .

    REDIRECT        reduce using rule 27 (while_stmt -> WHILE LPAREN expr RPAREN block .)
    NEWLINE         reduce using rule 27 (while_stmt -> WHILE LPAREN expr RPAREN block .)
    RBRACE          reduce using rule 27 (while_stmt -> WHILE LPAREN expr RPAREN block .)
    $end            reduce using rule 27 (while_stmt -> WHILE LPAREN expr RPAREN block .)


state 222

    (63) dict_pair -> NEWLINE expr COLON expr .
    (64) dict_pair -> NEWLINE expr COLON expr . NEWLINE
    (85) binary_expr -> expr . EQ expr
    (86) binary_expr -> expr . NE expr
    (87) binary_expr -> expr . GT expr
    (88) binary_expr -> expr . GE expr
    (89) binary_expr -> expr . LT expr
    (90) binary_expr -> expr . LE expr
    (91) binary_expr -> expr . PLUS expr
    (92) binary_expr -> expr . MINUS expr
    (93) binary_expr -> expr . MUL expr
    (94) binary_expr -> expr . DIV expr
    (95) binary_expr -> expr . REGEX expr
    (96) binary_expr -> expr . AND expr
    (97) binary_expr -> expr . OR expr
    (98) binary_expr -> expr . NOT expr
    (99) binary_expr -> expr . MOD expr
    (78) subscript_expr -> expr . LBRACKET expr RBRACKET

    COMMA           reduce using rule 63 (dict_pair -> NEWLINE expr COLON expr .)
    RBRACE          reduce using rule 63 (dict_pair -> NEWLINE expr COLON expr .)
    NEWLINE         shift and go to state 236
    EQ              shift and go to state 99
    NE              shift and go to state 100
    GT              shift and go to state 103
    GE              shift and go to state 108
    LT              shift and go to state 109
    LE              shift and go to state 105
    PLUS            shift and go to state 114
    MINUS           shift and go to state 106
    MUL             shift and go to state 101
    DIV             shift and go to state 102
    REGEX           shift and go to state 113
    AND             shift and go to state 111
    OR              shift and go to state 107
    NOT             shift and go to state 104
    MOD             shift and go to state 112
    LBRACKET        shift and go to state 110


state 223

    (81) anon_function_expr -> FUNCTION LPAREN function_argument_list RPAREN block .

    EQ              reduce using rule 81 (anon_function_expr -> FUNCTION LPAREN function_argument_list RPAREN block .)
    NE              reduce using rule 81 (anon_function_expr -> FUNCTION LPAREN function_argument_list RPAREN block .)
    GT              reduce using rule 81 (anon_function_expr -> FUNCTION LPAREN function_argument_list RPAREN block .)
    GE              reduce using rule 81 (anon_function_expr -> FUNCTION LPAREN function_argument_list RPAREN block .)
    LT              reduce using rule 81 (anon_function_expr -> FUNCTION LPAREN function_argument_list RPAREN block .)
    LE              reduce using rule 81 (anon_function_expr -> FUNCTION LPAREN function_argument_list RPAREN block .)
    PLUS            reduce using rule 81 (anon_function_expr -> FUNCTION LPAREN function_argument_list RPAREN block .)
    MINUS           reduce using rule 81 (anon_function_expr -> FUNCTION LPAREN function_argument_list RPAREN block .)
    MUL             reduce using rule 81 (anon_function_expr -> FUNCTION LPAREN function_argument_list RPAREN block .)
    DIV             reduce using rule 81 (anon_function_expr -> FUNCTION LPAREN function_argument_list RPAREN block .)
    REGEX           reduce using rule 81 (anon_function_expr -> FUNCTION LPAREN function_argument_list RPAREN block .)
    AND             reduce using rule 81 (anon_function_expr -> FUNCTION LPAREN function_argument_list RPAREN block .)
    OR              reduce using rule 81 (anon_function_expr -> FUNCTION LPAREN function_argument_list RPAREN block .)
    NOT             reduce using rule 81 (anon_function_expr -> FUNCTION LPAREN function_argument_list RPAREN block .)
    MOD             reduce using rule 81 (anon_function_expr -> FUNCTION LPAREN function_argument_list RPAREN block .)
    LBRACKET        reduce using rule 81 (anon_function_expr -> FUNCTION LPAREN function_argument_list RPAREN block .)
    REDIRECT        reduce using rule 81 (anon_function_expr -> FUNCTION LPAREN function_argument_list RPAREN block .)
    NEWLINE         reduce using rule 81 (anon_function_expr -> FUNCTION LPAREN function_argument_list RPAREN block .)
    $end            reduce using rule 81 (anon_function_expr -> FUNCTION LPAREN function_argument_list RPAREN block .)
    RBRACE          reduce using rule 81 (anon_function_expr -> FUNCTION LPAREN function_argument_list RPAREN block .)
    RPAREN          reduce using rule 81 (anon_function_expr -> FUNCTION LPAREN function_argument_list RPAREN block .)
    COLON           reduce using rule 81 (anon_function_expr -> FUNCTION LPAREN function_argument_list RPAREN block .)
    COMMA           reduce using rule 81 (anon_function_expr -> FUNCTION LPAREN function_argument_list RPAREN block .)
    RBRACKET        reduce using rule 81 (anon_function_expr -> FUNCTION LPAREN function_argument_list RPAREN block .)


state 224

    (82) anon_function_expr -> FUNCTION LPAREN function_argument_list RPAREN NEWLINE . block
    (19) block -> . LBRACE stmt_list RBRACE
    (20) block -> . LBRACE NEWLINE stmt_list RBRACE
    (21) block -> . LBRACE NEWLINE RBRACE
    (22) block -> . LBRACE RBRACE

    LBRACE          shift and go to state 214

    block                          shift and go to state 237

state 225

    (35) function_argument_list -> ATOM COMMA function_argument_list .

    RPAREN          reduce using rule 35 (function_argument_list -> ATOM COMMA function_argument_list .)


state 226

    (80) anon_function_expr -> FUNCTION LPAREN RPAREN NEWLINE block .

    EQ              reduce using rule 80 (anon_function_expr -> FUNCTION LPAREN RPAREN NEWLINE block .)
    NE              reduce using rule 80 (anon_function_expr -> FUNCTION LPAREN RPAREN NEWLINE block .)
    GT              reduce using rule 80 (anon_function_expr -> FUNCTION LPAREN RPAREN NEWLINE block .)
    GE              reduce using rule 80 (anon_function_expr -> FUNCTION LPAREN RPAREN NEWLINE block .)
    LT              reduce using rule 80 (anon_function_expr -> FUNCTION LPAREN RPAREN NEWLINE block .)
    LE              reduce using rule 80 (anon_function_expr -> FUNCTION LPAREN RPAREN NEWLINE block .)
    PLUS            reduce using rule 80 (anon_function_expr -> FUNCTION LPAREN RPAREN NEWLINE block .)
    MINUS           reduce using rule 80 (anon_function_expr -> FUNCTION LPAREN RPAREN NEWLINE block .)
    MUL             reduce using rule 80 (anon_function_expr -> FUNCTION LPAREN RPAREN NEWLINE block .)
    DIV             reduce using rule 80 (anon_function_expr -> FUNCTION LPAREN RPAREN NEWLINE block .)
    REGEX           reduce using rule 80 (anon_function_expr -> FUNCTION LPAREN RPAREN NEWLINE block .)
    AND             reduce using rule 80 (anon_function_expr -> FUNCTION LPAREN RPAREN NEWLINE block .)
    OR              reduce using rule 80 (anon_function_expr -> FUNCTION LPAREN RPAREN NEWLINE block .)
    NOT             reduce using rule 80 (anon_function_expr -> FUNCTION LPAREN RPAREN NEWLINE block .)
    MOD             reduce using rule 80 (anon_function_expr -> FUNCTION LPAREN RPAREN NEWLINE block .)
    LBRACKET        reduce using rule 80 (anon_function_expr -> FUNCTION LPAREN RPAREN NEWLINE block .)
    REDIRECT        reduce using rule 80 (anon_function_expr -> FUNCTION LPAREN RPAREN NEWLINE block .)
    NEWLINE         reduce using rule 80 (anon_function_expr -> FUNCTION LPAREN RPAREN NEWLINE block .)
    $end            reduce using rule 80 (anon_function_expr -> FUNCTION LPAREN RPAREN NEWLINE block .)
    RBRACE          reduce using rule 80 (anon_function_expr -> FUNCTION LPAREN RPAREN NEWLINE block .)
    RPAREN          reduce using rule 80 (anon_function_expr -> FUNCTION LPAREN RPAREN NEWLINE block .)
    COLON           reduce using rule 80 (anon_function_expr -> FUNCTION LPAREN RPAREN NEWLINE block .)
    COMMA           reduce using rule 80 (anon_function_expr -> FUNCTION LPAREN RPAREN NEWLINE block .)
    RBRACKET        reduce using rule 80 (anon_function_expr -> FUNCTION LPAREN RPAREN NEWLINE block .)


state 227

    (22) block -> LBRACE RBRACE .

    REDIRECT        reduce using rule 22 (block -> LBRACE RBRACE .)
    NEWLINE         reduce using rule 22 (block -> LBRACE RBRACE .)
    $end            reduce using rule 22 (block -> LBRACE RBRACE .)
    RBRACE          reduce using rule 22 (block -> LBRACE RBRACE .)
    EQ              reduce using rule 22 (block -> LBRACE RBRACE .)
    NE              reduce using rule 22 (block -> LBRACE RBRACE .)
    GT              reduce using rule 22 (block -> LBRACE RBRACE .)
    GE              reduce using rule 22 (block -> LBRACE RBRACE .)
    LT              reduce using rule 22 (block -> LBRACE RBRACE .)
    LE              reduce using rule 22 (block -> LBRACE RBRACE .)
    PLUS            reduce using rule 22 (block -> LBRACE RBRACE .)
    MINUS           reduce using rule 22 (block -> LBRACE RBRACE .)
    MUL             reduce using rule 22 (block -> LBRACE RBRACE .)
    DIV             reduce using rule 22 (block -> LBRACE RBRACE .)
    REGEX           reduce using rule 22 (block -> LBRACE RBRACE .)
    AND             reduce using rule 22 (block -> LBRACE RBRACE .)
    OR              reduce using rule 22 (block -> LBRACE RBRACE .)
    NOT             reduce using rule 22 (block -> LBRACE RBRACE .)
    MOD             reduce using rule 22 (block -> LBRACE RBRACE .)
    LBRACKET        reduce using rule 22 (block -> LBRACE RBRACE .)
    RPAREN          reduce using rule 22 (block -> LBRACE RBRACE .)
    COLON           reduce using rule 22 (block -> LBRACE RBRACE .)
    COMMA           reduce using rule 22 (block -> LBRACE RBRACE .)
    RBRACKET        reduce using rule 22 (block -> LBRACE RBRACE .)
    ELSE            reduce using rule 22 (block -> LBRACE RBRACE .)


state 228

    (19) block -> LBRACE stmt_list . RBRACE

    RBRACE          shift and go to state 238


state 229

    (20) block -> LBRACE NEWLINE . stmt_list RBRACE
    (21) block -> LBRACE NEWLINE . RBRACE
    (4) stmt_list -> NEWLINE . stmt_list
    (1) stmt_list -> . stmt_redirect
    (2) stmt_list -> . stmt_redirect NEWLINE
    (3) stmt_list -> . stmt_redirect NEWLINE stmt_list
    (4) stmt_list -> . NEWLINE stmt_list
    (5) stmt_redirect -> . stmt
    (6) stmt_redirect -> . stmt REDIRECT ATOM
    (7) stmt_redirect -> . stmt REDIRECT STRING
    (8) stmt -> . if_stmt
    (9) stmt -> . for_stmt
    (10) stmt -> . while_stmt
    (11) stmt -> . assignment_stmt
    (12) stmt -> . function_definition_stmt
    (13) stmt -> . return_stmt
    (14) stmt -> . break_stmt
    (15) stmt -> . undef_stmt
    (16) stmt -> . command
    (17) stmt -> . call
    (18) stmt -> . shell
    (23) if_stmt -> . IF LPAREN expr RPAREN block
    (24) if_stmt -> . IF LPAREN expr RPAREN block ELSE block
    (25) for_stmt -> . FOR LPAREN ATOM IN expr RPAREN block
    (26) for_stmt -> . FOR LPAREN ATOM COMMA ATOM IN expr RPAREN block
    (27) while_stmt -> . WHILE LPAREN expr RPAREN block
    (28) assignment_stmt -> . ATOM ASSIGN expr
    (29) assignment_stmt -> . subscript_left ASSIGN expr
    (30) function_definition_stmt -> . FUNCTION ATOM LPAREN RPAREN block
    (31) function_definition_stmt -> . FUNCTION ATOM LPAREN function_argument_list RPAREN block
    (32) function_definition_stmt -> . FUNCTION ATOM LPAREN RPAREN NEWLINE block
    (33) function_definition_stmt -> . FUNCTION ATOM LPAREN function_argument_list RPAREN NEWLINE block
    (36) return_stmt -> . RETURN
    (37) return_stmt -> . RETURN expr
    (38) break_stmt -> . BREAK
    (39) undef_stmt -> . UNDEF ATOM
    (100) command -> . command_item
    (101) command -> . command_item parameter_list
    (102) command -> . command_item PIPE command
    (103) command -> . command_item parameter_list PIPE command
    (74) call -> . ATOM LPAREN RPAREN
    (75) call -> . ATOM LPAREN expr_list RPAREN
    (135) shell -> . SHELL
    (136) shell -> . SHELL parameter_list
    (76) subscript_left -> . subscript_left LBRACKET expr RBRACKET
    (77) subscript_left -> . symbol LBRACKET expr RBRACKET
    (104) command_item -> . LIST
    (105) command_item -> . NUMBER
    (106) command_item -> . UP
    (107) command_item -> . symbol
    (108) command_item -> . COPEN expr RBRACE
    (109) command_item -> . STRING
    (73) symbol -> . ATOM

    RBRACE          shift and go to state 239
    NEWLINE         shift and go to state 22
    IF              shift and go to state 13
    FOR             shift and go to state 28
    WHILE           shift and go to state 30
    ATOM            shift and go to state 11
    FUNCTION        shift and go to state 27
    RETURN          shift and go to state 3
    BREAK           shift and go to state 32
    UNDEF           shift and go to state 16
    SHELL           shift and go to state 15
    LIST            shift and go to state 8
    NUMBER          shift and go to state 26
    UP              shift and go to state 7
    COPEN           shift and go to state 31
    STRING          shift and go to state 19

    command_item                   shift and go to state 18
    shell                          shift and go to state 1
    for_stmt                       shift and go to state 2
    break_stmt                     shift and go to state 4
    if_stmt                        shift and go to state 20
    command                        shift and go to state 21
    stmt_redirect                  shift and go to state 6
    undef_stmt                     shift and go to state 5
    stmt                           shift and go to state 23
    symbol                         shift and go to state 24
    call                           shift and go to state 9
    subscript_left                 shift and go to state 10
    stmt_list                      shift and go to state 240
    while_stmt                     shift and go to state 12
    assignment_stmt                shift and go to state 29
    return_stmt                    shift and go to state 14
    function_definition_stmt       shift and go to state 17

state 230

    (24) if_stmt -> IF LPAREN expr RPAREN block ELSE . block
    (19) block -> . LBRACE stmt_list RBRACE
    (20) block -> . LBRACE NEWLINE stmt_list RBRACE
    (21) block -> . LBRACE NEWLINE RBRACE
    (22) block -> . LBRACE RBRACE

    LBRACE          shift and go to state 214

    block                          shift and go to state 241

state 231

    (31) function_definition_stmt -> FUNCTION ATOM LPAREN function_argument_list RPAREN block .

    REDIRECT        reduce using rule 31 (function_definition_stmt -> FUNCTION ATOM LPAREN function_argument_list RPAREN block .)
    NEWLINE         reduce using rule 31 (function_definition_stmt -> FUNCTION ATOM LPAREN function_argument_list RPAREN block .)
    $end            reduce using rule 31 (function_definition_stmt -> FUNCTION ATOM LPAREN function_argument_list RPAREN block .)
    RBRACE          reduce using rule 31 (function_definition_stmt -> FUNCTION ATOM LPAREN function_argument_list RPAREN block .)


state 232

    (33) function_definition_stmt -> FUNCTION ATOM LPAREN function_argument_list RPAREN NEWLINE . block
    (19) block -> . LBRACE stmt_list RBRACE
    (20) block -> . LBRACE NEWLINE stmt_list RBRACE
    (21) block -> . LBRACE NEWLINE RBRACE
    (22) block -> . LBRACE RBRACE

    LBRACE          shift and go to state 214

    block                          shift and go to state 242

state 233

    (32) function_definition_stmt -> FUNCTION ATOM LPAREN RPAREN NEWLINE block .

    REDIRECT        reduce using rule 32 (function_definition_stmt -> FUNCTION ATOM LPAREN RPAREN NEWLINE block .)
    NEWLINE         reduce using rule 32 (function_definition_stmt -> FUNCTION ATOM LPAREN RPAREN NEWLINE block .)
    $end            reduce using rule 32 (function_definition_stmt -> FUNCTION ATOM LPAREN RPAREN NEWLINE block .)
    RBRACE          reduce using rule 32 (function_definition_stmt -> FUNCTION ATOM LPAREN RPAREN NEWLINE block .)


state 234

    (25) for_stmt -> FOR LPAREN ATOM IN expr RPAREN . block
    (19) block -> . LBRACE stmt_list RBRACE
    (20) block -> . LBRACE NEWLINE stmt_list RBRACE
    (21) block -> . LBRACE NEWLINE RBRACE
    (22) block -> . LBRACE RBRACE

    LBRACE          shift and go to state 214

    block                          shift and go to state 243

state 235

    (26) for_stmt -> FOR LPAREN ATOM COMMA ATOM IN . expr RPAREN block
    (42) expr -> . symbol
    (43) expr -> . literal
    (44) expr -> . array_literal
    (45) expr -> . dict_literal
    (46) expr -> . unary_expr
    (47) expr -> . binary_expr
    (48) expr -> . call
    (49) expr -> . subscript_expr
    (50) expr -> . anon_function_expr
    (51) expr -> . expr_expansion
    (52) expr -> . LPAREN expr RPAREN
    (53) expr -> . COPEN expr RBRACE
    (73) symbol -> . ATOM
    (65) literal -> . NUMBER
    (66) literal -> . HEXNUMBER
    (67) literal -> . BINNUMBER
    (68) literal -> . OCTNUMBER
    (69) literal -> . STRING
    (70) literal -> . TRUE
    (71) literal -> . FALSE
    (72) literal -> . NULL
    (55) array_literal -> . LBRACKET RBRACKET
    (56) array_literal -> . LBRACKET expr_list RBRACKET
    (57) dict_literal -> . LBRACE RBRACE
    (58) dict_literal -> . LBRACE NEWLINE RBRACE
    (59) dict_literal -> . LBRACE dict_pair_list RBRACE
    (83) unary_expr -> . MINUS expr
    (84) unary_expr -> . NOT expr
    (85) binary_expr -> . expr EQ expr
    (86) binary_expr -> . expr NE expr
    (87) binary_expr -> . expr GT expr
    (88) binary_expr -> . expr GE expr
    (89) binary_expr -> . expr LT expr
    (90) binary_expr -> . expr LE expr
    (91) binary_expr -> . expr PLUS expr
    (92) binary_expr -> . expr MINUS expr
    (93) binary_expr -> . expr MUL expr
    (94) binary_expr -> . expr DIV expr
    (95) binary_expr -> . expr REGEX expr
    (96) binary_expr -> . expr AND expr
    (97) binary_expr -> . expr OR expr
    (98) binary_expr -> . expr NOT expr
    (99) binary_expr -> . expr MOD expr
    (74) call -> . ATOM LPAREN RPAREN
    (75) call -> . ATOM LPAREN expr_list RPAREN
    (78) subscript_expr -> . expr LBRACKET expr RBRACKET
    (79) anon_function_expr -> . FUNCTION LPAREN RPAREN block
    (80) anon_function_expr -> . FUNCTION LPAREN RPAREN NEWLINE block
    (81) anon_function_expr -> . FUNCTION LPAREN function_argument_list RPAREN block
    (82) anon_function_expr -> . FUNCTION LPAREN function_argument_list RPAREN NEWLINE block
    (54) expr_expansion -> . EOPEN command RPAREN

    LPAREN          shift and go to state 35
    COPEN           shift and go to state 60
    ATOM            shift and go to state 38
    NUMBER          shift and go to state 43
    HEXNUMBER       shift and go to state 57
    BINNUMBER       shift and go to state 58
    OCTNUMBER       shift and go to state 54
    STRING          shift and go to state 44
    TRUE            shift and go to state 46
    FALSE           shift and go to state 51
    NULL            shift and go to state 56
    LBRACKET        shift and go to state 52
    LBRACE          shift and go to state 47
    MINUS           shift and go to state 40
    NOT             shift and go to state 45
    FUNCTION        shift and go to state 53
    EOPEN           shift and go to state 55

    expr_expansion                 shift and go to state 39
    unary_expr                     shift and go to state 42
    literal                        shift and go to state 34
    expr                           shift and go to state 244
    array_literal                  shift and go to state 49
    subscript_expr                 shift and go to state 59
    symbol                         shift and go to state 50
    anon_function_expr             shift and go to state 41
    binary_expr                    shift and go to state 33
    call                           shift and go to state 36
    dict_literal                   shift and go to state 37

state 236

    (64) dict_pair -> NEWLINE expr COLON expr NEWLINE .

    COMMA           reduce using rule 64 (dict_pair -> NEWLINE expr COLON expr NEWLINE .)
    RBRACE          reduce using rule 64 (dict_pair -> NEWLINE expr COLON expr NEWLINE .)


state 237

    (82) anon_function_expr -> FUNCTION LPAREN function_argument_list RPAREN NEWLINE block .

    EQ              reduce using rule 82 (anon_function_expr -> FUNCTION LPAREN function_argument_list RPAREN NEWLINE block .)
    NE              reduce using rule 82 (anon_function_expr -> FUNCTION LPAREN function_argument_list RPAREN NEWLINE block .)
    GT              reduce using rule 82 (anon_function_expr -> FUNCTION LPAREN function_argument_list RPAREN NEWLINE block .)
    GE              reduce using rule 82 (anon_function_expr -> FUNCTION LPAREN function_argument_list RPAREN NEWLINE block .)
    LT              reduce using rule 82 (anon_function_expr -> FUNCTION LPAREN function_argument_list RPAREN NEWLINE block .)
    LE              reduce using rule 82 (anon_function_expr -> FUNCTION LPAREN function_argument_list RPAREN NEWLINE block .)
    PLUS            reduce using rule 82 (anon_function_expr -> FUNCTION LPAREN function_argument_list RPAREN NEWLINE block .)
    MINUS           reduce using rule 82 (anon_function_expr -> FUNCTION LPAREN function_argument_list RPAREN NEWLINE block .)
    MUL             reduce using rule 82 (anon_function_expr -> FUNCTION LPAREN function_argument_list RPAREN NEWLINE block .)
    DIV             reduce using rule 82 (anon_function_expr -> FUNCTION LPAREN function_argument_list RPAREN NEWLINE block .)
    REGEX           reduce using rule 82 (anon_function_expr -> FUNCTION LPAREN function_argument_list RPAREN NEWLINE block .)
    AND             reduce using rule 82 (anon_function_expr -> FUNCTION LPAREN function_argument_list RPAREN NEWLINE block .)
    OR              reduce using rule 82 (anon_function_expr -> FUNCTION LPAREN function_argument_list RPAREN NEWLINE block .)
    NOT             reduce using rule 82 (anon_function_expr -> FUNCTION LPAREN function_argument_list RPAREN NEWLINE block .)
    MOD             reduce using rule 82 (anon_function_expr -> FUNCTION LPAREN function_argument_list RPAREN NEWLINE block .)
    LBRACKET        reduce using rule 82 (anon_function_expr -> FUNCTION LPAREN function_argument_list RPAREN NEWLINE block .)
    REDIRECT        reduce using rule 82 (anon_function_expr -> FUNCTION LPAREN function_argument_list RPAREN NEWLINE block .)
    NEWLINE         reduce using rule 82 (anon_function_expr -> FUNCTION LPAREN function_argument_list RPAREN NEWLINE block .)
    $end            reduce using rule 82 (anon_function_expr -> FUNCTION LPAREN function_argument_list RPAREN NEWLINE block .)
    RBRACE          reduce using rule 82 (anon_function_expr -> FUNCTION LPAREN function_argument_list RPAREN NEWLINE block .)
    RPAREN          reduce using rule 82 (anon_function_expr -> FUNCTION LPAREN function_argument_list RPAREN NEWLINE block .)
    COLON           reduce using rule 82 (anon_function_expr -> FUNCTION LPAREN function_argument_list RPAREN NEWLINE block .)
    COMMA           reduce using rule 82 (anon_function_expr -> FUNCTION LPAREN function_argument_list RPAREN NEWLINE block .)
    RBRACKET        reduce using rule 82 (anon_function_expr -> FUNCTION LPAREN function_argument_list RPAREN NEWLINE block .)


state 238

    (19) block -> LBRACE stmt_list RBRACE .

    REDIRECT        reduce using rule 19 (block -> LBRACE stmt_list RBRACE .)
    NEWLINE         reduce using rule 19 (block -> LBRACE stmt_list RBRACE .)
    $end            reduce using rule 19 (block -> LBRACE stmt_list RBRACE .)
    RBRACE          reduce using rule 19 (block -> LBRACE stmt_list RBRACE .)
    EQ              reduce using rule 19 (block -> LBRACE stmt_list RBRACE .)
    NE              reduce using rule 19 (block -> LBRACE stmt_list RBRACE .)
    GT              reduce using rule 19 (block -> LBRACE stmt_list RBRACE .)
    GE              reduce using rule 19 (block -> LBRACE stmt_list RBRACE .)
    LT              reduce using rule 19 (block -> LBRACE stmt_list RBRACE .)
    LE              reduce using rule 19 (block -> LBRACE stmt_list RBRACE .)
    PLUS            reduce using rule 19 (block -> LBRACE stmt_list RBRACE .)
    MINUS           reduce using rule 19 (block -> LBRACE stmt_list RBRACE .)
    MUL             reduce using rule 19 (block -> LBRACE stmt_list RBRACE .)
    DIV             reduce using rule 19 (block -> LBRACE stmt_list RBRACE .)
    REGEX           reduce using rule 19 (block -> LBRACE stmt_list RBRACE .)
    AND             reduce using rule 19 (block -> LBRACE stmt_list RBRACE .)
    OR              reduce using rule 19 (block -> LBRACE stmt_list RBRACE .)
    NOT             reduce using rule 19 (block -> LBRACE stmt_list RBRACE .)
    MOD             reduce using rule 19 (block -> LBRACE stmt_list RBRACE .)
    LBRACKET        reduce using rule 19 (block -> LBRACE stmt_list RBRACE .)
    RPAREN          reduce using rule 19 (block -> LBRACE stmt_list RBRACE .)
    COLON           reduce using rule 19 (block -> LBRACE stmt_list RBRACE .)
    COMMA           reduce using rule 19 (block -> LBRACE stmt_list RBRACE .)
    RBRACKET        reduce using rule 19 (block -> LBRACE stmt_list RBRACE .)
    ELSE            reduce using rule 19 (block -> LBRACE stmt_list RBRACE .)


state 239

    (21) block -> LBRACE NEWLINE RBRACE .

    REDIRECT        reduce using rule 21 (block -> LBRACE NEWLINE RBRACE .)
    NEWLINE         reduce using rule 21 (block -> LBRACE NEWLINE RBRACE .)
    $end            reduce using rule 21 (block -> LBRACE NEWLINE RBRACE .)
    RBRACE          reduce using rule 21 (block -> LBRACE NEWLINE RBRACE .)
    EQ              reduce using rule 21 (block -> LBRACE NEWLINE RBRACE .)
    NE              reduce using rule 21 (block -> LBRACE NEWLINE RBRACE .)
    GT              reduce using rule 21 (block -> LBRACE NEWLINE RBRACE .)
    GE              reduce using rule 21 (block -> LBRACE NEWLINE RBRACE .)
    LT              reduce using rule 21 (block -> LBRACE NEWLINE RBRACE .)
    LE              reduce using rule 21 (block -> LBRACE NEWLINE RBRACE .)
    PLUS            reduce using rule 21 (block -> LBRACE NEWLINE RBRACE .)
    MINUS           reduce using rule 21 (block -> LBRACE NEWLINE RBRACE .)
    MUL             reduce using rule 21 (block -> LBRACE NEWLINE RBRACE .)
    DIV             reduce using rule 21 (block -> LBRACE NEWLINE RBRACE .)
    REGEX           reduce using rule 21 (block -> LBRACE NEWLINE RBRACE .)
    AND             reduce using rule 21 (block -> LBRACE NEWLINE RBRACE .)
    OR              reduce using rule 21 (block -> LBRACE NEWLINE RBRACE .)
    NOT             reduce using rule 21 (block -> LBRACE NEWLINE RBRACE .)
    MOD             reduce using rule 21 (block -> LBRACE NEWLINE RBRACE .)
    LBRACKET        reduce using rule 21 (block -> LBRACE NEWLINE RBRACE .)
    RPAREN          reduce using rule 21 (block -> LBRACE NEWLINE RBRACE .)
    COLON           reduce using rule 21 (block -> LBRACE NEWLINE RBRACE .)
    COMMA           reduce using rule 21 (block -> LBRACE NEWLINE RBRACE .)
    RBRACKET        reduce using rule 21 (block -> LBRACE NEWLINE RBRACE .)
    ELSE            reduce using rule 21 (block -> LBRACE NEWLINE RBRACE .)


state 240

    (20) block -> LBRACE NEWLINE stmt_list . RBRACE
    (4) stmt_list -> NEWLINE stmt_list .

  ! shift/reduce conflict for RBRACE resolved as shift
    RBRACE          shift and go to state 245

  ! RBRACE          [ reduce using rule 4 (stmt_list -> NEWLINE stmt_list .) ]


state 241

    (24) if_stmt -> IF LPAREN expr RPAREN block ELSE block .

    REDIRECT        reduce using rule 24 (if_stmt -> IF LPAREN expr RPAREN block ELSE block .)
    NEWLINE         reduce using rule 24 (if_stmt -> IF LPAREN expr RPAREN block ELSE block .)
    RBRACE          reduce using rule 24 (if_stmt -> IF LPAREN expr RPAREN block ELSE block .)
    $end            reduce using rule 24 (if_stmt -> IF LPAREN expr RPAREN block ELSE block .)


state 242

    (33) function_definition_stmt -> FUNCTION ATOM LPAREN function_argument_list RPAREN NEWLINE block .

    REDIRECT        reduce using rule 33 (function_definition_stmt -> FUNCTION ATOM LPAREN function_argument_list RPAREN NEWLINE block .)
    NEWLINE         reduce using rule 33 (function_definition_stmt -> FUNCTION ATOM LPAREN function_argument_list RPAREN NEWLINE block .)
    $end            reduce using rule 33 (function_definition_stmt -> FUNCTION ATOM LPAREN function_argument_list RPAREN NEWLINE block .)
    RBRACE          reduce using rule 33 (function_definition_stmt -> FUNCTION ATOM LPAREN function_argument_list RPAREN NEWLINE block .)


state 243

    (25) for_stmt -> FOR LPAREN ATOM IN expr RPAREN block .

    REDIRECT        reduce using rule 25 (for_stmt -> FOR LPAREN ATOM IN expr RPAREN block .)
    NEWLINE         reduce using rule 25 (for_stmt -> FOR LPAREN ATOM IN expr RPAREN block .)
    RBRACE          reduce using rule 25 (for_stmt -> FOR LPAREN ATOM IN expr RPAREN block .)
    $end            reduce using rule 25 (for_stmt -> FOR LPAREN ATOM IN expr RPAREN block .)


state 244

    (26) for_stmt -> FOR LPAREN ATOM COMMA ATOM IN expr . RPAREN block
    (85) binary_expr -> expr . EQ expr
    (86) binary_expr -> expr . NE expr
    (87) binary_expr -> expr . GT expr
    (88) binary_expr -> expr . GE expr
    (89) binary_expr -> expr . LT expr
    (90) binary_expr -> expr . LE expr
    (91) binary_expr -> expr . PLUS expr
    (92) binary_expr -> expr . MINUS expr
    (93) binary_expr -> expr . MUL expr
    (94) binary_expr -> expr . DIV expr
    (95) binary_expr -> expr . REGEX expr
    (96) binary_expr -> expr . AND expr
    (97) binary_expr -> expr . OR expr
    (98) binary_expr -> expr . NOT expr
    (99) binary_expr -> expr . MOD expr
    (78) subscript_expr -> expr . LBRACKET expr RBRACKET

    RPAREN          shift and go to state 246
    EQ              shift and go to state 99
    NE              shift and go to state 100
    GT              shift and go to state 103
    GE              shift and go to state 108
    LT              shift and go to state 109
    LE              shift and go to state 105
    PLUS            shift and go to state 114
    MINUS           shift and go to state 106
    MUL             shift and go to state 101
    DIV             shift and go to state 102
    REGEX           shift and go to state 113
    AND             shift and go to state 111
    OR              shift and go to state 107
    NOT             shift and go to state 104
    MOD             shift and go to state 112
    LBRACKET        shift and go to state 110


state 245

    (20) block -> LBRACE NEWLINE stmt_list RBRACE .

    REDIRECT        reduce using rule 20 (block -> LBRACE NEWLINE stmt_list RBRACE .)
    NEWLINE         reduce using rule 20 (block -> LBRACE NEWLINE stmt_list RBRACE .)
    $end            reduce using rule 20 (block -> LBRACE NEWLINE stmt_list RBRACE .)
    RBRACE          reduce using rule 20 (block -> LBRACE NEWLINE stmt_list RBRACE .)
    EQ              reduce using rule 20 (block -> LBRACE NEWLINE stmt_list RBRACE .)
    NE              reduce using rule 20 (block -> LBRACE NEWLINE stmt_list RBRACE .)
    GT              reduce using rule 20 (block -> LBRACE NEWLINE stmt_list RBRACE .)
    GE              reduce using rule 20 (block -> LBRACE NEWLINE stmt_list RBRACE .)
    LT              reduce using rule 20 (block -> LBRACE NEWLINE stmt_list RBRACE .)
    LE              reduce using rule 20 (block -> LBRACE NEWLINE stmt_list RBRACE .)
    PLUS            reduce using rule 20 (block -> LBRACE NEWLINE stmt_list RBRACE .)
    MINUS           reduce using rule 20 (block -> LBRACE NEWLINE stmt_list RBRACE .)
    MUL             reduce using rule 20 (block -> LBRACE NEWLINE stmt_list RBRACE .)
    DIV             reduce using rule 20 (block -> LBRACE NEWLINE stmt_list RBRACE .)
    REGEX           reduce using rule 20 (block -> LBRACE NEWLINE stmt_list RBRACE .)
    AND             reduce using rule 20 (block -> LBRACE NEWLINE stmt_list RBRACE .)
    OR              reduce using rule 20 (block -> LBRACE NEWLINE stmt_list RBRACE .)
    NOT             reduce using rule 20 (block -> LBRACE NEWLINE stmt_list RBRACE .)
    MOD             reduce using rule 20 (block -> LBRACE NEWLINE stmt_list RBRACE .)
    LBRACKET        reduce using rule 20 (block -> LBRACE NEWLINE stmt_list RBRACE .)
    RPAREN          reduce using rule 20 (block -> LBRACE NEWLINE stmt_list RBRACE .)
    COLON           reduce using rule 20 (block -> LBRACE NEWLINE stmt_list RBRACE .)
    COMMA           reduce using rule 20 (block -> LBRACE NEWLINE stmt_list RBRACE .)
    RBRACKET        reduce using rule 20 (block -> LBRACE NEWLINE stmt_list RBRACE .)
    ELSE            reduce using rule 20 (block -> LBRACE NEWLINE stmt_list RBRACE .)


state 246

    (26) for_stmt -> FOR LPAREN ATOM COMMA ATOM IN expr RPAREN . block
    (19) block -> . LBRACE stmt_list RBRACE
    (20) block -> . LBRACE NEWLINE stmt_list RBRACE
    (21) block -> . LBRACE NEWLINE RBRACE
    (22) block -> . LBRACE RBRACE

    LBRACE          shift and go to state 214

    block                          shift and go to state 247

state 247

    (26) for_stmt -> FOR LPAREN ATOM COMMA ATOM IN expr RPAREN block .

    REDIRECT        reduce using rule 26 (for_stmt -> FOR LPAREN ATOM COMMA ATOM IN expr RPAREN block .)
    NEWLINE         reduce using rule 26 (for_stmt -> FOR LPAREN ATOM COMMA ATOM IN expr RPAREN block .)
    RBRACE          reduce using rule 26 (for_stmt -> FOR LPAREN ATOM COMMA ATOM IN expr RPAREN block .)
    $end            reduce using rule 26 (for_stmt -> FOR LPAREN ATOM COMMA ATOM IN expr RPAREN block .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for RBRACE in state 240 resolved as shift
