#!/usr/bin/env python

import sys
import argh
import json
import time
import socket
from dispatcherclient import Client, ClientError
from texttable import Texttable

DEFAULT_SERVER = '127.0.0.1'
DEFAULT_TIMEOUT = 10

@argh.arg('--server')
@argh.arg('--timeout')
@argh.arg('-j')
@argh.arg('args', nargs='*')
def call(method, args, server=DEFAULT_SERVER, timeout=DEFAULT_TIMEOUT, j=False):
    c = create_client(server)
    result = c.call_sync(method, timeout, args)
    print result

@argh.arg('--server')
def enumerate(server=DEFAULT_SERVER):
    c = create_client(server)
    for svc in c.call_sync('discovery.get_services'):
        print "Service: {0}".format(svc)
        print "Methods:"
        for m in c.call_sync('discovery.get_methods', DEFAULT_TIMEOUT, svc):
            print "\t{0}".format(m)

@argh.arg('--server')
@argh.arg('events', nargs='*')
def listen(events, server=DEFAULT_SERVER):
    def callback(name, args):
        print "New event: {0}".format(name)

    c = create_client(server)
    c.event_callback = callback
    c.subscribe_events(*events)
    try:
        c.wait_forever()
    except KeyboardInterrupt:
        return

@argh.arg('--server')
def submit(task, args, server=DEFAULT_SERVER):
    pass

@argh.arg('--server')
@argh.arg('--limit')
def tasks(server=DEFAULT_SERVER, limit=None, H=False):
    c = create_client(server)
    result = c.call_sync('task.list_tasks', limit)

    table = Texttable(0)
    table.set_deco(Texttable.HEADER | Texttable.VLINES)

    table.add_row(['ID', 'Name', 'Arguments', 'State', 'Progress', 'Created at'])

    for task in result:
        table.add_row([
            task['id'],
            task['name'],
            ','.join(task['args']),
            task['state'],
            '',
            time.strftime('%Y-%m-%d %H:%M:%S', time.localtime(task['created_at']))
        ])

    print table.draw()

@argh.arg('--server')
def poll(task_id, server=DEFAULT_SERVER):
    c = create_client(server)
    result = c.call_sync('task.status', DEFAULT_TIMEOUT, task_id)
    print "Task #{0}:".format(result['id'])
    print "Created at: {0}".format(time.localtime(result['created_at']))
    print "Name: {0}".format(result['name'])
    print "Arguments: {0}".format(','.join(result['args']))
    print "State: {0}".format(result['state'])

    if 'progress' in result:
        pass


def create_client(server):
    try:
        c = Client()
        c.connect(server)
    except socket.error, err:
        print "Cannot connect: {0}".format(str(err))
        sys.exit(1)

    return c


def main():
    parser = argh.ArghParser()
    parser.add_commands([enumerate, call, listen, submit, poll, tasks])
    parser.dispatch()


if __name__ == '__main__':
    main()