#!/usr/bin/env python

import sys
import argh
import json
import time
import requests
from texttable import Texttable

DEFAULT_SERVER = 'http://localhost:5000/api'

@argh.arg('--server')
@argh.arg('-j')
@argh.arg('args', nargs='*')
def call(method, args, server=DEFAULT_SERVER, j=False):
    r = do_request(server, params={"func": method, "args": json.dumps(args)})
    print r.json()

@argh.arg('--server')
def enumerate(server=DEFAULT_SERVER):
    r = do_request(server, params={"func": "discovery.get_services"})
    result = r.json()
    for svc in r.json():
        print "Service: {0}".format(svc)
        print "Methods:"
        r = requests.get(server, params={"func": "discovery.get_methods", "args": json.dumps([svc])})
        for m in r.json():
            print "\t{0}".format(m)

@argh.arg('--server')
def listen(events, server=DEFAULT_SERVER):
    pass

@argh.arg('--server')
def submit(task, args, server=DEFAULT_SERVER):
    pass

@argh.arg('--server')
@argh.arg('--limit')
def tasks(server=DEFAULT_SERVER, limit=None, H=False):
    r = do_request(server, params={"func": "task.list_tasks", "args": json.dumps([limit])})
    result = r.json()

    table = Texttable(0)
    table.set_deco(Texttable.HEADER | Texttable.VLINES)

    table.add_row(['ID', 'Name', 'Arguments', 'State', 'Progress', 'Created at'])

    for task in result:
        table.add_row([
            task['id'],
            task['name'],
            ','.join(task['args']),
            task['state'],
            '',
            time.strftime('%Y-%m-%d %H:%M:%S', time.localtime(task['created_at']))
        ])

    print table.draw()

@argh.arg('--server')
def poll(task_id, server=DEFAULT_SERVER):
    r = do_request(server, params={"func": "task.status", "args": json.dumps([task_id])})
    result = r.json()
    print "Task #{0}:".format(result['id'])
    print "Created at: {0}".format(time.localtime(result['created_at']))
    print "Name: {0}".format(result['name'])
    print "Arguments: {0}".format(','.join(result['args']))
    print "State: {0}".format(result['state'])

    if 'progress' in result:
        pass


def do_request(server, params):
    r = requests.get(server, params=params)
    if r.status_code != 200:
        print "Error:"
        print r.text
        sys.exit(1)

    return r


def main():
    parser = argh.ArghParser()
    parser.add_commands([enumerate, call, listen, submit, poll, tasks])
    parser.dispatch()


if __name__ == '__main__':
    main()