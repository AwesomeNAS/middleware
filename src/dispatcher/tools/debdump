#!/usr/local/bin/python3
#
# Copyright 2017 iXsystems, Inc.
# All rights reserved
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted providing that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
# IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
# OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
# STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
# IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
#####################################################################

import os
import logging
import argparse
from freenas.dispatcher.client import Client


logger = logging.getLogger(__name__)
EXAMPLE_USAGE = '''
Examples:

Create the debug file named debug.tgz and save it to the /root directory:
debdump /root/debug.tgz
'''


if __name__ == '__main__':
    parser = argparse.ArgumentParser(
        description='The debdump command saves a gzip compressed text file of diagnostic information to the specified path.',
        epilog=EXAMPLE_USAGE,
        formatter_class=argparse.RawDescriptionHelpFormatter
    )
    parser.add_argument('path', help='Specify the full path and filename.')
    parser.add_argument('--nologs', action='store_true', help='Exclude logs.')
    parser.add_argument('--cores', action='store_true', help='Include core files.')
    parser.add_argument('--force', action='store_true', help='Force target path creation if it does not already exist.')

    args = parser.parse_args()
    path = os.path.abspath(args.path)
    force = args.force
    target_dir = os.path.dirname(path)

    if force:
        os.makedirs(target_dir, exist_ok=True)
    else:
        if not os.path.exists(target_dir):
            logger.error(f'Directory {target_dir} does not exist')
            exit(1)

        if os.path.exists(path):
            logger.error(f'{path} already exists')
            exit(1)

    if not os.path.isdir(target_dir):
        logger.error(f'{target_dir} is not a directory')
        exit(1)

    client = Client()
    client.connect('unix:')
    client.login_service('debug_dump')
    result = client.call_task_sync('debug.save_to_file', path, not args.nologs, args.cores)
    client.disconnect()

    if result['state'] != 'FINISHED':
        logger.error('Debug data download failed: {0}'.format(
            result['error']['message']
        ))
        exit(1)
