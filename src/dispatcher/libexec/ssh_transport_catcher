#+
# Copyright 2014 iXsystems, Inc.
# All rights reserved
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted providing that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
# IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
# OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
# STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
# IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
#####################################################################

import logging
import sys
import os
import uuid
from ws4py.client.threadedclient import WebSocketClient
from dispatcher.client import ClientType
from dispatcher.client import spawn_thread
from dispatcher.jsonenc import dumps
from threading import Thread
from threading import Event
from threading import RLock

_thread_type = ClientType.THREADED


class TransportCatcherSSH(object):
    class WebSocketHandler(WebSocketClient):
        def __init__(self, url, parent):
            logging.basicConfig(filename='/root/dupa.log', level=logging.DEBUG)
            super(TransportCatcherSSH.WebSocketHandler, self).__init__(url)
            self.parent = parent
            
        def opened(self):
            self.parent.opened.set()

        def closed(self, code, reason=None):
            self.parent.ended = 1
            self.parent.opened.clear()
            self.parent.ws.close()
            sys.exit(0)

        def received_message(self, message):
            try:
                #os.write(1, message)
                if message:
                    message = str(message) + '\n'
                    sys.stdout.write(message)
                    sys.stdout.flush()
            except Exception, e:
                print "%s" % e

    def __init__(self):
        self.hostname = '127.0.0.1'
        self.port = 5000
        self.buffer_size = 65536
        self.ws = None
        self.ended = None
        self.opened = Event()

    def wait_forever(self):
        self.ws.run_forever()

    def start(self):
        logging.basicConfig(filename='/root/dupa.log', level=logging.DEBUG)
        ws_url = 'ws://{0}:{1}/socket'.format(self.hostname, self.port)
        self.ws = self.WebSocketHandler(ws_url, self)
        self.ws.connect()
        self.opened.wait()

        ssh_client_data = os.getenv("SSH_CLIENT")
        addr, outport, inport = ssh_client_data.split(' ', 3)
        outport = int(outport)
        client_address = [addr, outport]

        self.ws.send(self.pack('transport', 'setup', client_address))
        t = spawn_thread(target=self.send)
        t.setDaemon(True)
        t.start()
        self.wait_forever()

    def send(self):
        while not self.ended:
            message = sys.stdin.readline()
            if message:
                self.ws.send(message)

    def pack(self, namespace, name, args, id=None):
        return dumps({
            'namespace': namespace,
            'name': name,
            'args': args,
            'id': str(id if id is not None else uuid.uuid4())
        })
        
    @property
    def connected(self):
        return self.opened.is_set()

catcher = TransportCatcherSSH()
catcher.start()

