#!/usr/local/bin/python3
#+
# Copyright 2014 iXsystems, Inc.
# All rights reserved
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted providing that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
# IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
# OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
# STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
# IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
#####################################################################

import os
import sys
import argparse
import json
import shutil
import datastore
import datastore.restore


DEFAULT_CONFIGFILE = '/usr/local/etc/middleware.conf'
DEFAULT_FACTORY_FILE = '/usr/local/share/datastore/factory.json'
ds = None


def init_datastore(filename, alt):
    global ds

    try:
        ds = datastore.get_datastore(filename, log=False, alt=alt)
    except datastore.DatastoreException as err:
        print("Cannot initialize datastore: {0}".format(str(err)), file=sys.stderr)
        sys.exit(1)


def main():
    global ds
    parser = argparse.ArgumentParser()
    parser.add_argument('-c', metavar='CONFIG', default=DEFAULT_CONFIGFILE, help='Config file name')
    parser.add_argument('-f', metavar='FILE', default=DEFAULT_FACTORY_FILE, help='Input file name')
    parser.add_argument('-t', metavar='TYPE', default='', help='Collection types to restore')
    parser.add_argument('--reset', action='store_true')
    parser.add_argument('--alt', action='store_true', help='Use alternate DSN')

    args = parser.parse_args()
    types = list(filter(None, args.t.split(',')))
    init_datastore(args.c, args.alt)

    try:
        fd = open(args.f, 'r') if args.f else sys.stdin
        dump = json.load(fd)
    except IOError as err:
        print("Cannot open input file: {0}".format(str(err)))
        sys.exit(1)
    except ValueError as err:
        print("Cannot parse input file: {0}".format(str(err)))
        sys.exit(1)

    def print_progress(name):
        print("Restored collection {0}".format(name), file=sys.stderr)

    if args.reset:
        try:
            f = open(args.c, 'r')
            config = json.load(f)
            f.close()
        except IOError as err:
            print('Cannot read config file: {0}'.format(err.message), file=sys.stderr)
            sys.exit(1)
        except ValueError:
            print('Config file has unreadable format (not valid JSON)', file=sys.stderr)
            sys.exit(1)

        dbdir = config['datastore']['dbdir']
        shutil.rmtree(dbdir)
        os.mkdir(dbdir)

    datastore.restore.restore_db(ds, dump, types, print_progress)


if __name__ == '__main__':
    main()
