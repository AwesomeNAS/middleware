#!/usr/local/bin/python3
#
# Copyright 2016 iXsystems, Inc.
# All rights reserved
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted providing that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
# IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
# OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
# STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
# IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
#####################################################################

import os
import sys
import json
import argparse
import urllib.parse
import subprocess
import time
import logging
import setproctitle
import shutil
import signal
import threading
import pymongo
from string import Template
from datastore import get_datastore
from datastore.restore import restore_db
from freenas.utils import configure_logging


HEALTH_CHECK_INTERVAL = 5
DEFAULT_CONFIGFILE = '/usr/local/etc/middleware.conf'
DEFAULT_FACTORY_FILE = '/usr/local/share/datastore/factory.json'
MONGOD_ARGS = [
    '/usr/local/bin/mongod',
    '--config', '/usr/local/lib/datastore/drivers/mongodb/mongod.conf',
    '--dbpath', '${dbdir}',
    '--logpath', '${dbdir}/mongod.log',
    '--quiet',
    '--port', '${port}'
]


logger = logging.getLogger('dswatch')
proc = None
exiting = False


def sigterm(signo, frame):
    global exiting

    logger.info('Terminating on SIGTERM')

    if proc:
        try:
            proc.terminate()
        except ProcessLookupError:
            pass

    exiting = True


def expand(arr, **kwargs):
    return [Template(a).substitute(**kwargs) for a in arr]


def read_config(filename):
    try:
        f = open(filename)
        conf = json.load(f)
        f.close()
    except IOError as err:
        print("Cannot read config file: {0}".format(str(err)), file=sys.stderr)
        sys.exit(1)
    except ValueError as err:
        print("Cannot read config file: {0}".format(str(err)), file=sys.stderr)
        sys.exit(1)

    return conf


def recreate(dbdir):
    shutil.rmtree(dbdir)
    os.mkdir(dbdir)


def restore():
    logger.info('Restoring factory collections layout')
    try:
        with open(DEFAULT_FACTORY_FILE, 'r') as fd:
            dump = json.load(fd)
            ds = get_datastore(log=True)
            restore_db(ds, dump, ['log'])
    except IOError as err:
        logger.error("Cannot open input file: {0}".format(str(err)))
    except ValueError as err:
        logger.error("Cannot parse input file: {0}".format(str(err)))


def check_health(dsn):
    signal.pthread_sigmask(signal.SIG_BLOCK, [signal.SIGTERM])
    while not exiting:
        if proc and proc.poll() is None:
            try:
                conn = pymongo.MongoClient(dsn)
                result = conn['freenas'].command({'serverStatus': 1})

                if sum(result['asserts'].values()) > 0:
                    logger.warning('Found errors reported by MongoDB instance, restarting')
                    proc.terminate()

                conn.close()
            except:
                logger.warning('Cannot connect to MongoDB, restarting')
                proc.terminate()

        time.sleep(HEALTH_CHECK_INTERVAL)


def main():
    global proc
    parser = argparse.ArgumentParser()
    parser.add_argument('-c', metavar='CONFIG', default=DEFAULT_CONFIGFILE, help='Config file name')
    parser.add_argument('name', metavar='NAME', help='Datastore name')
    args = parser.parse_args()
    config = read_config(args.c)
    configure_logging('/var/tmp/dswatch.{0}.log'.format(args.name), 'DEBUG')
    dsconfig = config.get(args.name)

    if not dsconfig:
        logger.error('Cannot find datastore configuration for {0}'.format(args.name))
        sys.exit(1)

    dbdir = dsconfig['dbdir']
    url = urllib.parse.urlparse(dsconfig['dsn'])

    setproctitle.setproctitle('dswatch: {0}'.format(args.name))
    logger.info('Datastore name: {0}'.format(args.name))
    logger.info('Database directory: {0}'.format(dsconfig['dbdir']))

    signal.pthread_sigmask(signal.SIG_BLOCK, [signal.SIGTERM])
    t = threading.Thread(target=check_health, args=(dsconfig['dsn'],))
    t.daemon = True
    t.start()

    signal.pthread_sigmask(signal.SIG_UNBLOCK, [signal.SIGTERM])
    signal.signal(signal.SIGTERM, sigterm)

    while True:
        args = {
            'dbdir': dbdir,
            'port': url.port
        }

        if not os.path.isdir(dbdir):
            logger.warning('Database directory doesn\'t exist: retrying in 5 seconds')
            time.sleep(HEALTH_CHECK_INTERVAL)
            continue

        proc = subprocess.Popen(expand(MONGOD_ARGS, **args), close_fds=True)
        logger.info('Started MongoDB as PID {0}'.format(proc.pid))

        if not os.path.exists(os.path.join(dbdir, 'freenas/freenas.0')):
            restore()

        try:
            ret = proc.wait()
        except KeyboardInterrupt:
            logger.warning('Interrupted')
            sys.exit(1)

        if exiting:
            break

        if ret != 0:
            logger.warning('MongoDB exited with return code {0}'.format(ret))
            if ret in (100, -6, -11):
                logger.warning('wiping out database directory')
                recreate(dbdir)


if __name__ == '__main__':
    main()
