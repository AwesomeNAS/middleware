#!/usr/local/bin/python3.4
#
# Copyright 2016 iXsystems, Inc.
# All rights reserved
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted providing that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
# IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
# OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
# STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
# IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
#####################################################################

import argparse
from freenas.dispatcher.client import Client


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('-v', type=str, metavar='VOLUME', help='Volume to search in')
    parser.add_argument('-r', type=bool, help='Regex patterns')
    parser.add_argument('patterns', nargs='+')
    args = parser.parse_args()

    client = Client()
    client.connect('unix:')
    client.login_service('locate')
    client.call_sync('management.enable_features', ['streaming_responses'])

    patterns = args.patterns
    if not args.r:
        patterns = ['.*{0}.*'.format(i) for i in patterns]

    filters = [('or', [('id', '~', p) for p in patterns])]
    if args.v:
        filters.append(('volume', '=', args.v))

    try:
        for result in client.call_sync('index.query', filters):
            print('{0} (type: {1})'.format(result['id'], result['type'].lower()))
    except KeyboardInterrupt:
        pass
    finally:
        client.disconnect()


if __name__ == '__main__':
    main()
